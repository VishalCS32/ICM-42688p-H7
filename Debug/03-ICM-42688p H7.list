
03-ICM-42688p H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080087d8  080087d8  000097d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c8c  08008c8c  00009c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c94  08008c94  00009c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008c98  08008c98  00009c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08008c9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  240001d8  08008e74  0000a1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003fc  08008e74  0000a3fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010613  00000000  00000000  0000a206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002aba  00000000  00000000  0001a819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f50  00000000  00000000  0001d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b64  00000000  00000000  0001e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003705e  00000000  00000000  0001ed8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011910  00000000  00000000  00055dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153f15  00000000  00000000  000676fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bb60f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c1c  00000000  00000000  001bb654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001c0270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080087c0 	.word	0x080087c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	080087c0 	.word	0x080087c0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003d6:	4b34      	ldr	r3, [pc, #208]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 80003d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003dc:	4a32      	ldr	r2, [pc, #200]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 80003de:	f043 0310 	orr.w	r3, r3, #16
 80003e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003e6:	4b30      	ldr	r3, [pc, #192]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 80003e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	613b      	str	r3, [r7, #16]
 80003f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003f4:	4b2c      	ldr	r3, [pc, #176]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 80003f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003fa:	4a2b      	ldr	r2, [pc, #172]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 80003fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000404:	4b28      	ldr	r3, [pc, #160]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 8000406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800040a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b25      	ldr	r3, [pc, #148]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 8000414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000418:	4a23      	ldr	r2, [pc, #140]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000422:	4b21      	ldr	r3, [pc, #132]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 8000424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b1d      	ldr	r3, [pc, #116]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 8000432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000436:	4a1c      	ldr	r2, [pc, #112]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000440:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <MX_GPIO_Init+0xe8>)
 8000442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2108      	movs	r1, #8
 8000452:	4816      	ldr	r0, [pc, #88]	@ (80004ac <MX_GPIO_Init+0xec>)
 8000454:	f001 fc62 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800045e:	4814      	ldr	r0, [pc, #80]	@ (80004b0 <MX_GPIO_Init+0xf0>)
 8000460:	f001 fc5c 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000464:	2308      	movs	r3, #8
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4619      	mov	r1, r3
 800047a:	480c      	ldr	r0, [pc, #48]	@ (80004ac <MX_GPIO_Init+0xec>)
 800047c:	f001 faa6 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_GPIO_Init+0xf0>)
 800049a:	f001 fa97 	bl	80019cc <HAL_GPIO_Init>

}
 800049e:	bf00      	nop
 80004a0:	3728      	adds	r7, #40	@ 0x28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	58024400 	.word	0x58024400
 80004ac:	58021000 	.word	0x58021000
 80004b0:	58020000 	.word	0x58020000

080004b4 <CS_Low>:
#include "icm42688p.h"
#include <stdio.h>

// ====== LOW LEVEL SPI FUNCTIONS ======
static void CS_Low(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_CS_PORT, ICM42688P_CS_PIN, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004be:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <CS_Low+0x14>)
 80004c0:	f001 fc2c 	bl	8001d1c <HAL_GPIO_WritePin>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	58020000 	.word	0x58020000

080004cc <CS_High>:
static void CS_High(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_CS_PORT, ICM42688P_CS_PIN, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004d6:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <CS_High+0x14>)
 80004d8:	f001 fc20 	bl	8001d1c <HAL_GPIO_WritePin>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	58020000 	.word	0x58020000

080004e4 <SPI_RW>:
static uint8_t SPI_RW(ICM42688P_HandleTypeDef *dev, uint8_t data) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
    uint8_t rx;
    HAL_SPI_TransmitReceive(dev->hspi, &data, &rx, 1, HAL_MAX_DELAY);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6818      	ldr	r0, [r3, #0]
 80004f4:	f107 020f 	add.w	r2, r7, #15
 80004f8:	1cf9      	adds	r1, r7, #3
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	f003 ff91 	bl	8004428 <HAL_SPI_TransmitReceive>
    return rx;
 8000506:	7bfb      	ldrb	r3, [r7, #15]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <WriteReg>:
static void WriteReg(ICM42688P_HandleTypeDef *dev, uint8_t reg, uint8_t data) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
 800051c:	4613      	mov	r3, r2
 800051e:	70bb      	strb	r3, [r7, #2]
    CS_Low();
 8000520:	f7ff ffc8 	bl	80004b4 <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_WRITE);
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	4619      	mov	r1, r3
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff ffdb 	bl	80004e4 <SPI_RW>
    SPI_RW(dev, data);
 800052e:	78bb      	ldrb	r3, [r7, #2]
 8000530:	4619      	mov	r1, r3
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff ffd6 	bl	80004e4 <SPI_RW>
    CS_High();
 8000538:	f7ff ffc8 	bl	80004cc <CS_High>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <ReadReg>:
static uint8_t ReadReg(ICM42688P_HandleTypeDef *dev, uint8_t reg) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
    CS_Low();
 8000550:	f7ff ffb0 	bl	80004b4 <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_READ);
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800055a:	b2db      	uxtb	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff ffc0 	bl	80004e4 <SPI_RW>
    uint8_t val = SPI_RW(dev, 0xFF);
 8000564:	21ff      	movs	r1, #255	@ 0xff
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff ffbc 	bl	80004e4 <SPI_RW>
 800056c:	4603      	mov	r3, r0
 800056e:	73fb      	strb	r3, [r7, #15]
    CS_High();
 8000570:	f7ff ffac 	bl	80004cc <CS_High>
    return val;
 8000574:	7bfb      	ldrb	r3, [r7, #15]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <ReadMulti>:
static void ReadMulti(ICM42688P_HandleTypeDef *dev, uint8_t reg, uint8_t *buf, uint16_t len) {
 800057e:	b590      	push	{r4, r7, lr}
 8000580:	b087      	sub	sp, #28
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	461a      	mov	r2, r3
 800058a:	460b      	mov	r3, r1
 800058c:	72fb      	strb	r3, [r7, #11]
 800058e:	4613      	mov	r3, r2
 8000590:	813b      	strh	r3, [r7, #8]
    CS_Low();
 8000592:	f7ff ff8f 	bl	80004b4 <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_READ);
 8000596:	7afb      	ldrb	r3, [r7, #11]
 8000598:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f7ff ff9f 	bl	80004e4 <SPI_RW>
    for (uint16_t i = 0; i < len; i++) buf[i] = SPI_RW(dev, 0xFF);
 80005a6:	2300      	movs	r3, #0
 80005a8:	82fb      	strh	r3, [r7, #22]
 80005aa:	e00b      	b.n	80005c4 <ReadMulti+0x46>
 80005ac:	8afb      	ldrh	r3, [r7, #22]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	18d4      	adds	r4, r2, r3
 80005b2:	21ff      	movs	r1, #255	@ 0xff
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff ff95 	bl	80004e4 <SPI_RW>
 80005ba:	4603      	mov	r3, r0
 80005bc:	7023      	strb	r3, [r4, #0]
 80005be:	8afb      	ldrh	r3, [r7, #22]
 80005c0:	3301      	adds	r3, #1
 80005c2:	82fb      	strh	r3, [r7, #22]
 80005c4:	8afa      	ldrh	r2, [r7, #22]
 80005c6:	893b      	ldrh	r3, [r7, #8]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3ef      	bcc.n	80005ac <ReadMulti+0x2e>
    CS_High();
 80005cc:	f7ff ff7e 	bl	80004cc <CS_High>
}
 80005d0:	bf00      	nop
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd90      	pop	{r4, r7, pc}

080005d8 <SelectBank>:

// ====== BANK SELECT ======
static void SelectBank(ICM42688P_HandleTypeDef *dev, uint8_t bank) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
    WriteReg(dev, ICM42688P_REG_BANK_SEL, (bank & 0x07) << 4);
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	011b      	lsls	r3, r3, #4
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	2176      	movs	r1, #118	@ 0x76
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff8b 	bl	8000510 <WriteReg>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <ICM42688P_DeviceReset>:

// ====== DEVICE RESET ======
void ICM42688P_DeviceReset(ICM42688P_HandleTypeDef *dev) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
    WriteReg(dev, ICM42688P_DEVICE_CONFIG, 0x01);
 800060a:	2201      	movs	r2, #1
 800060c:	2111      	movs	r1, #17
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ff7e 	bl	8000510 <WriteReg>
    HAL_Delay(50);
 8000614:	2032      	movs	r0, #50	@ 0x32
 8000616:	f001 f859 	bl	80016cc <HAL_Delay>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <ICM42688P_Init>:

// ====== INITIALIZATION ======
void ICM42688P_Init(ICM42688P_HandleTypeDef *dev, SPI_HandleTypeDef *hspi) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    dev->hspi = hspi;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	601a      	str	r2, [r3, #0]
    dev->accel_scale = 1.0f / 2048.0f;  // ±16g
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 800063a:	605a      	str	r2, [r3, #4]
    dev->gyro_scale  = 1.0f / 16.4f;    // ±2000 dps
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a23      	ldr	r2, [pc, #140]	@ (80006cc <ICM42688P_Init+0xa8>)
 8000640:	609a      	str	r2, [r3, #8]

    HAL_Delay(50);
 8000642:	2032      	movs	r0, #50	@ 0x32
 8000644:	f001 f842 	bl	80016cc <HAL_Delay>
    ICM42688P_DeviceReset(dev);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffda 	bl	8000602 <ICM42688P_DeviceReset>
    SelectBank(dev, 0);
 800064e:	2100      	movs	r1, #0
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ffc1 	bl	80005d8 <SelectBank>

    uint8_t whoami = ReadReg(dev, ICM42688P_WHO_AM_I);
 8000656:	2175      	movs	r1, #117	@ 0x75
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff73 	bl	8000544 <ReadReg>
 800065e:	4603      	mov	r3, r0
 8000660:	73fb      	strb	r3, [r7, #15]
    printf("WHO_AM_I=0x%02X\r\n", whoami);
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4619      	mov	r1, r3
 8000666:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <ICM42688P_Init+0xac>)
 8000668:	f006 f942 	bl	80068f0 <iprintf>
    if (whoami != ICM42688P_DEVICE_ID) {
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	2b47      	cmp	r3, #71	@ 0x47
 8000670:	d004      	beq.n	800067c <ICM42688P_Init+0x58>
        printf("ICM42688P not found!\r\n");
 8000672:	4818      	ldr	r0, [pc, #96]	@ (80006d4 <ICM42688P_Init+0xb0>)
 8000674:	f006 f9a4 	bl	80069c0 <puts>
        while (1);
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <ICM42688P_Init+0x54>
    }

    // Enable Accel & Gyro in Low-Noise Mode
    WriteReg(dev, ICM42688P_PWR_MGMT0, 0x0F);
 800067c:	220f      	movs	r2, #15
 800067e:	214e      	movs	r1, #78	@ 0x4e
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff45 	bl	8000510 <WriteReg>
    HAL_Delay(10);
 8000686:	200a      	movs	r0, #10
 8000688:	f001 f820 	bl	80016cc <HAL_Delay>
    uint8_t pwr = ReadReg(dev, ICM42688P_PWR_MGMT0);
 800068c:	214e      	movs	r1, #78	@ 0x4e
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff ff58 	bl	8000544 <ReadReg>
 8000694:	4603      	mov	r3, r0
 8000696:	73bb      	strb	r3, [r7, #14]
    printf("PWR_MGMT0=0x%02X\r\n", pwr);
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	4619      	mov	r1, r3
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <ICM42688P_Init+0xb4>)
 800069e:	f006 f927 	bl	80068f0 <iprintf>

    // Configure Gyro (±2000 dps, ODR 1kHz)
    WriteReg(dev, ICM42688P_GYRO_CONFIG0, 0x06);
 80006a2:	2206      	movs	r2, #6
 80006a4:	214f      	movs	r1, #79	@ 0x4f
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff32 	bl	8000510 <WriteReg>

    // Configure Accel (±16g, ODR 1kHz)
    WriteReg(dev, ICM42688P_ACCEL_CONFIG0, 0x06);
 80006ac:	2206      	movs	r2, #6
 80006ae:	2150      	movs	r1, #80	@ 0x50
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ff2d 	bl	8000510 <WriteReg>

    HAL_Delay(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f001 f808 	bl	80016cc <HAL_Delay>
    printf("ICM42688P Initialized Successfully\r\n");
 80006bc:	4807      	ldr	r0, [pc, #28]	@ (80006dc <ICM42688P_Init+0xb8>)
 80006be:	f006 f97f 	bl	80069c0 <puts>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	3d79c190 	.word	0x3d79c190
 80006d0:	080087d8 	.word	0x080087d8
 80006d4:	080087ec 	.word	0x080087ec
 80006d8:	08008804 	.word	0x08008804
 80006dc:	08008818 	.word	0x08008818

080006e0 <ICM42688P_ReadData>:

// ====== READ SENSOR DATA ======
void ICM42688P_ReadData(ICM42688P_HandleTypeDef *dev, ICM42688P_Data_t *data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
    uint8_t buf[14];
    ReadMulti(dev, ICM42688P_TEMP_DATA1, buf, 14);
 80006ea:	f107 020c 	add.w	r2, r7, #12
 80006ee:	230e      	movs	r3, #14
 80006f0:	211d      	movs	r1, #29
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff43 	bl	800057e <ReadMulti>

    int16_t raw_temp  = (int16_t)((buf[0] << 8) | buf[1]);
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	b21a      	sxth	r2, r3
 8000700:	7b7b      	ldrb	r3, [r7, #13]
 8000702:	b21b      	sxth	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t raw_ax    = (int16_t)((buf[2] << 8) | buf[3]);
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	b21b      	sxth	r3, r3
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21a      	sxth	r2, r3
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t raw_ay    = (int16_t)((buf[4] << 8) | buf[5]);
 8000718:	7c3b      	ldrb	r3, [r7, #16]
 800071a:	b21b      	sxth	r3, r3
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21a      	sxth	r2, r3
 8000720:	7c7b      	ldrb	r3, [r7, #17]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t raw_az    = (int16_t)((buf[6] << 8) | buf[7]);
 8000728:	7cbb      	ldrb	r3, [r7, #18]
 800072a:	b21b      	sxth	r3, r3
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	7cfb      	ldrb	r3, [r7, #19]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	843b      	strh	r3, [r7, #32]
    int16_t raw_gx    = (int16_t)((buf[8] << 8) | buf[9]);
 8000738:	7d3b      	ldrb	r3, [r7, #20]
 800073a:	b21b      	sxth	r3, r3
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	b21a      	sxth	r2, r3
 8000740:	7d7b      	ldrb	r3, [r7, #21]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	83fb      	strh	r3, [r7, #30]
    int16_t raw_gy    = (int16_t)((buf[10] << 8) | buf[11]);
 8000748:	7dbb      	ldrb	r3, [r7, #22]
 800074a:	b21b      	sxth	r3, r3
 800074c:	021b      	lsls	r3, r3, #8
 800074e:	b21a      	sxth	r2, r3
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	b21b      	sxth	r3, r3
 8000754:	4313      	orrs	r3, r2
 8000756:	83bb      	strh	r3, [r7, #28]
    int16_t raw_gz    = (int16_t)((buf[12] << 8) | buf[13]);
 8000758:	7e3b      	ldrb	r3, [r7, #24]
 800075a:	b21b      	sxth	r3, r3
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	b21a      	sxth	r2, r3
 8000760:	7e7b      	ldrb	r3, [r7, #25]
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	837b      	strh	r3, [r7, #26]

    data->temperature = ((float)raw_temp / 132.48f) + 25.0f;
 8000768:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000774:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800083c <ICM42688P_ReadData+0x15c>
 8000778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800077c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	edc3 7a06 	vstr	s15, [r3, #24]
    data->accel[0] = raw_ax * dev->accel_scale;
 800078a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	edd3 7a01 	vldr	s15, [r3, #4]
 800079c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	edc3 7a00 	vstr	s15, [r3]
    data->accel[1] = raw_ay * dev->accel_scale;
 80007a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80007b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	edc3 7a01 	vstr	s15, [r3, #4]
    data->accel[2] = raw_az * dev->accel_scale;
 80007c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80007c6:	ee07 3a90 	vmov	s15, r3
 80007ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80007d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	edc3 7a02 	vstr	s15, [r3, #8]
    data->gyro[0]  = raw_gx * dev->gyro_scale;
 80007de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007e2:	ee07 3a90 	vmov	s15, r3
 80007e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80007f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gyro[1]  = raw_gy * dev->gyro_scale;
 80007fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	edd3 7a02 	vldr	s15, [r3, #8]
 800080c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gyro[2]  = raw_gz * dev->gyro_scale;
 8000816:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	edd3 7a02 	vldr	s15, [r3, #8]
 8000828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	@ 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	43047ae1 	.word	0x43047ae1

08000840 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	2b02      	cmp	r3, #2
 8000852:	d101      	bne.n	8000858 <LL_USART_IsActiveFlag_FE+0x18>
 8000854:	2301      	movs	r3, #1
 8000856:	e000      	b.n	800085a <LL_USART_IsActiveFlag_FE+0x1a>
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	2b08      	cmp	r3, #8
 8000878:	d101      	bne.n	800087e <LL_USART_IsActiveFlag_ORE+0x18>
 800087a:	2301      	movs	r3, #1
 800087c:	e000      	b.n	8000880 <LL_USART_IsActiveFlag_ORE+0x1a>
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800089c:	2b40      	cmp	r3, #64	@ 0x40
 800089e:	d101      	bne.n	80008a4 <LL_USART_IsActiveFlag_TC+0x18>
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <LL_USART_IsActiveFlag_TC+0x1a>
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c2:	2b80      	cmp	r3, #128	@ 0x80
 80008c4:	d101      	bne.n	80008ca <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80008c6:	2301      	movs	r3, #1
 80008c8:	e000      	b.n	80008cc <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	621a      	str	r2, [r3, #32]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2208      	movs	r2, #8
 80008fe:	621a      	str	r2, [r3, #32]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	@ 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	e853 3f00 	ldrex	r3, [r3]
 800091e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	f043 0320 	orr.w	r3, r3, #32
 8000926:	61fb      	str	r3, [r7, #28]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	61ba      	str	r2, [r7, #24]
 800092e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000930:	6979      	ldr	r1, [r7, #20]
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	e841 2300 	strex	r3, r2, [r1]
 8000938:	613b      	str	r3, [r7, #16]
   return(result);
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1e9      	bne.n	8000914 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3724      	adds	r7, #36	@ 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800095a:	78fa      	ldrb	r2, [r7, #3]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_write>:
/* USER CODE BEGIN PTD */

/* **** USART6 printf function code ***** */

int _write(int file, char* p, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e025      	b.n	80009ca <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 800097e:	481b      	ldr	r0, [pc, #108]	@ (80009ec <_write+0x80>)
 8000980:	f7ff ff71 	bl	8000866 <LL_USART_IsActiveFlag_ORE>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d105      	bne.n	8000996 <_write+0x2a>
 800098a:	4818      	ldr	r0, [pc, #96]	@ (80009ec <_write+0x80>)
 800098c:	f7ff ff58 	bl	8000840 <LL_USART_IsActiveFlag_FE>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d008      	beq.n	80009a8 <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 8000996:	4815      	ldr	r0, [pc, #84]	@ (80009ec <_write+0x80>)
 8000998:	f7ff ffab 	bl	80008f2 <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 800099c:	4813      	ldr	r0, [pc, #76]	@ (80009ec <_write+0x80>)
 800099e:	f7ff ff9b 	bl	80008d8 <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009a6:	e01c      	b.n	80009e2 <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 80009a8:	4810      	ldr	r0, [pc, #64]	@ (80009ec <_write+0x80>)
 80009aa:	f7ff ff82 	bl	80008b2 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0e4      	beq.n	800097e <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	480b      	ldr	r0, [pc, #44]	@ (80009ec <_write+0x80>)
 80009c0:	f7ff ffc5 	bl	800094e <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbea      	blt.n	80009a8 <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 80009d2:	bf00      	nop
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <_write+0x80>)
 80009d6:	f7ff ff59 	bl	800088c <LL_USART_IsActiveFlag_TC>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f9      	beq.n	80009d4 <_write+0x68>
    return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40011400 	.word	0x40011400

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	@ 0x30
 80009f4:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009f6:	f000 f8d7 	bl	8000ba8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fa:	f000 fdd5 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fe:	f000 f865 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a02:	f7ff fcdd 	bl	80003c0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000a06:	f000 f901 	bl	8000c0c <MX_SPI3_Init>
  MX_USART6_UART_Init();
 8000a0a:	f000 fd03 	bl	8001414 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(USART6);
 8000a0e:	4828      	ldr	r0, [pc, #160]	@ (8000ab0 <main+0xc0>)
 8000a10:	f7ff ff7c 	bl	800090c <LL_USART_EnableIT_RXNE_RXFNE>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a1a:	4826      	ldr	r0, [pc, #152]	@ (8000ab4 <main+0xc4>)
 8000a1c:	f001 f97e 	bl	8001d1c <HAL_GPIO_WritePin>

  printf("\r\n=== ICM42688P SPI Driver Test ===\r\n");
 8000a20:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <main+0xc8>)
 8000a22:	f005 ffcd 	bl	80069c0 <puts>

//  HAL_Delay(100);

  // Init sensor
  ICM42688P_Init(&hicm, &hspi3);
 8000a26:	4925      	ldr	r1, [pc, #148]	@ (8000abc <main+0xcc>)
 8000a28:	4825      	ldr	r0, [pc, #148]	@ (8000ac0 <main+0xd0>)
 8000a2a:	f7ff fdfb 	bl	8000624 <ICM42688P_Init>



  HAL_Delay(100);
 8000a2e:	2064      	movs	r0, #100	@ 0x64
 8000a30:	f000 fe4c 	bl	80016cc <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ICM42688P_ReadData(&hicm, &sensor);
 8000a34:	4923      	ldr	r1, [pc, #140]	@ (8000ac4 <main+0xd4>)
 8000a36:	4822      	ldr	r0, [pc, #136]	@ (8000ac0 <main+0xd0>)
 8000a38:	f7ff fe52 	bl	80006e0 <ICM42688P_ReadData>

	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
			  sensor.accel[0], sensor.accel[1], sensor.accel[2],
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <main+0xd4>)
 8000a3e:	edd3 7a00 	vldr	s15, [r3]
	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
 8000a42:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
			  sensor.accel[0], sensor.accel[1], sensor.accel[2],
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <main+0xd4>)
 8000a48:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
 8000a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  sensor.accel[0], sensor.accel[1], sensor.accel[2],
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <main+0xd4>)
 8000a52:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
 8000a56:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  sensor.gyro[0], sensor.gyro[1], sensor.gyro[2],
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <main+0xd4>)
 8000a5c:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
 8000a60:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  sensor.gyro[0], sensor.gyro[1], sensor.gyro[2],
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <main+0xd4>)
 8000a66:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
 8000a6a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  sensor.gyro[0], sensor.gyro[1], sensor.gyro[2],
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <main+0xd4>)
 8000a70:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
 8000a74:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			  sensor.temperature);
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <main+0xd4>)
 8000a7a:	edd3 2a06 	vldr	s5, [r3, #24]
	  printf("ACCEL: X = %.2f, Y = %.2f, Z =  %.2f | GYRO: X = %.2f, Y = %.2f, Z =  %.2f | TEMP: %.2f°C\r\n",
 8000a7e:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000a82:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000a86:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000a8a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000a8e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000a92:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a96:	ed8d 7b00 	vstr	d7, [sp]
 8000a9a:	ec53 2b11 	vmov	r2, r3, d1
 8000a9e:	480a      	ldr	r0, [pc, #40]	@ (8000ac8 <main+0xd8>)
 8000aa0:	f005 ff26 	bl	80068f0 <iprintf>

	  HAL_Delay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 fe11 	bl	80016cc <HAL_Delay>
	  ICM42688P_ReadData(&hicm, &sensor);
 8000aaa:	bf00      	nop
 8000aac:	e7c2      	b.n	8000a34 <main+0x44>
 8000aae:	bf00      	nop
 8000ab0:	40011400 	.word	0x40011400
 8000ab4:	58020000 	.word	0x58020000
 8000ab8:	0800883c 	.word	0x0800883c
 8000abc:	2400021c 	.word	0x2400021c
 8000ac0:	240001f4 	.word	0x240001f4
 8000ac4:	24000200 	.word	0x24000200
 8000ac8:	08008864 	.word	0x08008864

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09c      	sub	sp, #112	@ 0x70
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	224c      	movs	r2, #76	@ 0x4c
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f006 f850 	bl	8006b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f006 f84a 	bl	8006b80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f001 f92f 	bl	8001d50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0e:	bf00      	nop
 8000b10:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b1c:	d1f8      	bne.n	8000b10 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b34:	232c      	movs	r3, #44	@ 0x2c
 8000b36:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b44:	230c      	movs	r3, #12
 8000b46:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 f935 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b60:	f000 f84e 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	233f      	movs	r3, #63	@ 0x3f
 8000b66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b70:	2308      	movs	r3, #8
 8000b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b74:	2340      	movs	r3, #64	@ 0x40
 8000b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b78:	2340      	movs	r3, #64	@ 0x40
 8000b7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b82:	2340      	movs	r3, #64	@ 0x40
 8000b84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2103      	movs	r1, #3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fcf4 	bl	8002578 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b96:	f000 f833 	bl	8000c00 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3770      	adds	r7, #112	@ 0x70
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58024800 	.word	0x58024800

08000ba8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bba:	f000 fe8f 	bl	80018dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bca:	231f      	movs	r3, #31
 8000bcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bce:	2387      	movs	r3, #135	@ 0x87
 8000bd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fead 	bl	800194c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f000 fe8a 	bl	800190c <HAL_MPU_Enable>

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c12:	4a29      	ldr	r2, [pc, #164]	@ (8000cb8 <MX_SPI3_Init+0xac>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b27      	ldr	r3, [pc, #156]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c18:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c26:	2207      	movs	r2, #7
 8000c28:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c38:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c3c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c40:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c44:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000c48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c68:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_SPI3_Init+0xa8>)
 8000ca2:	f003 fa9d 	bl	80041e0 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 8000cac:	f7ff ffa8 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2400021c 	.word	0x2400021c
 8000cb8:	40003c00 	.word	0x40003c00

08000cbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0b8      	sub	sp, #224	@ 0xe0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	22b8      	movs	r2, #184	@ 0xb8
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 ff4f 	bl	8006b80 <memset>
  if(spiHandle->Instance==SPI3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a26      	ldr	r2, [pc, #152]	@ (8000d80 <HAL_SPI_MspInit+0xc4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d145      	bne.n	8000d78 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000cec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 ff69 	bl	8002bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000d0c:	f7ff ff78 	bl	8000c00 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <HAL_SPI_MspInit+0xc8>)
 8000d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d16:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <HAL_SPI_MspInit+0xc8>)
 8000d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_SPI_MspInit+0xc8>)
 8000d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_SPI_MspInit+0xc8>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <HAL_SPI_MspInit+0xc8>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_SPI_MspInit+0xc8>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d4c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d66:	2306      	movs	r3, #6
 8000d68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_SPI_MspInit+0xcc>)
 8000d74:	f000 fe2a 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d78:	bf00      	nop
 8000d7a:	37e0      	adds	r7, #224	@ 0xe0
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40003c00 	.word	0x40003c00
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020800 	.word	0x58020800

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d98:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_MspInit+0x30>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_MspInit+0x30>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	d101      	bne.n	8000dd8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_USART_ReceiveData8>:
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df2:	b2db      	uxtb	r3, r3
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 fc19 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <USART6_IRQHandler+0x28>)
 8000e66:	f7ff ffab 	bl	8000dc0 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d009      	beq.n	8000e84 <USART6_IRQHandler+0x24>
	{
		//			LL_USART_ClearFlag_RXNE(USART6);
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <USART6_IRQHandler+0x28>)
 8000e72:	f7ff ffb8 	bl	8000de6 <LL_USART_ReceiveData8>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <USART6_IRQHandler+0x2c>)
 8000e7c:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8000e7e:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <USART6_IRQHandler+0x30>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40011400 	.word	0x40011400
 8000e8c:	240002a5 	.word	0x240002a5
 8000e90:	240002a4 	.word	0x240002a4

08000e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_kill>:

int _kill(int pid, int sig)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eae:	f005 feb9 	bl	8006c24 <__errno>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2216      	movs	r2, #22
 8000eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_exit>:

void _exit (int status)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ffe7 	bl	8000ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ed6:	bf00      	nop
 8000ed8:	e7fd      	b.n	8000ed6 <_exit+0x12>

08000eda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e00a      	b.n	8000f02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eec:	f3af 8000 	nop.w
 8000ef0:	4601      	mov	r1, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60ba      	str	r2, [r7, #8]
 8000ef8:	b2ca      	uxtb	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbf0      	blt.n	8000eec <_read+0x12>
  }

  return len;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_isatty>:

int _isatty(int file)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f54:	2301      	movs	r3, #1
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f005 fe3a 	bl	8006c24 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	24050000 	.word	0x24050000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	240002a8 	.word	0x240002a8
 8000fe4:	24000400 	.word	0x24000400

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fec:	4b3e      	ldr	r3, [pc, #248]	@ (80010e8 <SystemInit+0x100>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff2:	4a3d      	ldr	r2, [pc, #244]	@ (80010e8 <SystemInit+0x100>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <SystemInit+0x104>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	2b06      	cmp	r3, #6
 8001006:	d807      	bhi.n	8001018 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001008:	4b38      	ldr	r3, [pc, #224]	@ (80010ec <SystemInit+0x104>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 030f 	bic.w	r3, r3, #15
 8001010:	4a36      	ldr	r2, [pc, #216]	@ (80010ec <SystemInit+0x104>)
 8001012:	f043 0307 	orr.w	r3, r3, #7
 8001016:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <SystemInit+0x108>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a34      	ldr	r2, [pc, #208]	@ (80010f0 <SystemInit+0x108>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001024:	4b32      	ldr	r3, [pc, #200]	@ (80010f0 <SystemInit+0x108>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <SystemInit+0x108>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4930      	ldr	r1, [pc, #192]	@ (80010f0 <SystemInit+0x108>)
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <SystemInit+0x10c>)
 8001032:	4013      	ands	r3, r2
 8001034:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001036:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <SystemInit+0x104>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001042:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <SystemInit+0x104>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 030f 	bic.w	r3, r3, #15
 800104a:	4a28      	ldr	r2, [pc, #160]	@ (80010ec <SystemInit+0x104>)
 800104c:	f043 0307 	orr.w	r3, r3, #7
 8001050:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001052:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <SystemInit+0x108>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001058:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <SystemInit+0x108>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800105e:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <SystemInit+0x108>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <SystemInit+0x108>)
 8001066:	4a24      	ldr	r2, [pc, #144]	@ (80010f8 <SystemInit+0x110>)
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800106a:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <SystemInit+0x108>)
 800106c:	4a23      	ldr	r2, [pc, #140]	@ (80010fc <SystemInit+0x114>)
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <SystemInit+0x108>)
 8001072:	4a23      	ldr	r2, [pc, #140]	@ (8001100 <SystemInit+0x118>)
 8001074:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <SystemInit+0x108>)
 8001078:	2200      	movs	r2, #0
 800107a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800107c:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <SystemInit+0x108>)
 800107e:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <SystemInit+0x118>)
 8001080:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <SystemInit+0x108>)
 8001084:	2200      	movs	r2, #0
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <SystemInit+0x108>)
 800108a:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <SystemInit+0x118>)
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <SystemInit+0x108>)
 8001090:	2200      	movs	r2, #0
 8001092:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <SystemInit+0x108>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <SystemInit+0x108>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800109e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <SystemInit+0x108>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <SystemInit+0x108>)
 80010a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d113      	bne.n	80010dc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <SystemInit+0x108>)
 80010b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ba:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <SystemInit+0x108>)
 80010bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <SystemInit+0x11c>)
 80010c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <SystemInit+0x108>)
 80010ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010d2:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <SystemInit+0x108>)
 80010d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	52002000 	.word	0x52002000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010f8:	02020200 	.word	0x02020200
 80010fc:	01ff0000 	.word	0x01ff0000
 8001100:	01010280 	.word	0x01010280
 8001104:	52004000 	.word	0x52004000

08001108 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <ExitRun0Mode+0x2c>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <ExitRun0Mode+0x2c>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001118:	bf00      	nop
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <ExitRun0Mode+0x2c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f9      	beq.n	800111a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	58024800 	.word	0x58024800

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_USART_Enable>:
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_USART_DisableFIFO>:
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_USART_SetTXFIFOThreshold>:
{
 800128a:	b480      	push	{r7}
 800128c:	b089      	sub	sp, #36	@ 0x24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3308      	adds	r3, #8
 8001298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	e853 3f00 	ldrex	r3, [r3]
 80012a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	075b      	lsls	r3, r3, #29
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3308      	adds	r3, #8
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	61ba      	str	r2, [r7, #24]
 80012b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	e841 2300 	strex	r3, r2, [r1]
 80012c2:	613b      	str	r3, [r7, #16]
   return(result);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1e4      	bne.n	8001294 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	@ 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_USART_SetRXFIFOThreshold>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3308      	adds	r3, #8
 80012e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	e853 3f00 	ldrex	r3, [r3]
 80012ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	065b      	lsls	r3, r3, #25
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3308      	adds	r3, #8
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	61ba      	str	r2, [r7, #24]
 8001306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001308:	6979      	ldr	r1, [r7, #20]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	e841 2300 	strex	r3, r2, [r1]
 8001310:	613b      	str	r3, [r7, #16]
   return(result);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e4      	bne.n	80012e2 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_USART_ConfigAsyncMode>:
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	609a      	str	r2, [r3, #8]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <LL_USART_IsActiveFlag_TEACK>:
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001362:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001366:	d101      	bne.n	800136c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <LL_USART_IsActiveFlag_REACK>:
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800138e:	d101      	bne.n	8001394 <LL_USART_IsActiveFlag_REACK+0x1a>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <LL_USART_IsActiveFlag_REACK+0x1c>
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80013ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013b2:	4909      	ldr	r1, [pc, #36]	@ (80013d8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80013be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	58024400 	.word	0x58024400

080013dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <LL_APB2_GRP1_EnableClock+0x34>)
 80013e6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80013ea:	4909      	ldr	r1, [pc, #36]	@ (8001410 <LL_APB2_GRP1_EnableClock+0x34>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <LL_APB2_GRP1_EnableClock+0x34>)
 80013f6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001400:	68fb      	ldr	r3, [r7, #12]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	58024400 	.word	0x58024400

08001414 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0bc      	sub	sp, #240	@ 0xf0
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800141a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800141e:	2220      	movs	r2, #32
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fbac 	bl	8006b80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	22b8      	movs	r2, #184	@ 0xb8
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f005 fb9d 	bl	8006b80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001446:	f04f 0201 	mov.w	r2, #1
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001452:	2300      	movs	r3, #0
 8001454:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fbbd 	bl	8002bd8 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8001464:	f7ff fbcc 	bl	8000c00 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8001468:	2020      	movs	r0, #32
 800146a:	f7ff ffb7 	bl	80013dc <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 800146e:	2004      	movs	r0, #4
 8001470:	f7ff ff98 	bl	80013a4 <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001474:	23c0      	movs	r3, #192	@ 0xc0
 8001476:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001492:	2307      	movs	r3, #7
 8001494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800149c:	4619      	mov	r1, r3
 800149e:	482a      	ldr	r0, [pc, #168]	@ (8001548 <MX_USART6_UART_Init+0x134>)
 80014a0:	f003 fcbf 	bl	8004e22 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014a4:	f7ff fe48 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fe98 	bl	80011e4 <NVIC_EncodePriority>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4619      	mov	r1, r3
 80014b8:	2047      	movs	r0, #71	@ 0x47
 80014ba:	f7ff fe69 	bl	8001190 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80014be:	2047      	movs	r0, #71	@ 0x47
 80014c0:	f7ff fe48 	bl	8001154 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 80014ca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80014ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014e4:	230c      	movs	r3, #12
 80014e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 80014f6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4813      	ldr	r0, [pc, #76]	@ (800154c <MX_USART6_UART_Init+0x138>)
 80014fe:	f004 fc3f 	bl	8005d80 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8001502:	2100      	movs	r1, #0
 8001504:	4811      	ldr	r0, [pc, #68]	@ (800154c <MX_USART6_UART_Init+0x138>)
 8001506:	f7ff fec0 	bl	800128a <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 800150a:	2100      	movs	r1, #0
 800150c:	480f      	ldr	r0, [pc, #60]	@ (800154c <MX_USART6_UART_Init+0x138>)
 800150e:	f7ff fee3 	bl	80012d8 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8001512:	480e      	ldr	r0, [pc, #56]	@ (800154c <MX_USART6_UART_Init+0x138>)
 8001514:	f7ff fea9 	bl	800126a <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <MX_USART6_UART_Init+0x138>)
 800151a:	f7ff ff04 	bl	8001326 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 800151e:	480b      	ldr	r0, [pc, #44]	@ (800154c <MX_USART6_UART_Init+0x138>)
 8001520:	f7ff fe93 	bl	800124a <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8001524:	bf00      	nop
 8001526:	4809      	ldr	r0, [pc, #36]	@ (800154c <MX_USART6_UART_Init+0x138>)
 8001528:	f7ff ff13 	bl	8001352 <LL_USART_IsActiveFlag_TEACK>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f9      	beq.n	8001526 <MX_USART6_UART_Init+0x112>
 8001532:	4806      	ldr	r0, [pc, #24]	@ (800154c <MX_USART6_UART_Init+0x138>)
 8001534:	f7ff ff21 	bl	800137a <LL_USART_IsActiveFlag_REACK>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f3      	beq.n	8001526 <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	37f0      	adds	r7, #240	@ 0xf0
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	58020800 	.word	0x58020800
 800154c:	40011400 	.word	0x40011400

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800158c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001554:	f7ff fdd8 	bl	8001108 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001558:	f7ff fd46 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f005 fb55 	bl	8006c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fa33 	bl	80009f0 <main>
  bx  lr
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001590:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001594:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001598:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 800159c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80015a0:	240003fc 	.word	0x240003fc

080015a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC3_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ae:	2003      	movs	r0, #3
 80015b0:	f000 f962 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015b4:	f001 f996 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <HAL_Init+0x68>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	4913      	ldr	r1, [pc, #76]	@ (8001614 <HAL_Init+0x6c>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <HAL_Init+0x68>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	4a0e      	ldr	r2, [pc, #56]	@ (8001614 <HAL_Init+0x6c>)
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
 80015e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <HAL_Init+0x70>)
 80015ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_Init+0x74>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f814 	bl	8001620 <HAL_InitTick>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e002      	b.n	8001608 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001602:	f7ff fbc3 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	58024400 	.word	0x58024400
 8001614:	080088c4 	.word	0x080088c4
 8001618:	24000004 	.word	0x24000004
 800161c:	24000000 	.word	0x24000000

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_InitTick+0x60>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e021      	b.n	8001678 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_InitTick+0x64>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_InitTick+0x60>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f939 	bl	80018c2 <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001668:	f000 f911 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	@ (8001688 <HAL_InitTick+0x68>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2400000c 	.word	0x2400000c
 8001684:	24000000 	.word	0x24000000
 8001688:	24000008 	.word	0x24000008

0800168c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_IncTick+0x20>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_IncTick+0x24>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <HAL_IncTick+0x24>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2400000c 	.word	0x2400000c
 80016b0:	240002ac 	.word	0x240002ac

080016b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <HAL_GetTick+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	240002ac 	.word	0x240002ac

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff ffee 	bl	80016b4 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffde 	bl	80016b4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2400000c 	.word	0x2400000c

08001714 <__NVIC_SetPriorityGrouping>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <__NVIC_SetPriorityGrouping+0x40>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	4313      	orrs	r3, r2
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <__NVIC_SetPriorityGrouping+0x40>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	05fa0000 	.word	0x05fa0000

0800175c <__NVIC_GetPriorityGrouping>:
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_SetPriority>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff47 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff5e 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff90 	bl	80017cc <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5f 	bl	8001778 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffb2 	bl	8001834 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80018e0:	f3bf 8f5f 	dmb	sy
}
 80018e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <HAL_MPU_Disable+0x28>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <HAL_MPU_Disable+0x28>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018f2:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_MPU_Disable+0x2c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00
 8001908:	e000ed90 	.word	0xe000ed90

0800190c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001914:	4a0b      	ldr	r2, [pc, #44]	@ (8001944 <HAL_MPU_Enable+0x38>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <HAL_MPU_Enable+0x3c>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <HAL_MPU_Enable+0x3c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001928:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800192a:	f3bf 8f4f 	dsb	sy
}
 800192e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001930:	f3bf 8f6f 	isb	sy
}
 8001934:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed90 	.word	0xe000ed90
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	785a      	ldrb	r2, [r3, #1]
 8001958:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_MPU_ConfigRegion+0x7c>)
 800195a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <HAL_MPU_ConfigRegion+0x7c>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	4a19      	ldr	r2, [pc, #100]	@ (80019c8 <HAL_MPU_ConfigRegion+0x7c>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001968:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <HAL_MPU_ConfigRegion+0x7c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7adb      	ldrb	r3, [r3, #11]
 800197a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800197c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7a9b      	ldrb	r3, [r3, #10]
 8001982:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001984:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7b5b      	ldrb	r3, [r3, #13]
 800198a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800198c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7b9b      	ldrb	r3, [r3, #14]
 8001992:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7bdb      	ldrb	r3, [r3, #15]
 800199a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800199c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7a5b      	ldrb	r3, [r3, #9]
 80019a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7a1b      	ldrb	r3, [r3, #8]
 80019aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019b8:	6113      	str	r3, [r2, #16]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed90 	.word	0xe000ed90

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019da:	4b86      	ldr	r3, [pc, #536]	@ (8001bf4 <HAL_GPIO_Init+0x228>)
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019de:	e18c      	b.n	8001cfa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 817e 	beq.w	8001cf4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d005      	beq.n	8001a10 <HAL_GPIO_Init+0x44>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d130      	bne.n	8001a72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a46:	2201      	movs	r2, #1
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 0201 	and.w	r2, r3, #1
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d017      	beq.n	8001aae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d123      	bne.n	8001b02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	69b9      	ldr	r1, [r7, #24]
 8001afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0203 	and.w	r2, r3, #3
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80d8 	beq.w	8001cf4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf8 <HAL_GPIO_Init+0x22c>)
 8001b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <HAL_GPIO_Init+0x22c>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b54:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <HAL_GPIO_Init+0x22c>)
 8001b56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a26      	ldr	r2, [pc, #152]	@ (8001bfc <HAL_GPIO_Init+0x230>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <HAL_GPIO_Init+0x234>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d04a      	beq.n	8001c24 <HAL_GPIO_Init+0x258>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a1c      	ldr	r2, [pc, #112]	@ (8001c04 <HAL_GPIO_Init+0x238>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d02b      	beq.n	8001bee <HAL_GPIO_Init+0x222>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <HAL_GPIO_Init+0x23c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x21e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c0c <HAL_GPIO_Init+0x240>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_GPIO_Init+0x244>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x216>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a18      	ldr	r2, [pc, #96]	@ (8001c14 <HAL_GPIO_Init+0x248>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x212>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <HAL_GPIO_Init+0x24c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a16      	ldr	r2, [pc, #88]	@ (8001c1c <HAL_GPIO_Init+0x250>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x20a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a15      	ldr	r2, [pc, #84]	@ (8001c20 <HAL_GPIO_Init+0x254>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x206>
 8001bce:	2309      	movs	r3, #9
 8001bd0:	e029      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	e027      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e025      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e023      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e021      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e01f      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e01d      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e01b      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e019      	b.n	8001c26 <HAL_GPIO_Init+0x25a>
 8001bf2:	bf00      	nop
 8001bf4:	58000080 	.word	0x58000080
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	58000400 	.word	0x58000400
 8001c00:	58020000 	.word	0x58020000
 8001c04:	58020400 	.word	0x58020400
 8001c08:	58020800 	.word	0x58020800
 8001c0c:	58020c00 	.word	0x58020c00
 8001c10:	58021000 	.word	0x58021000
 8001c14:	58021400 	.word	0x58021400
 8001c18:	58021800 	.word	0x58021800
 8001c1c:	58021c00 	.word	0x58021c00
 8001c20:	58022400 	.word	0x58022400
 8001c24:	2300      	movs	r3, #0
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c36:	4938      	ldr	r1, [pc, #224]	@ (8001d18 <HAL_GPIO_Init+0x34c>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f ae6b 	bne.w	80019e0 <HAL_GPIO_Init+0x14>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	@ 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	58000400 	.word	0x58000400

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d38:	e003      	b.n	8001d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d00a      	beq.n	8001d7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d64:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e01f      	b.n	8001db6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e01d      	b.n	8001db6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	490f      	ldr	r1, [pc, #60]	@ (8001dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d8a:	f7ff fc93 	bl	80016b4 <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d90:	e009      	b.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d92:	f7ff fc8f 	bl	80016b4 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001da0:	d901      	bls.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e007      	b.n	8001db6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db2:	d1ee      	bne.n	8001d92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	58024800 	.word	0x58024800

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e3c8      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8087 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de4:	4b88      	ldr	r3, [pc, #544]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dee:	4b86      	ldr	r3, [pc, #536]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d007      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46>
 8001dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfc:	2b18      	cmp	r3, #24
 8001dfe:	d110      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
 8001e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d10b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d06c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x12c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d168      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e3a2      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x76>
 8001e2c:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a75      	ldr	r2, [pc, #468]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e02e      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b71      	ldr	r3, [pc, #452]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a70      	ldr	r2, [pc, #448]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6d      	ldr	r2, [pc, #436]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e01d      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0xbc>
 8001e66:	4b68      	ldr	r3, [pc, #416]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a67      	ldr	r2, [pc, #412]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a64      	ldr	r2, [pc, #400]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e80:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a60      	ldr	r2, [pc, #384]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5d      	ldr	r2, [pc, #372]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fc08 	bl	80016b4 <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fc04 	bl	80016b4 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	@ 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e356      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eba:	4b53      	ldr	r3, [pc, #332]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xe4>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fbf4 	bl	80016b4 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fbf0 	bl	80016b4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e342      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee2:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x10c>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 808c 	beq.w	8002018 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f00:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_RCC_OscConfig+0x162>
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	2b18      	cmp	r3, #24
 8001f1a:	d137      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c8>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d132      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f26:	4b38      	ldr	r3, [pc, #224]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x17a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e314      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f3e:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0219 	bic.w	r2, r3, #25
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	492f      	ldr	r1, [pc, #188]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff fbb0 	bl	80016b4 <HAL_GetTick>
 8001f54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f58:	f7ff fbac 	bl	80016b4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e2fe      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f6a:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	061b      	lsls	r3, r3, #24
 8001f84:	4920      	ldr	r1, [pc, #128]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8a:	e045      	b.n	8002018 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d026      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f94:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 0219 	bic.w	r2, r3, #25
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4919      	ldr	r1, [pc, #100]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fb85 	bl	80016b4 <HAL_GetTick>
 8001faa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff fb81 	bl	80016b4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e2d3      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	490b      	ldr	r1, [pc, #44]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e01a      	b.n	8002018 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <HAL_RCC_OscConfig+0x244>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff fb61 	bl	80016b4 <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fb5d 	bl	80016b4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d903      	bls.n	800200c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e2af      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
 8002008:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800200c:	4b96      	ldr	r3, [pc, #600]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ee      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d06a      	beq.n	80020fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002024:	4b90      	ldr	r3, [pc, #576]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800202c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800202e:	4b8e      	ldr	r3, [pc, #568]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002032:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d007      	beq.n	800204a <HAL_RCC_OscConfig+0x286>
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b18      	cmp	r3, #24
 800203e:	d11b      	bne.n	8002078 <HAL_RCC_OscConfig+0x2b4>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800204a:	4b87      	ldr	r3, [pc, #540]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x29e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	2b80      	cmp	r3, #128	@ 0x80
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e282      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002062:	4b81      	ldr	r3, [pc, #516]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	061b      	lsls	r3, r3, #24
 8002070:	497d      	ldr	r1, [pc, #500]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002076:	e040      	b.n	80020fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d023      	beq.n	80020c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002080:	4b79      	ldr	r3, [pc, #484]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a78      	ldr	r2, [pc, #480]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800208a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff fb12 	bl	80016b4 <HAL_GetTick>
 8002090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002094:	f7ff fb0e 	bl	80016b4 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e260      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	061b      	lsls	r3, r3, #24
 80020c0:	4969      	ldr	r1, [pc, #420]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
 80020c6:	e018      	b.n	80020fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020c8:	4b67      	ldr	r3, [pc, #412]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a66      	ldr	r2, [pc, #408]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80020ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff faee 	bl	80016b4 <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020dc:	f7ff faea 	bl	80016b4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e23c      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d036      	beq.n	8002174 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d019      	beq.n	8002142 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b56      	ldr	r3, [pc, #344]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002112:	4a55      	ldr	r2, [pc, #340]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7ff facb 	bl	80016b4 <HAL_GetTick>
 800211e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002122:	f7ff fac7 	bl	80016b4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e219      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002134:	4b4c      	ldr	r3, [pc, #304]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x35e>
 8002140:	e018      	b.n	8002174 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b49      	ldr	r3, [pc, #292]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002146:	4a48      	ldr	r2, [pc, #288]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff fab1 	bl	80016b4 <HAL_GetTick>
 8002152:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002156:	f7ff faad 	bl	80016b4 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1ff      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002168:	4b3f      	ldr	r3, [pc, #252]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800216a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d036      	beq.n	80021ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d019      	beq.n	80021bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002188:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a36      	ldr	r2, [pc, #216]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800218e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002192:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002194:	f7ff fa8e 	bl	80016b4 <HAL_GetTick>
 8002198:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219c:	f7ff fa8a 	bl	80016b4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1dc      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x3d8>
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a29      	ldr	r2, [pc, #164]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80021c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021c8:	f7ff fa74 	bl	80016b4 <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d0:	f7ff fa70 	bl	80016b4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1c2      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8086 	beq.w	8002308 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x4a8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <HAL_RCC_OscConfig+0x4a8>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002206:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002208:	f7ff fa54 	bl	80016b4 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7ff fa50 	bl	80016b4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1a2      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_RCC_OscConfig+0x4a8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0x480>
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	4a0b      	ldr	r2, [pc, #44]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	@ 0x70
 8002242:	e032      	b.n	80022aa <HAL_RCC_OscConfig+0x4e6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d111      	bne.n	8002270 <HAL_RCC_OscConfig+0x4ac>
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	@ 0x70
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225c:	4a02      	ldr	r2, [pc, #8]	@ (8002268 <HAL_RCC_OscConfig+0x4a4>)
 800225e:	f023 0304 	bic.w	r3, r3, #4
 8002262:	6713      	str	r3, [r2, #112]	@ 0x70
 8002264:	e021      	b.n	80022aa <HAL_RCC_OscConfig+0x4e6>
 8002266:	bf00      	nop
 8002268:	58024400 	.word	0x58024400
 800226c:	58024800 	.word	0x58024800
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x4ce>
 8002278:	4b83      	ldr	r3, [pc, #524]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	4a82      	ldr	r2, [pc, #520]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6713      	str	r3, [r2, #112]	@ 0x70
 8002284:	4b80      	ldr	r3, [pc, #512]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002288:	4a7f      	ldr	r2, [pc, #508]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002290:	e00b      	b.n	80022aa <HAL_RCC_OscConfig+0x4e6>
 8002292:	4b7d      	ldr	r3, [pc, #500]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002296:	4a7c      	ldr	r2, [pc, #496]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6713      	str	r3, [r2, #112]	@ 0x70
 800229e:	4b7a      	ldr	r3, [pc, #488]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a2:	4a79      	ldr	r2, [pc, #484]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7ff f9ff 	bl	80016b4 <HAL_GetTick>
 80022b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7ff f9fb 	bl	80016b4 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e14b      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCC_OscConfig+0x4f6>
 80022dc:	e014      	b.n	8002308 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff f9e9 	bl	80016b4 <HAL_GetTick>
 80022e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff f9e5 	bl	80016b4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e135      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022fc:	4b62      	ldr	r3, [pc, #392]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 812a 	beq.w	8002566 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002312:	4b5d      	ldr	r3, [pc, #372]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800231a:	2b18      	cmp	r3, #24
 800231c:	f000 80ba 	beq.w	8002494 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	2b02      	cmp	r3, #2
 8002326:	f040 8095 	bne.w	8002454 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b57      	ldr	r3, [pc, #348]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a56      	ldr	r2, [pc, #344]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff f9bd 	bl	80016b4 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7ff f9b9 	bl	80016b4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e10b      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002350:	4b4d      	ldr	r3, [pc, #308]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235c:	4b4a      	ldr	r3, [pc, #296]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800235e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002360:	4b4a      	ldr	r3, [pc, #296]	@ (800248c <HAL_RCC_OscConfig+0x6c8>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	430a      	orrs	r2, r1
 8002370:	4945      	ldr	r1, [pc, #276]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	628b      	str	r3, [r1, #40]	@ 0x28
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	3b01      	subs	r3, #1
 800237c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002384:	3b01      	subs	r3, #1
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	b29b      	uxth	r3, r3
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239e:	3b01      	subs	r3, #1
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023a6:	4938      	ldr	r1, [pc, #224]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023bc:	4b34      	ldr	r3, [pc, #208]	@ (8002490 <HAL_RCC_OscConfig+0x6cc>)
 80023be:	4013      	ands	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023c4:	00d2      	lsls	r2, r2, #3
 80023c6:	4930      	ldr	r1, [pc, #192]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	f023 020c 	bic.w	r2, r3, #12
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	492b      	ldr	r1, [pc, #172]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023de:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	f023 0202 	bic.w	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	4927      	ldr	r1, [pc, #156]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023f0:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	4a24      	ldr	r2, [pc, #144]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023fc:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	4a1e      	ldr	r2, [pc, #120]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800240e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002414:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	4a1b      	ldr	r2, [pc, #108]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a18      	ldr	r2, [pc, #96]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7ff f942 	bl	80016b4 <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7ff f93e 	bl	80016b4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e090      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x670>
 8002452:	e088      	b.n	8002566 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0b      	ldr	r2, [pc, #44]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff f928 	bl	80016b4 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7ff f924 	bl	80016b4 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e076      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800247a:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <HAL_RCC_OscConfig+0x6c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x6a4>
 8002486:	e06e      	b.n	8002566 <HAL_RCC_OscConfig+0x7a2>
 8002488:	58024400 	.word	0x58024400
 800248c:	fffffc0c 	.word	0xfffffc0c
 8002490:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002494:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800249a:	4b35      	ldr	r3, [pc, #212]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d031      	beq.n	800250c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d12a      	bne.n	800250c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d122      	bne.n	800250c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d11a      	bne.n	800250c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0a5b      	lsrs	r3, r3, #9
 80024da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d111      	bne.n	800250c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d108      	bne.n	800250c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	0e1b      	lsrs	r3, r3, #24
 80024fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002506:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e02b      	b.n	8002568 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002510:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 8002512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800251a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	429a      	cmp	r2, r3
 8002524:	d01f      	beq.n	8002566 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002526:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	4a11      	ldr	r2, [pc, #68]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002532:	f7ff f8bf 	bl	80016b4 <HAL_GetTick>
 8002536:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002538:	bf00      	nop
 800253a:	f7ff f8bb 	bl	80016b4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	4293      	cmp	r3, r2
 8002544:	d0f9      	beq.n	800253a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002546:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_RCC_OscConfig+0x7b0>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002552:	00d2      	lsls	r2, r2, #3
 8002554:	4906      	ldr	r1, [pc, #24]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 8002556:	4313      	orrs	r3, r2
 8002558:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_RCC_OscConfig+0x7ac>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3730      	adds	r7, #48	@ 0x30
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58024400 	.word	0x58024400
 8002574:	ffff0007 	.word	0xffff0007

08002578 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e19c      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b8a      	ldr	r3, [pc, #552]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d910      	bls.n	80025bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b87      	ldr	r3, [pc, #540]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 020f 	bic.w	r2, r3, #15
 80025a2:	4985      	ldr	r1, [pc, #532]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b83      	ldr	r3, [pc, #524]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e184      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d010      	beq.n	80025ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	4b7b      	ldr	r3, [pc, #492]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d908      	bls.n	80025ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025d8:	4b78      	ldr	r3, [pc, #480]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4975      	ldr	r1, [pc, #468]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d010      	beq.n	8002618 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	4b70      	ldr	r3, [pc, #448]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002602:	429a      	cmp	r2, r3
 8002604:	d908      	bls.n	8002618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002606:	4b6d      	ldr	r3, [pc, #436]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	496a      	ldr	r1, [pc, #424]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002614:	4313      	orrs	r3, r2
 8002616:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d010      	beq.n	8002646 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	4b64      	ldr	r3, [pc, #400]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002630:	429a      	cmp	r2, r3
 8002632:	d908      	bls.n	8002646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002634:	4b61      	ldr	r3, [pc, #388]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	495e      	ldr	r1, [pc, #376]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002642:	4313      	orrs	r3, r2
 8002644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d010      	beq.n	8002674 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	4b59      	ldr	r3, [pc, #356]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800265e:	429a      	cmp	r2, r3
 8002660:	d908      	bls.n	8002674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002662:	4b56      	ldr	r3, [pc, #344]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4953      	ldr	r1, [pc, #332]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002670:	4313      	orrs	r3, r2
 8002672:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d010      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	4b4d      	ldr	r3, [pc, #308]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	429a      	cmp	r2, r3
 800268e:	d908      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002690:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f023 020f 	bic.w	r2, r3, #15
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4947      	ldr	r1, [pc, #284]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d055      	beq.n	800275a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026ae:	4b43      	ldr	r3, [pc, #268]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4940      	ldr	r1, [pc, #256]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026c8:	4b3c      	ldr	r3, [pc, #240]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d121      	bne.n	8002718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0f6      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026e0:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d115      	bne.n	8002718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0ea      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026f8:	4b30      	ldr	r3, [pc, #192]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0de      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002708:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0d6      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002718:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f023 0207 	bic.w	r2, r3, #7
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4925      	ldr	r1, [pc, #148]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002726:	4313      	orrs	r3, r2
 8002728:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800272a:	f7fe ffc3 	bl	80016b4 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002730:	e00a      	b.n	8002748 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002732:	f7fe ffbf 	bl	80016b4 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0be      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002748:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	429a      	cmp	r2, r3
 8002758:	d1eb      	bne.n	8002732 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	429a      	cmp	r2, r3
 8002774:	d208      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f023 020f 	bic.w	r2, r3, #15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	490e      	ldr	r1, [pc, #56]	@ (80027bc <HAL_RCC_ClockConfig+0x244>)
 8002784:	4313      	orrs	r3, r2
 8002786:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d214      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 020f 	bic.w	r2, r3, #15
 800279e:	4906      	ldr	r1, [pc, #24]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <HAL_RCC_ClockConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e086      	b.n	80028c6 <HAL_RCC_ClockConfig+0x34e>
 80027b8:	52002000 	.word	0x52002000
 80027bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d010      	beq.n	80027ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027d8:	429a      	cmp	r2, r3
 80027da:	d208      	bcs.n	80027ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027dc:	4b3c      	ldr	r3, [pc, #240]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4939      	ldr	r1, [pc, #228]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d010      	beq.n	800281c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002806:	429a      	cmp	r2, r3
 8002808:	d208      	bcs.n	800281c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800280a:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	492e      	ldr	r1, [pc, #184]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 8002818:	4313      	orrs	r3, r2
 800281a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d010      	beq.n	800284a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	4b28      	ldr	r3, [pc, #160]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002834:	429a      	cmp	r2, r3
 8002836:	d208      	bcs.n	800284a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002838:	4b25      	ldr	r3, [pc, #148]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4922      	ldr	r1, [pc, #136]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 8002846:	4313      	orrs	r3, r2
 8002848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002862:	429a      	cmp	r2, r3
 8002864:	d208      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002866:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4917      	ldr	r1, [pc, #92]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 8002874:	4313      	orrs	r3, r2
 8002876:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002878:	f000 f834 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	4912      	ldr	r1, [pc, #72]	@ (80028d4 <HAL_RCC_ClockConfig+0x35c>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002896:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <HAL_RCC_ClockConfig+0x358>)
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <HAL_RCC_ClockConfig+0x35c>)
 80028a0:	5cd3      	ldrb	r3, [r2, r3]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <HAL_RCC_ClockConfig+0x360>)
 80028ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b0:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <HAL_RCC_ClockConfig+0x364>)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_RCC_ClockConfig+0x368>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe feb0 	bl	8001620 <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	58024400 	.word	0x58024400
 80028d4:	080088c4 	.word	0x080088c4
 80028d8:	24000004 	.word	0x24000004
 80028dc:	24000000 	.word	0x24000000
 80028e0:	24000008 	.word	0x24000008

080028e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ea:	4bb3      	ldr	r3, [pc, #716]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028f2:	2b18      	cmp	r3, #24
 80028f4:	f200 8155 	bhi.w	8002ba2 <HAL_RCC_GetSysClockFreq+0x2be>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002965 	.word	0x08002965
 8002904:	08002ba3 	.word	0x08002ba3
 8002908:	08002ba3 	.word	0x08002ba3
 800290c:	08002ba3 	.word	0x08002ba3
 8002910:	08002ba3 	.word	0x08002ba3
 8002914:	08002ba3 	.word	0x08002ba3
 8002918:	08002ba3 	.word	0x08002ba3
 800291c:	08002ba3 	.word	0x08002ba3
 8002920:	0800298b 	.word	0x0800298b
 8002924:	08002ba3 	.word	0x08002ba3
 8002928:	08002ba3 	.word	0x08002ba3
 800292c:	08002ba3 	.word	0x08002ba3
 8002930:	08002ba3 	.word	0x08002ba3
 8002934:	08002ba3 	.word	0x08002ba3
 8002938:	08002ba3 	.word	0x08002ba3
 800293c:	08002ba3 	.word	0x08002ba3
 8002940:	08002991 	.word	0x08002991
 8002944:	08002ba3 	.word	0x08002ba3
 8002948:	08002ba3 	.word	0x08002ba3
 800294c:	08002ba3 	.word	0x08002ba3
 8002950:	08002ba3 	.word	0x08002ba3
 8002954:	08002ba3 	.word	0x08002ba3
 8002958:	08002ba3 	.word	0x08002ba3
 800295c:	08002ba3 	.word	0x08002ba3
 8002960:	08002997 	.word	0x08002997
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002964:	4b94      	ldr	r3, [pc, #592]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002970:	4b91      	ldr	r3, [pc, #580]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	08db      	lsrs	r3, r3, #3
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	4a90      	ldr	r2, [pc, #576]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002982:	e111      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002984:	4b8d      	ldr	r3, [pc, #564]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002986:	61bb      	str	r3, [r7, #24]
      break;
 8002988:	e10e      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800298a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800298c:	61bb      	str	r3, [r7, #24]
      break;
 800298e:	e10b      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002990:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002992:	61bb      	str	r3, [r7, #24]
      break;
 8002994:	e108      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002996:	4b88      	ldr	r3, [pc, #544]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029a0:	4b85      	ldr	r3, [pc, #532]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029ac:	4b82      	ldr	r3, [pc, #520]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029b6:	4b80      	ldr	r3, [pc, #512]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80e1 	beq.w	8002b9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	f000 8083 	beq.w	8002ae8 <HAL_RCC_GetSysClockFreq+0x204>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	f200 80a1 	bhi.w	8002b2c <HAL_RCC_GetSysClockFreq+0x248>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x114>
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d056      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029f6:	e099      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029f8:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02d      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a04:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	08db      	lsrs	r3, r3, #3
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	4a6b      	ldr	r2, [pc, #428]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2e:	4b62      	ldr	r3, [pc, #392]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a5e:	e087      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a72:	4b51      	ldr	r3, [pc, #324]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aa2:	e065      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4b40      	ldr	r3, [pc, #256]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ae6:	e043      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afa:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b2a:	e021      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b70:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	0a5b      	lsrs	r3, r3, #9
 8002b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b94:	ee17 3a90 	vmov	r3, s15
 8002b98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b9a:	e005      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
      break;
 8002ba0:	e002      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ba4:	61bb      	str	r3, [r7, #24]
      break;
 8002ba6:	bf00      	nop
  }

  return sysclockfreq;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	@ 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	03d09000 	.word	0x03d09000
 8002bc0:	003d0900 	.word	0x003d0900
 8002bc4:	017d7840 	.word	0x017d7840
 8002bc8:	46000000 	.word	0x46000000
 8002bcc:	4c742400 	.word	0x4c742400
 8002bd0:	4a742400 	.word	0x4a742400
 8002bd4:	4bbebc20 	.word	0x4bbebc20

08002bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b0c6      	sub	sp, #280	@ 0x118
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	ea54 0305 	orrs.w	r3, r4, r5
 8002c02:	d049      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c0e:	d02f      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c14:	d828      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c1a:	d01a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c20:	d822      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c2a:	d007      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c2c:	e01c      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2e:	4bab      	ldr	r3, [pc, #684]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	4aaa      	ldr	r2, [pc, #680]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c3a:	e01a      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c40:	3308      	adds	r3, #8
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 f967 	bl	8003f18 <RCCEx_PLL2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c50:	e00f      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c56:	3328      	adds	r3, #40	@ 0x28
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fa0e 	bl	800407c <RCCEx_PLL3_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c66:	e004      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c6e:	e000      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c7a:	4b98      	ldr	r3, [pc, #608]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c88:	4a94      	ldr	r2, [pc, #592]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c8e:	e003      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ca4:	f04f 0900 	mov.w	r9, #0
 8002ca8:	ea58 0309 	orrs.w	r3, r8, r9
 8002cac:	d047      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d82a      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cd5 	.word	0x08002cd5
 8002cc4:	08002ce3 	.word	0x08002ce3
 8002cc8:	08002cf9 	.word	0x08002cf9
 8002ccc:	08002d17 	.word	0x08002d17
 8002cd0:	08002d17 	.word	0x08002d17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd4:	4b81      	ldr	r3, [pc, #516]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	4a80      	ldr	r2, [pc, #512]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ce0:	e01a      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f914 	bl	8003f18 <RCCEx_PLL2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cf6:	e00f      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cfc:	3328      	adds	r3, #40	@ 0x28
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 f9bb 	bl	800407c <RCCEx_PLL3_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d0c:	e004      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d14:	e000      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d20:	4b6e      	ldr	r3, [pc, #440]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d24:	f023 0107 	bic.w	r1, r3, #7
 8002d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d34:	e003      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002d4a:	f04f 0b00 	mov.w	fp, #0
 8002d4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d52:	d05b      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d5c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002d60:	d03b      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002d62:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002d66:	d834      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d6c:	d037      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002d6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d72:	d82e      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d78:	d033      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002d7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d7e:	d828      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d84:	d01a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d8a:	d822      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002d90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d94:	d007      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002d96:	e01c      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d98:	4b50      	ldr	r3, [pc, #320]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002da4:	e01e      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002daa:	3308      	adds	r3, #8
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 f8b2 	bl	8003f18 <RCCEx_PLL2_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002dba:	e013      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dc0:	3328      	adds	r3, #40	@ 0x28
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 f959 	bl	800407c <RCCEx_PLL3_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dd0:	e008      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002dd8:	e004      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002dec:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002df8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dfc:	4a37      	ldr	r2, [pc, #220]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e02:	e003      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e26:	460b      	mov	r3, r1
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	d05d      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e34:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e38:	d03b      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002e3a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e3e:	d834      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e44:	d037      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002e46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e4a:	d82e      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e50:	d033      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002e52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e56:	d828      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e5c:	d01a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e62:	d822      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e7c:	e01e      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e82:	3308      	adds	r3, #8
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 f846 	bl	8003f18 <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e92:	e013      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e98:	3328      	adds	r3, #40	@ 0x28
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f8ed 	bl	800407c <RCCEx_PLL3_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ea8:	e008      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002eb0:	e004      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ed0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ed4:	4a01      	ldr	r2, [pc, #4]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eda:	e005      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002efe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	d03a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0e:	2b30      	cmp	r3, #48	@ 0x30
 8002f10:	d01f      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002f12:	2b30      	cmp	r3, #48	@ 0x30
 8002f14:	d819      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d815      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d111      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f26:	4baa      	ldr	r3, [pc, #680]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	4aa9      	ldr	r2, [pc, #676]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f32:	e011      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f38:	3308      	adds	r3, #8
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 ffeb 	bl	8003f18 <RCCEx_PLL2_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f48:	e006      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f50:	e002      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f60:	4b9b      	ldr	r3, [pc, #620]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4a98      	ldr	r2, [pc, #608]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f70:	430b      	orrs	r3, r1
 8002f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	d051      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fa8:	d035      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fae:	d82e      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002fb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fb4:	d031      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002fb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fba:	d828      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc0:	d01a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc6:	d822      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd0:	d007      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002fd2:	e01c      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	4a7d      	ldr	r2, [pc, #500]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fe0:	e01c      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 ff94 	bl	8003f18 <RCCEx_PLL2_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ff6:	e011      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ffc:	3328      	adds	r3, #40	@ 0x28
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f83b 	bl	800407c <RCCEx_PLL3_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800300c:	e006      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003014:	e002      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800301a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003024:	4b6a      	ldr	r3, [pc, #424]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003028:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800302c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	4a67      	ldr	r2, [pc, #412]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003034:	430b      	orrs	r3, r1
 8003036:	6513      	str	r3, [r2, #80]	@ 0x50
 8003038:	e003      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800303e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800304e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003058:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800305c:	460b      	mov	r3, r1
 800305e:	4313      	orrs	r3, r2
 8003060:	d053      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306c:	d033      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800306e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003072:	d82c      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003078:	d02f      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x502>
 800307a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800307e:	d826      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003080:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003084:	d02b      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003086:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800308a:	d820      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800308c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003090:	d012      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003096:	d81a      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d022      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a0:	d115      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030a6:	3308      	adds	r3, #8
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 ff34 	bl	8003f18 <RCCEx_PLL2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030b6:	e015      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030bc:	3328      	adds	r3, #40	@ 0x28
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 ffdb 	bl	800407c <RCCEx_PLL3_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030cc:	e00a      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030d4:	e006      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030d6:	bf00      	nop
 80030d8:	e004      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030da:	bf00      	nop
 80030dc:	e002      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030ec:	4b38      	ldr	r3, [pc, #224]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80030f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fa:	4a35      	ldr	r2, [pc, #212]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800310a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003120:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003124:	460b      	mov	r3, r1
 8003126:	4313      	orrs	r3, r2
 8003128:	d058      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800312a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003136:	d033      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800313c:	d82c      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003148:	d826      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800314a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800314e:	d02b      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003150:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003154:	d820      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800315a:	d012      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003160:	d81a      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d022      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800316a:	d115      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800316c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003170:	3308      	adds	r3, #8
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fecf 	bl	8003f18 <RCCEx_PLL2_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003180:	e015      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003186:	3328      	adds	r3, #40	@ 0x28
 8003188:	2101      	movs	r1, #1
 800318a:	4618      	mov	r0, r3
 800318c:	f000 ff76 	bl	800407c <RCCEx_PLL3_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003196:	e00a      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800319e:	e006      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031a0:	bf00      	nop
 80031a2:	e004      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031a4:	bf00      	nop
 80031a6:	e002      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031a8:	bf00      	nop
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031c6:	4a02      	ldr	r2, [pc, #8]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80031cc:	e006      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80031ce:	bf00      	nop
 80031d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80031e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80031f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4313      	orrs	r3, r2
 80031fa:	d037      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003206:	d00e      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800320c:	d816      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003216:	d111      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003218:	4bc4      	ldr	r3, [pc, #784]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	4ac3      	ldr	r2, [pc, #780]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800321e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003224:	e00f      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800322a:	3308      	adds	r3, #8
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fe72 	bl	8003f18 <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800323a:	e004      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003242:	e000      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800324e:	4bb7      	ldr	r3, [pc, #732]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003252:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800325c:	4ab3      	ldr	r2, [pc, #716]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800325e:	430b      	orrs	r3, r1
 8003260:	6513      	str	r3, [r2, #80]	@ 0x50
 8003262:	e003      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800326c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003278:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003282:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003286:	460b      	mov	r3, r1
 8003288:	4313      	orrs	r3, r2
 800328a:	d039      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800328c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003292:	2b03      	cmp	r3, #3
 8003294:	d81c      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003296:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032d9 	.word	0x080032d9
 80032a0:	080032ad 	.word	0x080032ad
 80032a4:	080032bb 	.word	0x080032bb
 80032a8:	080032d9 	.word	0x080032d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ac:	4b9f      	ldr	r3, [pc, #636]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	4a9e      	ldr	r2, [pc, #632]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032b8:	e00f      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032be:	3308      	adds	r3, #8
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fe28 	bl	8003f18 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032ce:	e004      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80032d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032e2:	4b92      	ldr	r3, [pc, #584]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	f023 0103 	bic.w	r1, r3, #3
 80032ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f0:	4a8e      	ldr	r2, [pc, #568]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032f2:	430b      	orrs	r3, r1
 80032f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032f6:	e003      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800330c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003316:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800331a:	460b      	mov	r3, r1
 800331c:	4313      	orrs	r3, r2
 800331e:	f000 8099 	beq.w	8003454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003322:	4b83      	ldr	r3, [pc, #524]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a82      	ldr	r2, [pc, #520]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800332e:	f7fe f9c1 	bl	80016b4 <HAL_GetTick>
 8003332:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003336:	e00b      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003338:	f7fe f9bc 	bl	80016b4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b64      	cmp	r3, #100	@ 0x64
 8003346:	d903      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800334e:	e005      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003350:	4b77      	ldr	r3, [pc, #476]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ed      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800335c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003360:	2b00      	cmp	r3, #0
 8003362:	d173      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003364:	4b71      	ldr	r3, [pc, #452]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003366:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800336c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003370:	4053      	eors	r3, r2
 8003372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800337a:	4b6c      	ldr	r3, [pc, #432]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003382:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003386:	4b69      	ldr	r3, [pc, #420]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a68      	ldr	r2, [pc, #416]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003392:	4b66      	ldr	r3, [pc, #408]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	4a65      	ldr	r2, [pc, #404]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800339e:	4a63      	ldr	r2, [pc, #396]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033b2:	d118      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f97e 	bl	80016b4 <HAL_GetTick>
 80033b8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033bc:	e00d      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe f979 	bl	80016b4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80033c8:	1ad2      	subs	r2, r2, r3
 80033ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d903      	bls.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80033d8:	e005      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033da:	4b54      	ldr	r3, [pc, #336]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0eb      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80033e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d129      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033fe:	d10e      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003400:	4b4a      	ldr	r3, [pc, #296]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003410:	091a      	lsrs	r2, r3, #4
 8003412:	4b48      	ldr	r3, [pc, #288]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003414:	4013      	ands	r3, r2
 8003416:	4a45      	ldr	r2, [pc, #276]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003418:	430b      	orrs	r3, r1
 800341a:	6113      	str	r3, [r2, #16]
 800341c:	e005      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800341e:	4b43      	ldr	r3, [pc, #268]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	4a42      	ldr	r2, [pc, #264]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003424:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003428:	6113      	str	r3, [r2, #16]
 800342a:	4b40      	ldr	r3, [pc, #256]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800342c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800342e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343a:	4a3c      	ldr	r2, [pc, #240]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343c:	430b      	orrs	r3, r1
 800343e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003440:	e008      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800344a:	e003      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f002 0301 	and.w	r3, r2, #1
 8003460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800346a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800346e:	460b      	mov	r3, r1
 8003470:	4313      	orrs	r3, r2
 8003472:	f000 808f 	beq.w	8003594 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800347c:	2b28      	cmp	r3, #40	@ 0x28
 800347e:	d871      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	0800356d 	.word	0x0800356d
 800348c:	08003565 	.word	0x08003565
 8003490:	08003565 	.word	0x08003565
 8003494:	08003565 	.word	0x08003565
 8003498:	08003565 	.word	0x08003565
 800349c:	08003565 	.word	0x08003565
 80034a0:	08003565 	.word	0x08003565
 80034a4:	08003565 	.word	0x08003565
 80034a8:	08003539 	.word	0x08003539
 80034ac:	08003565 	.word	0x08003565
 80034b0:	08003565 	.word	0x08003565
 80034b4:	08003565 	.word	0x08003565
 80034b8:	08003565 	.word	0x08003565
 80034bc:	08003565 	.word	0x08003565
 80034c0:	08003565 	.word	0x08003565
 80034c4:	08003565 	.word	0x08003565
 80034c8:	0800354f 	.word	0x0800354f
 80034cc:	08003565 	.word	0x08003565
 80034d0:	08003565 	.word	0x08003565
 80034d4:	08003565 	.word	0x08003565
 80034d8:	08003565 	.word	0x08003565
 80034dc:	08003565 	.word	0x08003565
 80034e0:	08003565 	.word	0x08003565
 80034e4:	08003565 	.word	0x08003565
 80034e8:	0800356d 	.word	0x0800356d
 80034ec:	08003565 	.word	0x08003565
 80034f0:	08003565 	.word	0x08003565
 80034f4:	08003565 	.word	0x08003565
 80034f8:	08003565 	.word	0x08003565
 80034fc:	08003565 	.word	0x08003565
 8003500:	08003565 	.word	0x08003565
 8003504:	08003565 	.word	0x08003565
 8003508:	0800356d 	.word	0x0800356d
 800350c:	08003565 	.word	0x08003565
 8003510:	08003565 	.word	0x08003565
 8003514:	08003565 	.word	0x08003565
 8003518:	08003565 	.word	0x08003565
 800351c:	08003565 	.word	0x08003565
 8003520:	08003565 	.word	0x08003565
 8003524:	08003565 	.word	0x08003565
 8003528:	0800356d 	.word	0x0800356d
 800352c:	58024400 	.word	0x58024400
 8003530:	58024800 	.word	0x58024800
 8003534:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353c:	3308      	adds	r3, #8
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fce9 	bl	8003f18 <RCCEx_PLL2_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800354c:	e00f      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800354e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003552:	3328      	adds	r3, #40	@ 0x28
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fd90 	bl	800407c <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003562:	e004      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800356c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003576:	4bbf      	ldr	r3, [pc, #764]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800357e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003584:	4abb      	ldr	r2, [pc, #748]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003586:	430b      	orrs	r3, r1
 8003588:	6553      	str	r3, [r2, #84]	@ 0x54
 800358a:	e003      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f002 0302 	and.w	r3, r2, #2
 80035a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4313      	orrs	r3, r2
 80035b2:	d041      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d824      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	08003611 	.word	0x08003611
 80035c8:	080035dd 	.word	0x080035dd
 80035cc:	080035f3 	.word	0x080035f3
 80035d0:	08003611 	.word	0x08003611
 80035d4:	08003611 	.word	0x08003611
 80035d8:	08003611 	.word	0x08003611
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e0:	3308      	adds	r3, #8
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fc97 	bl	8003f18 <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035f0:	e00f      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f6:	3328      	adds	r3, #40	@ 0x28
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fd3e 	bl	800407c <RCCEx_PLL3_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003606:	e004      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800360e:	e000      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003612:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800361a:	4b96      	ldr	r3, [pc, #600]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361e:	f023 0107 	bic.w	r1, r3, #7
 8003622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003628:	4a92      	ldr	r2, [pc, #584]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800362a:	430b      	orrs	r3, r1
 800362c:	6553      	str	r3, [r2, #84]	@ 0x54
 800362e:	e003      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003634:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f002 0304 	and.w	r3, r2, #4
 8003644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800364e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003652:	460b      	mov	r3, r1
 8003654:	4313      	orrs	r3, r2
 8003656:	d044      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003660:	2b05      	cmp	r3, #5
 8003662:	d825      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003664:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	080036b9 	.word	0x080036b9
 8003670:	08003685 	.word	0x08003685
 8003674:	0800369b 	.word	0x0800369b
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036b9 	.word	0x080036b9
 8003680:	080036b9 	.word	0x080036b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003688:	3308      	adds	r3, #8
 800368a:	2101      	movs	r1, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fc43 	bl	8003f18 <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003698:	e00f      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800369a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369e:	3328      	adds	r3, #40	@ 0x28
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fcea 	bl	800407c <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036ae:	e004      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80036b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c6:	f023 0107 	bic.w	r1, r3, #7
 80036ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	4a68      	ldr	r2, [pc, #416]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f002 0320 	and.w	r3, r2, #32
 80036ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80036f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4313      	orrs	r3, r2
 8003700:	d055      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800370a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800370e:	d033      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003710:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003714:	d82c      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371a:	d02f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003720:	d826      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003726:	d02b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003728:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800372c:	d820      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800372e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003732:	d012      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003738:	d81a      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d022      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800373e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003742:	d115      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003748:	3308      	adds	r3, #8
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fbe3 	bl	8003f18 <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003758:	e015      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800375a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375e:	3328      	adds	r3, #40	@ 0x28
 8003760:	2102      	movs	r1, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fc8a 	bl	800407c <RCCEx_PLL3_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800376e:	e00a      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003776:	e006      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003778:	bf00      	nop
 800377a:	e004      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800377c:	bf00      	nop
 800377e:	e002      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800378e:	4b39      	ldr	r3, [pc, #228]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800379e:	4a35      	ldr	r2, [pc, #212]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80037ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d058      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80037ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80037da:	d033      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80037dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80037e0:	d82c      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e6:	d02f      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ec:	d826      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80037ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037f2:	d02b      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80037f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037f8:	d820      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80037fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037fe:	d012      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003804:	d81a      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d022      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380e:	d115      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003814:	3308      	adds	r3, #8
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fb7d 	bl	8003f18 <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003824:	e015      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382a:	3328      	adds	r3, #40	@ 0x28
 800382c:	2102      	movs	r1, #2
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fc24 	bl	800407c <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800383a:	e00a      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003842:	e006      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003844:	bf00      	nop
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003848:	bf00      	nop
 800384a:	e002      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10e      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386a:	4a02      	ldr	r2, [pc, #8]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003872:	bf00      	nop
 8003874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800387c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800388c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003896:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800389a:	460b      	mov	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	d055      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038ac:	d033      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80038ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038b2:	d82c      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b8:	d02f      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80038ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038be:	d826      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80038c4:	d02b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80038c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80038ca:	d820      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038d0:	d012      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80038d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038d6:	d81a      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80038dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e0:	d115      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e6:	3308      	adds	r3, #8
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fb14 	bl	8003f18 <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038f6:	e015      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fc:	3328      	adds	r3, #40	@ 0x28
 80038fe:	2102      	movs	r1, #2
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fbbb 	bl	800407c <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800392c:	4ba0      	ldr	r3, [pc, #640]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003930:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003938:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800393c:	4a9c      	ldr	r2, [pc, #624]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800393e:	430b      	orrs	r3, r1
 8003940:	6593      	str	r3, [r2, #88]	@ 0x58
 8003942:	e003      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f002 0308 	and.w	r3, r2, #8
 8003958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003962:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d01e      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800396c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003978:	d10c      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397e:	3328      	adds	r3, #40	@ 0x28
 8003980:	2102      	movs	r1, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb7a 	bl	800407c <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003994:	4b86      	ldr	r3, [pc, #536]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003998:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039a4:	4a82      	ldr	r2, [pc, #520]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039a6:	430b      	orrs	r3, r1
 80039a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f002 0310 	and.w	r3, r2, #16
 80039b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039c4:	460b      	mov	r3, r1
 80039c6:	4313      	orrs	r3, r2
 80039c8:	d01e      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80039ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039dc:	3328      	adds	r3, #40	@ 0x28
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fb4b 	bl	800407c <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039f2:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a02:	4a6b      	ldr	r2, [pc, #428]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a16:	2300      	movs	r3, #0
 8003a18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d03e      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a30:	d022      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a36:	d81b      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a40:	d00b      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003a42:	e015      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a48:	3308      	adds	r3, #8
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fa63 	bl	8003f18 <RCCEx_PLL2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a58:	e00f      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5e:	3328      	adds	r3, #40	@ 0x28
 8003a60:	2102      	movs	r1, #2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fb0a 	bl	800407c <RCCEx_PLL3_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a6e:	e004      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a82:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a92:	4a47      	ldr	r2, [pc, #284]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a98:	e003      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003aae:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ab4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	d03b      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aca:	d01f      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ad0:	d818      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ad6:	d003      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003adc:	d007      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003ade:	e011      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae0:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aec:	e00f      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af2:	3328      	adds	r3, #40	@ 0x28
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fac0 	bl	800407c <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b02:	e004      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b0a:	e000      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b16:	4b26      	ldr	r3, [pc, #152]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b26:	4a22      	ldr	r2, [pc, #136]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b44:	2300      	movs	r3, #0
 8003b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d034      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b60:	d007      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003b62:	e011      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b64:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	4a11      	ldr	r2, [pc, #68]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b70:	e00e      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b76:	3308      	adds	r3, #8
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f9cc 	bl	8003f18 <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba6:	4a02      	ldr	r2, [pc, #8]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003bae:	bf00      	nop
 8003bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bca:	2300      	movs	r3, #0
 8003bcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bdc:	3328      	adds	r3, #40	@ 0x28
 8003bde:	2102      	movs	r1, #2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fa4b 	bl	800407c <RCCEx_PLL3_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c00:	2300      	movs	r3, #0
 8003c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c04:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d036      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c18:	d018      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c1e:	d811      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c24:	d014      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2a:	d80b      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d011      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c34:	d106      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c36:	4bb7      	ldr	r3, [pc, #732]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	4ab6      	ldr	r2, [pc, #728]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c42:	e008      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c5e:	4bad      	ldr	r3, [pc, #692]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6c:	4aa9      	ldr	r2, [pc, #676]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c72:	e003      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c88:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c92:	460b      	mov	r3, r1
 8003c94:	4313      	orrs	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c98:	4b9e      	ldr	r3, [pc, #632]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	4a9b      	ldr	r2, [pc, #620]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cba:	2300      	movs	r3, #0
 8003cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cbe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cc8:	4b92      	ldr	r3, [pc, #584]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ccc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd6:	4a8f      	ldr	r2, [pc, #572]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cea:	2300      	movs	r3, #0
 8003cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cf8:	4b86      	ldr	r3, [pc, #536]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	4a85      	ldr	r2, [pc, #532]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d02:	6113      	str	r3, [r2, #16]
 8003d04:	4b83      	ldr	r3, [pc, #524]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d06:	6919      	ldr	r1, [r3, #16]
 8003d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d10:	4a80      	ldr	r2, [pc, #512]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d24:	2300      	movs	r3, #0
 8003d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d32:	4b78      	ldr	r3, [pc, #480]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	4a74      	ldr	r2, [pc, #464]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d62:	4b6c      	ldr	r3, [pc, #432]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	4a68      	ldr	r2, [pc, #416]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	2100      	movs	r1, #0
 8003d82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d011      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	3308      	adds	r3, #8
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f8bb 	bl	8003f18 <RCCEx_PLL2_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	6239      	str	r1, [r7, #32]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d011      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd8:	3308      	adds	r3, #8
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f89b 	bl	8003f18 <RCCEx_PLL2_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003df4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	2100      	movs	r1, #0
 8003e02:	61b9      	str	r1, [r7, #24]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d011      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e18:	3308      	adds	r3, #8
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f87b 	bl	8003f18 <RCCEx_PLL2_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	2100      	movs	r1, #0
 8003e42:	6139      	str	r1, [r7, #16]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d011      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e58:	3328      	adds	r3, #40	@ 0x28
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f90d 	bl	800407c <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	2100      	movs	r1, #0
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d011      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e98:	3328      	adds	r3, #40	@ 0x28
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f8ed 	bl	800407c <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	6039      	str	r1, [r7, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d011      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed8:	3328      	adds	r3, #40	@ 0x28
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f8cd 	bl	800407c <RCCEx_PLL3_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ef4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003ef8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f12:	bf00      	nop
 8003f14:	58024400 	.word	0x58024400

08003f18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f26:	4b53      	ldr	r3, [pc, #332]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d101      	bne.n	8003f36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e099      	b.n	800406a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f36:	4b4f      	ldr	r3, [pc, #316]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f42:	f7fd fbb7 	bl	80016b4 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f4a:	f7fd fbb3 	bl	80016b4 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e086      	b.n	800406a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f5c:	4b45      	ldr	r3, [pc, #276]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f68:	4b42      	ldr	r3, [pc, #264]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	031b      	lsls	r3, r3, #12
 8003f76:	493f      	ldr	r1, [pc, #252]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fac:	4931      	ldr	r1, [pc, #196]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fb2:	4b30      	ldr	r3, [pc, #192]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	492d      	ldr	r1, [pc, #180]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	f023 0220 	bic.w	r2, r3, #32
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4928      	ldr	r1, [pc, #160]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fd6:	4b27      	ldr	r3, [pc, #156]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	4a26      	ldr	r2, [pc, #152]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe6:	4b24      	ldr	r3, [pc, #144]	@ (8004078 <RCCEx_PLL2_Config+0x160>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	69d2      	ldr	r2, [r2, #28]
 8003fee:	00d2      	lsls	r2, r2, #3
 8003ff0:	4920      	ldr	r1, [pc, #128]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004008:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4a19      	ldr	r2, [pc, #100]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 800400e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004014:	e00f      	b.n	8004036 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800401c:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	4a14      	ldr	r2, [pc, #80]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004026:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004028:	e005      	b.n	8004036 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800402a:	4b12      	ldr	r3, [pc, #72]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	4a11      	ldr	r2, [pc, #68]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004034:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004036:	4b0f      	ldr	r3, [pc, #60]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0e      	ldr	r2, [pc, #56]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 800403c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fd fb37 	bl	80016b4 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004048:	e008      	b.n	800405c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800404a:	f7fd fb33 	bl	80016b4 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <RCCEx_PLL2_Config+0x15c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
 8004078:	ffff0007 	.word	0xffff0007

0800407c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800408a:	4b53      	ldr	r3, [pc, #332]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d101      	bne.n	800409a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e099      	b.n	80041ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800409a:	4b4f      	ldr	r3, [pc, #316]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4e      	ldr	r2, [pc, #312]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a6:	f7fd fb05 	bl	80016b4 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ae:	f7fd fb01 	bl	80016b4 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e086      	b.n	80041ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040c0:	4b45      	ldr	r3, [pc, #276]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040cc:	4b42      	ldr	r3, [pc, #264]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	051b      	lsls	r3, r3, #20
 80040da:	493f      	ldr	r1, [pc, #252]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	628b      	str	r3, [r1, #40]	@ 0x28
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	3b01      	subs	r3, #1
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004110:	4931      	ldr	r1, [pc, #196]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004116:	4b30      	ldr	r3, [pc, #192]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	492d      	ldr	r1, [pc, #180]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004128:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4928      	ldr	r1, [pc, #160]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800413a:	4b27      	ldr	r3, [pc, #156]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	4a26      	ldr	r2, [pc, #152]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004144:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <RCCEx_PLL3_Config+0x160>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	69d2      	ldr	r2, [r2, #28]
 8004152:	00d2      	lsls	r2, r2, #3
 8004154:	4920      	ldr	r1, [pc, #128]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800416c:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	4a19      	ldr	r2, [pc, #100]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004172:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004178:	e00f      	b.n	800419a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004180:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004186:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800418a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800418c:	e005      	b.n	800419a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004194:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004198:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fd fa85 	bl	80016b4 <HAL_GetTick>
 80041aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041ac:	e008      	b.n	80041c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041ae:	f7fd fa81 	bl	80016b4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
 80041dc:	ffff0007 	.word	0xffff0007

080041e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e10f      	b.n	8004412 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a87      	ldr	r2, [pc, #540]	@ (800441c <HAL_SPI_Init+0x23c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <HAL_SPI_Init+0x42>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a86      	ldr	r2, [pc, #536]	@ (8004420 <HAL_SPI_Init+0x240>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00a      	beq.n	8004222 <HAL_SPI_Init+0x42>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a84      	ldr	r2, [pc, #528]	@ (8004424 <HAL_SPI_Init+0x244>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d005      	beq.n	8004222 <HAL_SPI_Init+0x42>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d901      	bls.n	8004222 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0f7      	b.n	8004412 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fd08 	bl	8004c38 <SPI_GetPacketSize>
 8004228:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7b      	ldr	r2, [pc, #492]	@ (800441c <HAL_SPI_Init+0x23c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00c      	beq.n	800424e <HAL_SPI_Init+0x6e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a79      	ldr	r2, [pc, #484]	@ (8004420 <HAL_SPI_Init+0x240>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <HAL_SPI_Init+0x6e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a78      	ldr	r2, [pc, #480]	@ (8004424 <HAL_SPI_Init+0x244>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d002      	beq.n	800424e <HAL_SPI_Init+0x6e>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b08      	cmp	r3, #8
 800424c:	d811      	bhi.n	8004272 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004252:	4a72      	ldr	r2, [pc, #456]	@ (800441c <HAL_SPI_Init+0x23c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a70      	ldr	r2, [pc, #448]	@ (8004420 <HAL_SPI_Init+0x240>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_SPI_Init+0x8c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6f      	ldr	r2, [pc, #444]	@ (8004424 <HAL_SPI_Init+0x244>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d104      	bne.n	8004276 <HAL_SPI_Init+0x96>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b10      	cmp	r3, #16
 8004270:	d901      	bls.n	8004276 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0cd      	b.n	8004412 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc fd16 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80042b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042bc:	d119      	bne.n	80042f2 <HAL_SPI_Init+0x112>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c6:	d103      	bne.n	80042d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10c      	bne.n	80042f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80042dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e0:	d107      	bne.n	80042f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00f      	beq.n	800431e <HAL_SPI_Init+0x13e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b06      	cmp	r3, #6
 8004304:	d90b      	bls.n	800431e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e007      	b.n	800432e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	431a      	orrs	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004340:	ea42 0103 	orr.w	r1, r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438e:	ea42 0103 	orr.w	r1, r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d113      	bne.n	80043ce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40013000 	.word	0x40013000
 8004420:	40003800 	.word	0x40003800
 8004424:	40003c00 	.word	0x40003c00

08004428 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08e      	sub	sp, #56	@ 0x38
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3320      	adds	r3, #32
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3330      	adds	r3, #48	@ 0x30
 8004444:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	b29b      	uxth	r3, r3
 800444e:	3301      	adds	r3, #1
 8004450:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004452:	f7fd f92f 	bl	80016b4 <HAL_GetTick>
 8004456:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d001      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
 800446e:	e310      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x5a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x5a>
 800447c:	887b      	ldrh	r3, [r7, #2]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e305      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x6c>
 8004490:	2302      	movs	r3, #2
 8004492:	e2fe      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x66a>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2205      	movs	r2, #5
 80044a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	887a      	ldrh	r2, [r7, #2]
 80044b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	887a      	ldrh	r2, [r7, #2]
 80044cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	887a      	ldrh	r2, [r7, #2]
 80044d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80044f2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a70      	ldr	r2, [pc, #448]	@ (80046bc <HAL_SPI_TransmitReceive+0x294>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_SPI_TransmitReceive+0xea>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6f      	ldr	r2, [pc, #444]	@ (80046c0 <HAL_SPI_TransmitReceive+0x298>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_SPI_TransmitReceive+0xea>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6d      	ldr	r2, [pc, #436]	@ (80046c4 <HAL_SPI_TransmitReceive+0x29c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d102      	bne.n	8004518 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8004512:	2310      	movs	r3, #16
 8004514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004516:	e001      	b.n	800451c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8004518:	2308      	movs	r3, #8
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4b69      	ldr	r3, [pc, #420]	@ (80046c8 <HAL_SPI_TransmitReceive+0x2a0>)
 8004524:	4013      	ands	r3, r2
 8004526:	8879      	ldrh	r1, [r7, #2]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	430b      	orrs	r3, r1
 800452e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004548:	d107      	bne.n	800455a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	f240 80a2 	bls.w	80046a8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8004564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800456a:	e094      	b.n	8004696 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b02      	cmp	r3, #2
 8004578:	d120      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x194>
 800457a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01d      	beq.n	80045bc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8004580:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004582:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8004588:	429a      	cmp	r2, r3
 800458a:	d217      	bcs.n	80045bc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	1d1a      	adds	r2, r3, #4
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80045c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d065      	beq.n	8004696 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d118      	bne.n	800460a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045e2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e8:	1d1a      	adds	r2, r3, #4
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004606:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004608:	e045      	b.n	8004696 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800460a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800460c:	8bfb      	ldrh	r3, [r7, #30]
 800460e:	429a      	cmp	r2, r3
 8004610:	d21d      	bcs.n	800464e <HAL_SPI_TransmitReceive+0x226>
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d018      	beq.n	800464e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004624:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004626:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462c:	1d1a      	adds	r2, r3, #4
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800464a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800464c:	e023      	b.n	8004696 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800464e:	f7fd f831 	bl	80016b4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800465a:	429a      	cmp	r2, r3
 800465c:	d803      	bhi.n	8004666 <HAL_SPI_TransmitReceive+0x23e>
 800465e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004664:	d102      	bne.n	800466c <HAL_SPI_TransmitReceive+0x244>
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d114      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fa15 	bl	8004a9c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004678:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e1fd      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004696:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f af67 	bne.w	800456c <HAL_SPI_TransmitReceive+0x144>
 800469e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f af63 	bne.w	800456c <HAL_SPI_TransmitReceive+0x144>
 80046a6:	e1ce      	b.n	8004a46 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b07      	cmp	r3, #7
 80046ae:	f240 81c2 	bls.w	8004a36 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80046b8:	e0c9      	b.n	800484e <HAL_SPI_TransmitReceive+0x426>
 80046ba:	bf00      	nop
 80046bc:	40013000 	.word	0x40013000
 80046c0:	40003800 	.word	0x40003800
 80046c4:	40003c00 	.word	0x40003c00
 80046c8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d11f      	bne.n	800471a <HAL_SPI_TransmitReceive+0x2f2>
 80046da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01c      	beq.n	800471a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80046e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80046e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80046e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d216      	bcs.n	800471a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004718:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8004722:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8092 	beq.w	800484e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d118      	bne.n	800476a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800473c:	6a3a      	ldr	r2, [r7, #32]
 800473e:	8812      	ldrh	r2, [r2, #0]
 8004740:	b292      	uxth	r2, r2
 8004742:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004748:	1c9a      	adds	r2, r3, #2
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004766:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004768:	e071      	b.n	800484e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800476a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800476c:	8bfb      	ldrh	r3, [r7, #30]
 800476e:	429a      	cmp	r2, r3
 8004770:	d228      	bcs.n	80047c4 <HAL_SPI_TransmitReceive+0x39c>
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d023      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	8812      	ldrh	r2, [r2, #0]
 8004784:	b292      	uxth	r2, r2
 8004786:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	8812      	ldrh	r2, [r2, #0]
 800479a:	b292      	uxth	r2, r2
 800479c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b02      	subs	r3, #2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80047c0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80047c2:	e044      	b.n	800484e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80047c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d11d      	bne.n	8004806 <HAL_SPI_TransmitReceive+0x3de>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d018      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	b292      	uxth	r2, r2
 80047de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004802:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004804:	e023      	b.n	800484e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004806:	f7fc ff55 	bl	80016b4 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004812:	429a      	cmp	r2, r3
 8004814:	d803      	bhi.n	800481e <HAL_SPI_TransmitReceive+0x3f6>
 8004816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800481c:	d102      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x3fc>
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d114      	bne.n	800484e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f939 	bl	8004a9c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004830:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e121      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800484e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f af3b 	bne.w	80046cc <HAL_SPI_TransmitReceive+0x2a4>
 8004856:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004858:	2b00      	cmp	r3, #0
 800485a:	f47f af37 	bne.w	80046cc <HAL_SPI_TransmitReceive+0x2a4>
 800485e:	e0f2      	b.n	8004a46 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d121      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x48a>
 800486e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01e      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8004874:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004876:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8004878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800487c:	429a      	cmp	r2, r3
 800487e:	d218      	bcs.n	80048b2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3320      	adds	r3, #32
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80048b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80048ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80ba 	beq.w	8004a36 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d11b      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004904:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004906:	e096      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004908:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800490a:	8bfb      	ldrh	r3, [r7, #30]
 800490c:	429a      	cmp	r2, r3
 800490e:	d24a      	bcs.n	80049a6 <HAL_SPI_TransmitReceive+0x57e>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d045      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004926:	7812      	ldrb	r2, [r2, #0]
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800495e:	7812      	ldrb	r2, [r2, #0]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800497a:	7812      	ldrb	r2, [r2, #0]
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b04      	subs	r3, #4
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80049a4:	e047      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80049a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d820      	bhi.n	80049ee <HAL_SPI_TransmitReceive+0x5c6>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80049ec:	e023      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ee:	f7fc fe61 	bl	80016b4 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d803      	bhi.n	8004a06 <HAL_SPI_TransmitReceive+0x5de>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x5e4>
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d114      	bne.n	8004a36 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f845 	bl	8004a9c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e02d      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004a36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f47f af11 	bne.w	8004860 <HAL_SPI_TransmitReceive+0x438>
 8004a3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f af0d 	bne.w	8004860 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2108      	movs	r1, #8
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f8c3 	bl	8004bdc <SPI_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f815 	bl	8004a9c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3730      	adds	r7, #48	@ 0x30
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop

08004a9c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0208 	orr.w	r2, r2, #8
 8004aba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0210 	orr.w	r2, r2, #16
 8004aca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6919      	ldr	r1, [r3, #16]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd8 <SPI_CloseTransfer+0x13c>)
 8004ae8:	400b      	ands	r3, r1
 8004aea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004afa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d014      	beq.n	8004b32 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00f      	beq.n	8004b32 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0220 	orr.w	r2, r2, #32
 8004b30:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d014      	beq.n	8004b68 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00f      	beq.n	8004b68 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b66:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00f      	beq.n	8004b92 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b78:	f043 0201 	orr.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b90:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00f      	beq.n	8004bbc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba2:	f043 0208 	orr.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	fffffc90 	.word	0xfffffc90

08004bdc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004bec:	e010      	b.n	8004c10 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bee:	f7fc fd61 	bl	80016b4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d803      	bhi.n	8004c06 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c04:	d102      	bne.n	8004c0c <SPI_WaitOnFlagUntilTimeout+0x30>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e00f      	b.n	8004c30 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d0df      	beq.n	8004bee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3307      	adds	r3, #7
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	fb03 f203 	mul.w	r2, r3, r3
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	ea01 0203 	and.w	r2, r1, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	fb03 f303 	mul.w	r3, r3, r3
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6899      	ldr	r1, [r3, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	fb03 f203 	mul.w	r2, r3, r3
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	ea01 0203 	and.w	r2, r1, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	fb03 f303 	mul.w	r3, r3, r3
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	68d9      	ldr	r1, [r3, #12]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	fb03 f203 	mul.w	r2, r3, r3
 8004d34:	4613      	mov	r3, r2
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4413      	add	r3, r2
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	ea01 0203 	and.w	r2, r1, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	fb03 f303 	mul.w	r3, r3, r3
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	60da      	str	r2, [r3, #12]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a19      	ldr	r1, [r3, #32]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	fb03 f303 	mul.w	r3, r3, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	fb03 f202 	mul.w	r2, r3, r2
 8004d80:	4613      	mov	r3, r2
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	43db      	mvns	r3, r3
 8004d88:	ea01 0203 	and.w	r2, r1, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	fb03 f303 	mul.w	r3, r3, r3
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	431a      	orrs	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	0a12      	lsrs	r2, r2, #8
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0a12      	lsrs	r2, r2, #8
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	0a12      	lsrs	r2, r2, #8
 8004dde:	fb03 f202 	mul.w	r2, r3, r2
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	43db      	mvns	r3, r3
 8004dea:	ea01 0203 	and.w	r2, r1, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	0a09      	lsrs	r1, r1, #8
 8004df6:	fb01 f303 	mul.w	r3, r1, r3
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	0a09      	lsrs	r1, r1, #8
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	0a09      	lsrs	r1, r1, #8
 8004e06:	fb01 f303 	mul.w	r3, r1, r3
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b088      	sub	sp, #32
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	fa93 f3a3 	rbit	r3, r3
 8004e38:	60fb      	str	r3, [r7, #12]
  return result;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <LL_GPIO_Init+0x26>
    return 32U;
 8004e44:	2320      	movs	r3, #32
 8004e46:	e003      	b.n	8004e50 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004e52:	e048      	b.n	8004ee6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d03a      	beq.n	8004ee0 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d003      	beq.n	8004e7a <LL_GPIO_Init+0x58>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d10e      	bne.n	8004e98 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff ff2b 	bl	8004cde <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff0b 	bl	8004cae <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	69b9      	ldr	r1, [r7, #24]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff3c 	bl	8004d1e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d111      	bne.n	8004ed2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2bff      	cmp	r3, #255	@ 0xff
 8004eb2:	d807      	bhi.n	8004ec4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ff4e 	bl	8004d5e <LL_GPIO_SetAFPin_0_7>
 8004ec2:	e006      	b.n	8004ed2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff72 	bl	8004db6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fec7 	bl	8004c6e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1af      	bne.n	8004e54 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f04:	4b07      	ldr	r3, [pc, #28]	@ (8004f24 <LL_RCC_HSE_IsReady+0x24>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f10:	d101      	bne.n	8004f16 <LL_RCC_HSE_IsReady+0x16>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <LL_RCC_HSE_IsReady+0x18>
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400

08004f28 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004f2c:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <LL_RCC_HSI_IsReady+0x20>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d101      	bne.n	8004f3c <LL_RCC_HSI_IsReady+0x14>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <LL_RCC_HSI_IsReady+0x16>
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	58024400 	.word	0x58024400

08004f4c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8004f50:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <LL_RCC_HSI_GetDivider+0x18>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0318 	and.w	r3, r3, #24
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400

08004f68 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8004f6c:	4b07      	ldr	r3, [pc, #28]	@ (8004f8c <LL_RCC_CSI_IsReady+0x24>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f78:	d101      	bne.n	8004f7e <LL_RCC_CSI_IsReady+0x16>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <LL_RCC_CSI_IsReady+0x18>
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400

08004f90 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f94:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <LL_RCC_LSE_IsReady+0x20>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d101      	bne.n	8004fa4 <LL_RCC_LSE_IsReady+0x14>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <LL_RCC_LSE_IsReady+0x16>
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	58024400 	.word	0x58024400

08004fb4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <LL_RCC_GetSysClkSource+0x18>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400

08004fd0 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8004fd4:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <LL_RCC_GetSysPrescaler+0x18>)
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	58024400 	.word	0x58024400

08004fec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8004ff0:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <LL_RCC_GetAHBPrescaler+0x18>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	58024400 	.word	0x58024400

08005008 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800500c:	4b04      	ldr	r3, [pc, #16]	@ (8005020 <LL_RCC_GetAPB1Prescaler+0x18>)
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400

08005024 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8005028:	4b04      	ldr	r3, [pc, #16]	@ (800503c <LL_RCC_GetAPB2Prescaler+0x18>)
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	58024400 	.word	0x58024400

08005040 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	4b0e      	ldr	r3, [pc, #56]	@ (8005088 <LL_RCC_GetClockSource+0x48>)
 800504e:	4413      	add	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0e19      	lsrs	r1, r3, #24
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	401a      	ands	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	041a      	lsls	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4313      	orrs	r3, r2
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	5802444c 	.word	0x5802444c

0800508c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff ffd3 	bl	8005040 <LL_RCC_GetClockSource>
 800509a:	4603      	mov	r3, r0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80050a8:	4b04      	ldr	r3, [pc, #16]	@ (80050bc <LL_RCC_PLL_GetSource+0x18>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	f003 0303 	and.w	r3, r3, #3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	58024400 	.word	0x58024400

080050c0 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 80050c4:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <LL_RCC_PLL1P_IsEnabled+0x24>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d0:	d101      	bne.n	80050d6 <LL_RCC_PLL1P_IsEnabled+0x16>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <LL_RCC_PLL1P_IsEnabled+0x18>
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400

080050e8 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 80050ec:	4b07      	ldr	r3, [pc, #28]	@ (800510c <LL_RCC_PLL1Q_IsEnabled+0x24>)
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050f8:	d101      	bne.n	80050fe <LL_RCC_PLL1Q_IsEnabled+0x16>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <LL_RCC_PLL1Q_IsEnabled+0x18>
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400

08005110 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8005114:	4b07      	ldr	r3, [pc, #28]	@ (8005134 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800511c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005120:	d101      	bne.n	8005126 <LL_RCC_PLL1R_IsEnabled+0x16>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <LL_RCC_PLL1R_IsEnabled+0x18>
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	58024400 	.word	0x58024400

08005138 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	58024400 	.word	0x58024400

0800515c <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8005160:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <LL_RCC_PLL1_GetN+0x18>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005168:	3301      	adds	r3, #1
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	58024400 	.word	0x58024400

08005178 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800517c:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <LL_RCC_PLL1_GetM+0x18>)
 800517e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	58024400 	.word	0x58024400

08005194 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8005198:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <LL_RCC_PLL1_GetP+0x1c>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519c:	0a5b      	lsrs	r3, r3, #9
 800519e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a2:	3301      	adds	r3, #1
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400

080051b4 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <LL_RCC_PLL1_GetQ+0x1c>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c2:	3301      	adds	r3, #1
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400

080051d4 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 80051d8:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <LL_RCC_PLL1_GetR+0x1c>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e2:	3301      	adds	r3, #1
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	58024400 	.word	0x58024400

080051f4 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80051f8:	4b04      	ldr	r3, [pc, #16]	@ (800520c <LL_RCC_PLL1_GetFRACN+0x18>)
 80051fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	58024400 	.word	0x58024400

08005210 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8005214:	4b07      	ldr	r3, [pc, #28]	@ (8005234 <LL_RCC_PLL2_IsReady+0x24>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800521c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005220:	d101      	bne.n	8005226 <LL_RCC_PLL2_IsReady+0x16>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <LL_RCC_PLL2_IsReady+0x18>
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400

08005238 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800523c:	4b07      	ldr	r3, [pc, #28]	@ (800525c <LL_RCC_PLL2P_IsEnabled+0x24>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005244:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005248:	d101      	bne.n	800524e <LL_RCC_PLL2P_IsEnabled+0x16>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <LL_RCC_PLL2P_IsEnabled+0x18>
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	58024400 	.word	0x58024400

08005260 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8005264:	4b07      	ldr	r3, [pc, #28]	@ (8005284 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800526c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005270:	d101      	bne.n	8005276 <LL_RCC_PLL2Q_IsEnabled+0x16>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400

08005288 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <LL_RCC_PLL2R_IsEnabled+0x24>)
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005294:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005298:	d101      	bne.n	800529e <LL_RCC_PLL2R_IsEnabled+0x16>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <LL_RCC_PLL2R_IsEnabled+0x18>
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	58024400 	.word	0x58024400

080052b0 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 80052b4:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d101      	bne.n	80052c4 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	58024400 	.word	0x58024400

080052d4 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 80052d8:	4b04      	ldr	r3, [pc, #16]	@ (80052ec <LL_RCC_PLL2_GetN+0x18>)
 80052da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	3301      	adds	r3, #1
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	58024400 	.word	0x58024400

080052f0 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <LL_RCC_PLL2_GetM+0x18>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	0b1b      	lsrs	r3, r3, #12
 80052fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80052fe:	4618      	mov	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	58024400 	.word	0x58024400

0800530c <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <LL_RCC_PLL2_GetP+0x1c>)
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	0a5b      	lsrs	r3, r3, #9
 8005316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800531a:	3301      	adds	r3, #1
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400

0800532c <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8005330:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <LL_RCC_PLL2_GetQ+0x1c>)
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533a:	3301      	adds	r3, #1
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	58024400 	.word	0x58024400

0800534c <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8005350:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <LL_RCC_PLL2_GetR+0x1c>)
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	0e1b      	lsrs	r3, r3, #24
 8005356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535a:	3301      	adds	r3, #1
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	58024400 	.word	0x58024400

0800536c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8005370:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <LL_RCC_PLL2_GetFRACN+0x18>)
 8005372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005374:	08db      	lsrs	r3, r3, #3
 8005376:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800537a:	4618      	mov	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	58024400 	.word	0x58024400

08005388 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <LL_RCC_PLL3_IsReady+0x24>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005398:	d101      	bne.n	800539e <LL_RCC_PLL3_IsReady+0x16>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <LL_RCC_PLL3_IsReady+0x18>
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	58024400 	.word	0x58024400

080053b0 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 80053b4:	4b07      	ldr	r3, [pc, #28]	@ (80053d4 <LL_RCC_PLL3P_IsEnabled+0x24>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c0:	d101      	bne.n	80053c6 <LL_RCC_PLL3P_IsEnabled+0x16>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <LL_RCC_PLL3P_IsEnabled+0x18>
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	58024400 	.word	0x58024400

080053d8 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 80053dc:	4b07      	ldr	r3, [pc, #28]	@ (80053fc <LL_RCC_PLL3Q_IsEnabled+0x24>)
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053e8:	d101      	bne.n	80053ee <LL_RCC_PLL3Q_IsEnabled+0x16>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <LL_RCC_PLL3Q_IsEnabled+0x18>
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	58024400 	.word	0x58024400

08005400 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8005404:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800540c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005410:	d101      	bne.n	8005416 <LL_RCC_PLL3R_IsEnabled+0x16>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <LL_RCC_PLL3R_IsEnabled+0x18>
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400

08005428 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800542c:	4b07      	ldr	r3, [pc, #28]	@ (800544c <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005438:	d101      	bne.n	800543e <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	58024400 	.word	0x58024400

08005450 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8005454:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <LL_RCC_PLL3_GetN+0x18>)
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545c:	3301      	adds	r3, #1
}
 800545e:	4618      	mov	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	58024400 	.word	0x58024400

0800546c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8005470:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <LL_RCC_PLL3_GetM+0x18>)
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	0d1b      	lsrs	r3, r3, #20
 8005476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800547a:	4618      	mov	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	58024400 	.word	0x58024400

08005488 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <LL_RCC_PLL3_GetP+0x1c>)
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	0a5b      	lsrs	r3, r3, #9
 8005492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005496:	3301      	adds	r3, #1
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	58024400 	.word	0x58024400

080054a8 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <LL_RCC_PLL3_GetQ+0x1c>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b6:	3301      	adds	r3, #1
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	58024400 	.word	0x58024400

080054c8 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 80054cc:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <LL_RCC_PLL3_GetR+0x1c>)
 80054ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054d6:	3301      	adds	r3, #1
}
 80054d8:	4618      	mov	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400

080054e8 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 80054ec:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <LL_RCC_PLL3_GetFRACN+0x18>)
 80054ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f0:	08db      	lsrs	r3, r3, #3
 80054f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	58024400 	.word	0x58024400

08005504 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	@ 0x28
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8005514:	f7ff fdc6 	bl	80050a4 <LL_RCC_PLL_GetSource>
 8005518:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d01f      	beq.n	8005560 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d824      	bhi.n	8005570 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <LL_RCC_GetPLL1ClockFreq+0x30>
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d00e      	beq.n	8005550 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8005532:	e01d      	b.n	8005570 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8005534:	f7ff fcf8 	bl	8004f28 <LL_RCC_HSI_IsReady>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01a      	beq.n	8005574 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800553e:	f7ff fd05 	bl	8004f4c <LL_RCC_HSI_GetDivider>
 8005542:	4603      	mov	r3, r0
 8005544:	08db      	lsrs	r3, r3, #3
 8005546:	4a38      	ldr	r2, [pc, #224]	@ (8005628 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
 800554c:	61fb      	str	r3, [r7, #28]
      break;
 800554e:	e011      	b.n	8005574 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8005550:	f7ff fd0a 	bl	8004f68 <LL_RCC_CSI_IsReady>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800555a:	4b34      	ldr	r3, [pc, #208]	@ (800562c <LL_RCC_GetPLL1ClockFreq+0x128>)
 800555c:	61fb      	str	r3, [r7, #28]
      break;
 800555e:	e00b      	b.n	8005578 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8005560:	f7ff fcce 	bl	8004f00 <LL_RCC_HSE_IsReady>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800556a:	4b31      	ldr	r3, [pc, #196]	@ (8005630 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800556c:	61fb      	str	r3, [r7, #28]
      break;
 800556e:	e005      	b.n	800557c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8005570:	bf00      	nop
 8005572:	e004      	b.n	800557e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8005574:	bf00      	nop
 8005576:	e002      	b.n	800557e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8005578:	bf00      	nop
 800557a:	e000      	b.n	800557e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800557c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8005590:	f7ff fdf2 	bl	8005178 <LL_RCC_PLL1_GetM>
 8005594:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8005596:	f7ff fde1 	bl	800515c <LL_RCC_PLL1_GetN>
 800559a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800559c:	f7ff fdcc 	bl	8005138 <LL_RCC_PLL1FRACN_IsEnabled>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 80055a6:	f7ff fe25 	bl	80051f4 <LL_RCC_PLL1_GetFRACN>
 80055aa:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d035      	beq.n	800561e <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 80055b2:	f7ff fd85 	bl	80050c0 <LL_RCC_PLL1P_IsEnabled>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 80055bc:	f7ff fdea 	bl	8005194 <LL_RCC_PLL1_GetP>
 80055c0:	4603      	mov	r3, r0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6939      	ldr	r1, [r7, #16]
 80055ca:	69f8      	ldr	r0, [r7, #28]
 80055cc:	f000 f964 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 80055d6:	f7ff fd87 	bl	80050e8 <LL_RCC_PLL1Q_IsEnabled>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00c      	beq.n	80055fa <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 80055e0:	f7ff fde8 	bl	80051b4 <LL_RCC_PLL1_GetQ>
 80055e4:	4603      	mov	r3, r0
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6939      	ldr	r1, [r7, #16]
 80055ee:	69f8      	ldr	r0, [r7, #28]
 80055f0:	f000 f952 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 80055fa:	f7ff fd89 	bl	8005110 <LL_RCC_PLL1R_IsEnabled>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8005604:	f7ff fde6 	bl	80051d4 <LL_RCC_PLL1_GetR>
 8005608:	4603      	mov	r3, r0
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	6939      	ldr	r1, [r7, #16]
 8005612:	69f8      	ldr	r0, [r7, #28]
 8005614:	f000 f940 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	609a      	str	r2, [r3, #8]
    }
  }
}
 800561e:	bf00      	nop
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	03d09000 	.word	0x03d09000
 800562c:	003d0900 	.word	0x003d0900
 8005630:	017d7840 	.word	0x017d7840

08005634 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	@ 0x28
 8005638:	af02      	add	r7, sp, #8
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800563c:	2300      	movs	r3, #0
 800563e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8005644:	f7ff fd2e 	bl	80050a4 <LL_RCC_PLL_GetSource>
 8005648:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d01f      	beq.n	8005690 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d824      	bhi.n	80056a0 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <LL_RCC_GetPLL2ClockFreq+0x30>
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d00e      	beq.n	8005680 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8005662:	e01d      	b.n	80056a0 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8005664:	f7ff fc60 	bl	8004f28 <LL_RCC_HSI_IsReady>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01a      	beq.n	80056a4 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800566e:	f7ff fc6d 	bl	8004f4c <LL_RCC_HSI_GetDivider>
 8005672:	4603      	mov	r3, r0
 8005674:	08db      	lsrs	r3, r3, #3
 8005676:	4a38      	ldr	r2, [pc, #224]	@ (8005758 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	61fb      	str	r3, [r7, #28]
      break;
 800567e:	e011      	b.n	80056a4 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8005680:	f7ff fc72 	bl	8004f68 <LL_RCC_CSI_IsReady>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00e      	beq.n	80056a8 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800568a:	4b34      	ldr	r3, [pc, #208]	@ (800575c <LL_RCC_GetPLL2ClockFreq+0x128>)
 800568c:	61fb      	str	r3, [r7, #28]
      break;
 800568e:	e00b      	b.n	80056a8 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8005690:	f7ff fc36 	bl	8004f00 <LL_RCC_HSE_IsReady>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800569a:	4b31      	ldr	r3, [pc, #196]	@ (8005760 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800569c:	61fb      	str	r3, [r7, #28]
      break;
 800569e:	e005      	b.n	80056ac <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 80056a0:	bf00      	nop
 80056a2:	e004      	b.n	80056ae <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80056ac:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 80056c0:	f7ff fe16 	bl	80052f0 <LL_RCC_PLL2_GetM>
 80056c4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 80056c6:	f7ff fe05 	bl	80052d4 <LL_RCC_PLL2_GetN>
 80056ca:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 80056cc:	f7ff fdf0 	bl	80052b0 <LL_RCC_PLL2FRACN_IsEnabled>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 80056d6:	f7ff fe49 	bl	800536c <LL_RCC_PLL2_GetFRACN>
 80056da:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d035      	beq.n	800574e <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 80056e2:	f7ff fda9 	bl	8005238 <LL_RCC_PLL2P_IsEnabled>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00c      	beq.n	8005706 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 80056ec:	f7ff fe0e 	bl	800530c <LL_RCC_PLL2_GetP>
 80056f0:	4603      	mov	r3, r0
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	6939      	ldr	r1, [r7, #16]
 80056fa:	69f8      	ldr	r0, [r7, #28]
 80056fc:	f000 f8cc 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 8005700:	4602      	mov	r2, r0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005706:	f7ff fdab 	bl	8005260 <LL_RCC_PLL2Q_IsEnabled>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8005710:	f7ff fe0c 	bl	800532c <LL_RCC_PLL2_GetQ>
 8005714:	4603      	mov	r3, r0
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	6939      	ldr	r1, [r7, #16]
 800571e:	69f8      	ldr	r0, [r7, #28]
 8005720:	f000 f8ba 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800572a:	f7ff fdad 	bl	8005288 <LL_RCC_PLL2R_IsEnabled>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00c      	beq.n	800574e <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8005734:	f7ff fe0a 	bl	800534c <LL_RCC_PLL2_GetR>
 8005738:	4603      	mov	r3, r0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	6939      	ldr	r1, [r7, #16]
 8005742:	69f8      	ldr	r0, [r7, #28]
 8005744:	f000 f8a8 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
    }
  }
}
 800574e:	bf00      	nop
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	03d09000 	.word	0x03d09000
 800575c:	003d0900 	.word	0x003d0900
 8005760:	017d7840 	.word	0x017d7840

08005764 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	@ 0x28
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8005774:	f7ff fc96 	bl	80050a4 <LL_RCC_PLL_GetSource>
 8005778:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d01f      	beq.n	80057c0 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d824      	bhi.n	80057d0 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <LL_RCC_GetPLL3ClockFreq+0x30>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d00e      	beq.n	80057b0 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8005792:	e01d      	b.n	80057d0 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8005794:	f7ff fbc8 	bl	8004f28 <LL_RCC_HSI_IsReady>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01a      	beq.n	80057d4 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800579e:	f7ff fbd5 	bl	8004f4c <LL_RCC_HSI_GetDivider>
 80057a2:	4603      	mov	r3, r0
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	4a39      	ldr	r2, [pc, #228]	@ (800588c <LL_RCC_GetPLL3ClockFreq+0x128>)
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ac:	61fb      	str	r3, [r7, #28]
      break;
 80057ae:	e011      	b.n	80057d4 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80057b0:	f7ff fbda 	bl	8004f68 <LL_RCC_CSI_IsReady>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00e      	beq.n	80057d8 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80057ba:	4b35      	ldr	r3, [pc, #212]	@ (8005890 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 80057bc:	61fb      	str	r3, [r7, #28]
      break;
 80057be:	e00b      	b.n	80057d8 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80057c0:	f7ff fb9e 	bl	8004f00 <LL_RCC_HSE_IsReady>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80057ca:	4b32      	ldr	r3, [pc, #200]	@ (8005894 <LL_RCC_GetPLL3ClockFreq+0x130>)
 80057cc:	61fb      	str	r3, [r7, #28]
      break;
 80057ce:	e005      	b.n	80057dc <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 80057d0:	bf00      	nop
 80057d2:	e004      	b.n	80057de <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80057dc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 80057f0:	f7ff fe3c 	bl	800546c <LL_RCC_PLL3_GetM>
 80057f4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 80057f6:	f7ff fe2b 	bl	8005450 <LL_RCC_PLL3_GetN>
 80057fa:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80057fc:	f7ff fe14 	bl	8005428 <LL_RCC_PLL3FRACN_IsEnabled>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8005806:	f7ff fe6f 	bl	80054e8 <LL_RCC_PLL3_GetFRACN>
 800580a:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d038      	beq.n	8005884 <LL_RCC_GetPLL3ClockFreq+0x120>
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d035      	beq.n	8005884 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8005818:	f7ff fdca 	bl	80053b0 <LL_RCC_PLL3P_IsEnabled>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00c      	beq.n	800583c <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8005822:	f7ff fe31 	bl	8005488 <LL_RCC_PLL3_GetP>
 8005826:	4603      	mov	r3, r0
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	6939      	ldr	r1, [r7, #16]
 8005830:	69f8      	ldr	r0, [r7, #28]
 8005832:	f000 f831 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 8005836:	4602      	mov	r2, r0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800583c:	f7ff fdcc 	bl	80053d8 <LL_RCC_PLL3Q_IsEnabled>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8005846:	f7ff fe2f 	bl	80054a8 <LL_RCC_PLL3_GetQ>
 800584a:	4603      	mov	r3, r0
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	6939      	ldr	r1, [r7, #16]
 8005854:	69f8      	ldr	r0, [r7, #28]
 8005856:	f000 f81f 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 800585a:	4602      	mov	r2, r0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8005860:	f7ff fdce 	bl	8005400 <LL_RCC_PLL3R_IsEnabled>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800586a:	f7ff fe2d 	bl	80054c8 <LL_RCC_PLL3_GetR>
 800586e:	4603      	mov	r3, r0
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	69f8      	ldr	r0, [r7, #28]
 800587a:	f000 f80d 	bl	8005898 <LL_RCC_CalcPLLClockFreq>
 800587e:	4602      	mov	r2, r0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	609a      	str	r2, [r3, #8]
    }
  }
}
 8005884:	bf00      	nop
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	03d09000 	.word	0x03d09000
 8005890:	003d0900 	.word	0x003d0900
 8005894:	017d7840 	.word	0x017d7840

08005898 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	ee07 3a90 	vmov	s15, r3
 80058c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80058d2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8005914 <LL_RCC_CalcPLLClockFreq+0x7c>
 80058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058f0:	edd7 6a05 	vldr	s13, [r7, #20]
 80058f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f8:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80058fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005904:	ee17 3a90 	vmov	r3, s15
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	46000000 	.word	0x46000000

08005918 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fbb1 	bl	800508c <LL_RCC_GetUSARTClockSource>
 800592a:	4603      	mov	r3, r0
 800592c:	4a62      	ldr	r2, [pc, #392]	@ (8005ab8 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	f000 80a9 	beq.w	8005a86 <LL_RCC_GetUSARTClockFreq+0x16e>
 8005934:	4a60      	ldr	r2, [pc, #384]	@ (8005ab8 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	f200 80ae 	bhi.w	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 800593c:	4a5f      	ldr	r2, [pc, #380]	@ (8005abc <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	f000 80a1 	beq.w	8005a86 <LL_RCC_GetUSARTClockFreq+0x16e>
 8005944:	4a5d      	ldr	r2, [pc, #372]	@ (8005abc <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	f200 80a6 	bhi.w	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 800594c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ac0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	f000 8091 	beq.w	8005a76 <LL_RCC_GetUSARTClockFreq+0x15e>
 8005954:	4a5a      	ldr	r2, [pc, #360]	@ (8005ac0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f200 809e 	bhi.w	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 800595c:	4a59      	ldr	r2, [pc, #356]	@ (8005ac4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800595e:	4293      	cmp	r3, r2
 8005960:	f000 8089 	beq.w	8005a76 <LL_RCC_GetUSARTClockFreq+0x15e>
 8005964:	4a57      	ldr	r2, [pc, #348]	@ (8005ac4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8005966:	4293      	cmp	r3, r2
 8005968:	f200 8096 	bhi.w	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 800596c:	4a56      	ldr	r2, [pc, #344]	@ (8005ac8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d073      	beq.n	8005a5a <LL_RCC_GetUSARTClockFreq+0x142>
 8005972:	4a55      	ldr	r2, [pc, #340]	@ (8005ac8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	f200 808f 	bhi.w	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 800597a:	4a54      	ldr	r2, [pc, #336]	@ (8005acc <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d06c      	beq.n	8005a5a <LL_RCC_GetUSARTClockFreq+0x142>
 8005980:	4a52      	ldr	r2, [pc, #328]	@ (8005acc <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	f200 8088 	bhi.w	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 8005988:	4a51      	ldr	r2, [pc, #324]	@ (8005ad0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d058      	beq.n	8005a40 <LL_RCC_GetUSARTClockFreq+0x128>
 800598e:	4a50      	ldr	r2, [pc, #320]	@ (8005ad0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	f200 8081 	bhi.w	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 8005996:	4a4f      	ldr	r2, [pc, #316]	@ (8005ad4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d051      	beq.n	8005a40 <LL_RCC_GetUSARTClockFreq+0x128>
 800599c:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d87a      	bhi.n	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 80059a2:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d03e      	beq.n	8005a26 <LL_RCC_GetUSARTClockFreq+0x10e>
 80059a8:	4a4b      	ldr	r2, [pc, #300]	@ (8005ad8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d874      	bhi.n	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 80059ae:	4a4b      	ldr	r2, [pc, #300]	@ (8005adc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d038      	beq.n	8005a26 <LL_RCC_GetUSARTClockFreq+0x10e>
 80059b4:	4a49      	ldr	r2, [pc, #292]	@ (8005adc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d86e      	bhi.n	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
 80059ba:	4a49      	ldr	r2, [pc, #292]	@ (8005ae0 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01a      	beq.n	80059f6 <LL_RCC_GetUSARTClockFreq+0xde>
 80059c0:	4a48      	ldr	r2, [pc, #288]	@ (8005ae4 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d168      	bne.n	8005a98 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80059c6:	f000 f895 	bl	8005af4 <RCC_GetSystemClockFreq>
 80059ca:	4604      	mov	r4, r0
 80059cc:	f7ff fb00 	bl	8004fd0 <LL_RCC_GetSysPrescaler>
 80059d0:	4603      	mov	r3, r0
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	4a43      	ldr	r2, [pc, #268]	@ (8005ae8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80059da:	5cd3      	ldrb	r3, [r2, r3]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	fa24 f303 	lsr.w	r3, r4, r3
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f8e7 	bl	8005bb8 <RCC_GetHCLKClockFreq>
 80059ea:	4603      	mov	r3, r0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f911 	bl	8005c14 <RCC_GetPCLK2ClockFreq>
 80059f2:	6178      	str	r0, [r7, #20]
      break;
 80059f4:	e05b      	b.n	8005aae <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80059f6:	f000 f87d 	bl	8005af4 <RCC_GetSystemClockFreq>
 80059fa:	4604      	mov	r4, r0
 80059fc:	f7ff fae8 	bl	8004fd0 <LL_RCC_GetSysPrescaler>
 8005a00:	4603      	mov	r3, r0
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	4a37      	ldr	r2, [pc, #220]	@ (8005ae8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	fa24 f303 	lsr.w	r3, r4, r3
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f8cf 	bl	8005bb8 <RCC_GetHCLKClockFreq>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f8e1 	bl	8005be4 <RCC_GetPCLK1ClockFreq>
 8005a22:	6178      	str	r0, [r7, #20]
      break;
 8005a24:	e043      	b.n	8005aae <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8005a26:	f7ff fbf3 	bl	8005210 <LL_RCC_PLL2_IsReady>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d035      	beq.n	8005a9c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fdfd 	bl	8005634 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	617b      	str	r3, [r7, #20]
      }
      break;
 8005a3e:	e02d      	b.n	8005a9c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8005a40:	f7ff fca2 	bl	8005388 <LL_RCC_PLL3_IsReady>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d02a      	beq.n	8005aa0 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fe88 	bl	8005764 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	617b      	str	r3, [r7, #20]
      }
      break;
 8005a58:	e022      	b.n	8005aa0 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8005a5a:	f7ff fa65 	bl	8004f28 <LL_RCC_HSI_IsReady>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01f      	beq.n	8005aa4 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8005a64:	f7ff fa72 	bl	8004f4c <LL_RCC_HSI_GetDivider>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	08db      	lsrs	r3, r3, #3
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005aec <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8005a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a72:	617b      	str	r3, [r7, #20]
      }
      break;
 8005a74:	e016      	b.n	8005aa4 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8005a76:	f7ff fa77 	bl	8004f68 <LL_RCC_CSI_IsReady>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8005a80:	4b1b      	ldr	r3, [pc, #108]	@ (8005af0 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8005a82:	617b      	str	r3, [r7, #20]
      }
      break;
 8005a84:	e010      	b.n	8005aa8 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8005a86:	f7ff fa83 	bl	8004f90 <LL_RCC_LSE_IsReady>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8005a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a94:	617b      	str	r3, [r7, #20]
      }
      break;
 8005a96:	e009      	b.n	8005aac <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8005a98:	bf00      	nop
 8005a9a:	e008      	b.n	8005aae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005a9c:	bf00      	nop
 8005a9e:	e006      	b.n	8005aae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005aa0:	bf00      	nop
 8005aa2:	e004      	b.n	8005aae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005aa4:	bf00      	nop
 8005aa6:	e002      	b.n	8005aae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005aa8:	bf00      	nop
 8005aaa:	e000      	b.n	8005aae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005aac:	bf00      	nop
  }

  return usart_frequency;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd90      	pop	{r4, r7, pc}
 8005ab8:	07050308 	.word	0x07050308
 8005abc:	07050008 	.word	0x07050008
 8005ac0:	07040308 	.word	0x07040308
 8005ac4:	07040008 	.word	0x07040008
 8005ac8:	07030308 	.word	0x07030308
 8005acc:	07030008 	.word	0x07030008
 8005ad0:	07020308 	.word	0x07020308
 8005ad4:	07020008 	.word	0x07020008
 8005ad8:	07010308 	.word	0x07010308
 8005adc:	07010008 	.word	0x07010008
 8005ae0:	07000008 	.word	0x07000008
 8005ae4:	07000308 	.word	0x07000308
 8005ae8:	080088d4 	.word	0x080088d4
 8005aec:	03d09000 	.word	0x03d09000
 8005af0:	003d0900 	.word	0x003d0900

08005af4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005afe:	f7ff fa59 	bl	8004fb4 <LL_RCC_GetSysClkSource>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b18      	cmp	r3, #24
 8005b06:	d84b      	bhi.n	8005ba0 <RCC_GetSystemClockFreq+0xac>
 8005b08:	a201      	add	r2, pc, #4	@ (adr r2, 8005b10 <RCC_GetSystemClockFreq+0x1c>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b75 	.word	0x08005b75
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005ba1 	.word	0x08005ba1
 8005b1c:	08005ba1 	.word	0x08005ba1
 8005b20:	08005ba1 	.word	0x08005ba1
 8005b24:	08005ba1 	.word	0x08005ba1
 8005b28:	08005ba1 	.word	0x08005ba1
 8005b2c:	08005ba1 	.word	0x08005ba1
 8005b30:	08005b87 	.word	0x08005b87
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005ba1 	.word	0x08005ba1
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005ba1 	.word	0x08005ba1
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005ba1 	.word	0x08005ba1
 8005b58:	08005ba1 	.word	0x08005ba1
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005ba1 	.word	0x08005ba1
 8005b64:	08005ba1 	.word	0x08005ba1
 8005b68:	08005ba1 	.word	0x08005ba1
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005b93 	.word	0x08005b93
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8005b74:	f7ff f9ea 	bl	8004f4c <LL_RCC_HSI_GetDivider>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	08db      	lsrs	r3, r3, #3
 8005b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8005bac <RCC_GetSystemClockFreq+0xb8>)
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	60fb      	str	r3, [r7, #12]
      break;
 8005b84:	e00d      	b.n	8005ba2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <RCC_GetSystemClockFreq+0xbc>)
 8005b88:	60fb      	str	r3, [r7, #12]
      break;
 8005b8a:	e00a      	b.n	8005ba2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8005b8c:	4b09      	ldr	r3, [pc, #36]	@ (8005bb4 <RCC_GetSystemClockFreq+0xc0>)
 8005b8e:	60fb      	str	r3, [r7, #12]
      break;
 8005b90:	e007      	b.n	8005ba2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8005b92:	463b      	mov	r3, r7
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fcb5 	bl	8005504 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	60fb      	str	r3, [r7, #12]
      break;
 8005b9e:	e000      	b.n	8005ba2 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8005ba0:	bf00      	nop
  }

  return frequency;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	03d09000 	.word	0x03d09000
 8005bb0:	003d0900 	.word	0x003d0900
 8005bb4:	017d7840 	.word	0x017d7840

08005bb8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005bc0:	f7ff fa14 	bl	8004fec <LL_RCC_GetAHBPrescaler>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	4a05      	ldr	r2, [pc, #20]	@ (8005be0 <RCC_GetHCLKClockFreq+0x28>)
 8005bcc:	5cd3      	ldrb	r3, [r2, r3]
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	080088d4 	.word	0x080088d4

08005be4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005bec:	f7ff fa0c 	bl	8005008 <LL_RCC_GetAPB1Prescaler>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4a05      	ldr	r2, [pc, #20]	@ (8005c10 <RCC_GetPCLK1ClockFreq+0x2c>)
 8005bfa:	5cd3      	ldrb	r3, [r2, r3]
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	080088d4 	.word	0x080088d4

08005c14 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005c1c:	f7ff fa02 	bl	8005024 <LL_RCC_GetAPB2Prescaler>
 8005c20:	4603      	mov	r3, r0
 8005c22:	0a1b      	lsrs	r3, r3, #8
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	4a05      	ldr	r2, [pc, #20]	@ (8005c40 <RCC_GetPCLK2ClockFreq+0x2c>)
 8005c2a:	5cd3      	ldrb	r3, [r2, r3]
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	080088d4 	.word	0x080088d4

08005c44 <LL_USART_IsEnabled>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <LL_USART_IsEnabled+0x18>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <LL_USART_IsEnabled+0x1a>
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <LL_USART_SetPrescaler>:
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	f023 030f 	bic.w	r3, r3, #15
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	b292      	uxth	r2, r2
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <LL_USART_SetStopBitsLength>:
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_USART_SetHWFlowCtrl>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <LL_USART_SetBaudRate>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b0b      	cmp	r3, #11
 8005cf2:	d83c      	bhi.n	8005d6e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d039      	beq.n	8005d6e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d00:	d122      	bne.n	8005d48 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <LL_USART_SetBaudRate+0x9c>)
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	005a      	lsls	r2, r3, #1
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	441a      	add	r2, r3
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	60da      	str	r2, [r3, #12]
}
 8005d46:	e012      	b.n	8005d6e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <LL_USART_SetBaudRate+0x9c>)
 8005d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	441a      	add	r2, r3
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	60da      	str	r2, [r3, #12]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	080088e4 	.word	0x080088e4

08005d80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ff56 	bl	8005c44 <LL_USART_IsEnabled>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 8092 	bne.w	8005ec4 <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed0 <LL_USART_Init+0x150>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	6891      	ldr	r1, [r2, #8]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	6912      	ldr	r2, [r2, #16]
 8005db0:	4311      	orrs	r1, r2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	6952      	ldr	r2, [r2, #20]
 8005db6:	4311      	orrs	r1, r2
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	69d2      	ldr	r2, [r2, #28]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff ff61 	bl	8005c92 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff ff6e 	bl	8005cb8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a3d      	ldr	r2, [pc, #244]	@ (8005ed4 <LL_USART_Init+0x154>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d104      	bne.n	8005dee <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005de4:	483c      	ldr	r0, [pc, #240]	@ (8005ed8 <LL_USART_Init+0x158>)
 8005de6:	f7ff fd97 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005dea:	60b8      	str	r0, [r7, #8]
 8005dec:	e04f      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a3a      	ldr	r2, [pc, #232]	@ (8005edc <LL_USART_Init+0x15c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d104      	bne.n	8005e00 <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005df6:	483a      	ldr	r0, [pc, #232]	@ (8005ee0 <LL_USART_Init+0x160>)
 8005df8:	f7ff fd8e 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005dfc:	60b8      	str	r0, [r7, #8]
 8005dfe:	e046      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a38      	ldr	r2, [pc, #224]	@ (8005ee4 <LL_USART_Init+0x164>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d104      	bne.n	8005e12 <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005e08:	4835      	ldr	r0, [pc, #212]	@ (8005ee0 <LL_USART_Init+0x160>)
 8005e0a:	f7ff fd85 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e0e:	60b8      	str	r0, [r7, #8]
 8005e10:	e03d      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a34      	ldr	r2, [pc, #208]	@ (8005ee8 <LL_USART_Init+0x168>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d104      	bne.n	8005e24 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005e1a:	4831      	ldr	r0, [pc, #196]	@ (8005ee0 <LL_USART_Init+0x160>)
 8005e1c:	f7ff fd7c 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e20:	60b8      	str	r0, [r7, #8]
 8005e22:	e034      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a31      	ldr	r2, [pc, #196]	@ (8005eec <LL_USART_Init+0x16c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d104      	bne.n	8005e36 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005e2c:	482c      	ldr	r0, [pc, #176]	@ (8005ee0 <LL_USART_Init+0x160>)
 8005e2e:	f7ff fd73 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e32:	60b8      	str	r0, [r7, #8]
 8005e34:	e02b      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef0 <LL_USART_Init+0x170>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d104      	bne.n	8005e48 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005e3e:	4826      	ldr	r0, [pc, #152]	@ (8005ed8 <LL_USART_Init+0x158>)
 8005e40:	f7ff fd6a 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e44:	60b8      	str	r0, [r7, #8]
 8005e46:	e022      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef4 <LL_USART_Init+0x174>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d104      	bne.n	8005e5a <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005e50:	4823      	ldr	r0, [pc, #140]	@ (8005ee0 <LL_USART_Init+0x160>)
 8005e52:	f7ff fd61 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e56:	60b8      	str	r0, [r7, #8]
 8005e58:	e019      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ef8 <LL_USART_Init+0x178>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d104      	bne.n	8005e6c <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005e62:	481f      	ldr	r0, [pc, #124]	@ (8005ee0 <LL_USART_Init+0x160>)
 8005e64:	f7ff fd58 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e68:	60b8      	str	r0, [r7, #8]
 8005e6a:	e010      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a23      	ldr	r2, [pc, #140]	@ (8005efc <LL_USART_Init+0x17c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d104      	bne.n	8005e7e <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005e74:	4818      	ldr	r0, [pc, #96]	@ (8005ed8 <LL_USART_Init+0x158>)
 8005e76:	f7ff fd4f 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e7a:	60b8      	str	r0, [r7, #8]
 8005e7c:	e007      	b.n	8005e8e <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1f      	ldr	r2, [pc, #124]	@ (8005f00 <LL_USART_Init+0x180>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d103      	bne.n	8005e8e <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005e86:	4814      	ldr	r0, [pc, #80]	@ (8005ed8 <LL_USART_Init+0x158>)
 8005e88:	f7ff fd46 	bl	8005918 <LL_RCC_GetUSARTClockFreq>
 8005e8c:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d011      	beq.n	8005eb8 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00d      	beq.n	8005eb8 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff ff14 	bl	8005ce0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fed3 	bl	8005c6a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	efff69f3 	.word	0xefff69f3
 8005ed4:	40011000 	.word	0x40011000
 8005ed8:	07000308 	.word	0x07000308
 8005edc:	40004400 	.word	0x40004400
 8005ee0:	07000008 	.word	0x07000008
 8005ee4:	40004800 	.word	0x40004800
 8005ee8:	40004c00 	.word	0x40004c00
 8005eec:	40005000 	.word	0x40005000
 8005ef0:	40011400 	.word	0x40011400
 8005ef4:	40007800 	.word	0x40007800
 8005ef8:	40007c00 	.word	0x40007c00
 8005efc:	40011800 	.word	0x40011800
 8005f00:	40011c00 	.word	0x40011c00

08005f04 <__cvt>:
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	ed2d 8b02 	vpush	{d8}
 8005f0a:	eeb0 8b40 	vmov.f64	d8, d0
 8005f0e:	b085      	sub	sp, #20
 8005f10:	4617      	mov	r7, r2
 8005f12:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8005f14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f16:	ee18 2a90 	vmov	r2, s17
 8005f1a:	f025 0520 	bic.w	r5, r5, #32
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	bfb6      	itet	lt
 8005f22:	222d      	movlt	r2, #45	@ 0x2d
 8005f24:	2200      	movge	r2, #0
 8005f26:	eeb1 8b40 	vneglt.f64	d8, d0
 8005f2a:	2d46      	cmp	r5, #70	@ 0x46
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	d004      	beq.n	8005f3c <__cvt+0x38>
 8005f32:	2d45      	cmp	r5, #69	@ 0x45
 8005f34:	d100      	bne.n	8005f38 <__cvt+0x34>
 8005f36:	3401      	adds	r4, #1
 8005f38:	2102      	movs	r1, #2
 8005f3a:	e000      	b.n	8005f3e <__cvt+0x3a>
 8005f3c:	2103      	movs	r1, #3
 8005f3e:	ab03      	add	r3, sp, #12
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	ab02      	add	r3, sp, #8
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4622      	mov	r2, r4
 8005f48:	4633      	mov	r3, r6
 8005f4a:	eeb0 0b48 	vmov.f64	d0, d8
 8005f4e:	f000 ff1f 	bl	8006d90 <_dtoa_r>
 8005f52:	2d47      	cmp	r5, #71	@ 0x47
 8005f54:	d114      	bne.n	8005f80 <__cvt+0x7c>
 8005f56:	07fb      	lsls	r3, r7, #31
 8005f58:	d50a      	bpl.n	8005f70 <__cvt+0x6c>
 8005f5a:	1902      	adds	r2, r0, r4
 8005f5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	bf08      	it	eq
 8005f66:	9203      	streq	r2, [sp, #12]
 8005f68:	2130      	movs	r1, #48	@ 0x30
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d319      	bcc.n	8005fa4 <__cvt+0xa0>
 8005f70:	9b03      	ldr	r3, [sp, #12]
 8005f72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f74:	1a1b      	subs	r3, r3, r0
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	b005      	add	sp, #20
 8005f7a:	ecbd 8b02 	vpop	{d8}
 8005f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f80:	2d46      	cmp	r5, #70	@ 0x46
 8005f82:	eb00 0204 	add.w	r2, r0, r4
 8005f86:	d1e9      	bne.n	8005f5c <__cvt+0x58>
 8005f88:	7803      	ldrb	r3, [r0, #0]
 8005f8a:	2b30      	cmp	r3, #48	@ 0x30
 8005f8c:	d107      	bne.n	8005f9e <__cvt+0x9a>
 8005f8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f96:	bf1c      	itt	ne
 8005f98:	f1c4 0401 	rsbne	r4, r4, #1
 8005f9c:	6034      	strne	r4, [r6, #0]
 8005f9e:	6833      	ldr	r3, [r6, #0]
 8005fa0:	441a      	add	r2, r3
 8005fa2:	e7db      	b.n	8005f5c <__cvt+0x58>
 8005fa4:	1c5c      	adds	r4, r3, #1
 8005fa6:	9403      	str	r4, [sp, #12]
 8005fa8:	7019      	strb	r1, [r3, #0]
 8005faa:	e7de      	b.n	8005f6a <__cvt+0x66>

08005fac <__exponent>:
 8005fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	bfba      	itte	lt
 8005fb2:	4249      	neglt	r1, r1
 8005fb4:	232d      	movlt	r3, #45	@ 0x2d
 8005fb6:	232b      	movge	r3, #43	@ 0x2b
 8005fb8:	2909      	cmp	r1, #9
 8005fba:	7002      	strb	r2, [r0, #0]
 8005fbc:	7043      	strb	r3, [r0, #1]
 8005fbe:	dd29      	ble.n	8006014 <__exponent+0x68>
 8005fc0:	f10d 0307 	add.w	r3, sp, #7
 8005fc4:	461d      	mov	r5, r3
 8005fc6:	270a      	movs	r7, #10
 8005fc8:	461a      	mov	r2, r3
 8005fca:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fce:	fb07 1416 	mls	r4, r7, r6, r1
 8005fd2:	3430      	adds	r4, #48	@ 0x30
 8005fd4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fd8:	460c      	mov	r4, r1
 8005fda:	2c63      	cmp	r4, #99	@ 0x63
 8005fdc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	dcf1      	bgt.n	8005fc8 <__exponent+0x1c>
 8005fe4:	3130      	adds	r1, #48	@ 0x30
 8005fe6:	1e94      	subs	r4, r2, #2
 8005fe8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fec:	1c41      	adds	r1, r0, #1
 8005fee:	4623      	mov	r3, r4
 8005ff0:	42ab      	cmp	r3, r5
 8005ff2:	d30a      	bcc.n	800600a <__exponent+0x5e>
 8005ff4:	f10d 0309 	add.w	r3, sp, #9
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	42ac      	cmp	r4, r5
 8005ffc:	bf88      	it	hi
 8005ffe:	2300      	movhi	r3, #0
 8006000:	3302      	adds	r3, #2
 8006002:	4403      	add	r3, r0
 8006004:	1a18      	subs	r0, r3, r0
 8006006:	b003      	add	sp, #12
 8006008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800600a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800600e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006012:	e7ed      	b.n	8005ff0 <__exponent+0x44>
 8006014:	2330      	movs	r3, #48	@ 0x30
 8006016:	3130      	adds	r1, #48	@ 0x30
 8006018:	7083      	strb	r3, [r0, #2]
 800601a:	70c1      	strb	r1, [r0, #3]
 800601c:	1d03      	adds	r3, r0, #4
 800601e:	e7f1      	b.n	8006004 <__exponent+0x58>

08006020 <_printf_float>:
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	b08d      	sub	sp, #52	@ 0x34
 8006026:	460c      	mov	r4, r1
 8006028:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800602c:	4616      	mov	r6, r2
 800602e:	461f      	mov	r7, r3
 8006030:	4605      	mov	r5, r0
 8006032:	f000 fdad 	bl	8006b90 <_localeconv_r>
 8006036:	f8d0 b000 	ldr.w	fp, [r0]
 800603a:	4658      	mov	r0, fp
 800603c:	f7fa f9b8 	bl	80003b0 <strlen>
 8006040:	2300      	movs	r3, #0
 8006042:	930a      	str	r3, [sp, #40]	@ 0x28
 8006044:	f8d8 3000 	ldr.w	r3, [r8]
 8006048:	f894 9018 	ldrb.w	r9, [r4, #24]
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	9005      	str	r0, [sp, #20]
 8006050:	3307      	adds	r3, #7
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	f103 0108 	add.w	r1, r3, #8
 800605a:	f8c8 1000 	str.w	r1, [r8]
 800605e:	ed93 0b00 	vldr	d0, [r3]
 8006062:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80062c0 <_printf_float+0x2a0>
 8006066:	eeb0 7bc0 	vabs.f64	d7, d0
 800606a:	eeb4 7b46 	vcmp.f64	d7, d6
 800606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006072:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006076:	dd24      	ble.n	80060c2 <_printf_float+0xa2>
 8006078:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800607c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006080:	d502      	bpl.n	8006088 <_printf_float+0x68>
 8006082:	232d      	movs	r3, #45	@ 0x2d
 8006084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006088:	498f      	ldr	r1, [pc, #572]	@ (80062c8 <_printf_float+0x2a8>)
 800608a:	4b90      	ldr	r3, [pc, #576]	@ (80062cc <_printf_float+0x2ac>)
 800608c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006090:	bf8c      	ite	hi
 8006092:	4688      	movhi	r8, r1
 8006094:	4698      	movls	r8, r3
 8006096:	f022 0204 	bic.w	r2, r2, #4
 800609a:	2303      	movs	r3, #3
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	f04f 0a00 	mov.w	sl, #0
 80060a4:	9700      	str	r7, [sp, #0]
 80060a6:	4633      	mov	r3, r6
 80060a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 f9d1 	bl	8006454 <_printf_common>
 80060b2:	3001      	adds	r0, #1
 80060b4:	f040 8089 	bne.w	80061ca <_printf_float+0x1aa>
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060bc:	b00d      	add	sp, #52	@ 0x34
 80060be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80060c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ca:	d709      	bvc.n	80060e0 <_printf_float+0xc0>
 80060cc:	ee10 3a90 	vmov	r3, s1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bfbc      	itt	lt
 80060d4:	232d      	movlt	r3, #45	@ 0x2d
 80060d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060da:	497d      	ldr	r1, [pc, #500]	@ (80062d0 <_printf_float+0x2b0>)
 80060dc:	4b7d      	ldr	r3, [pc, #500]	@ (80062d4 <_printf_float+0x2b4>)
 80060de:	e7d5      	b.n	800608c <_printf_float+0x6c>
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80060e8:	d139      	bne.n	800615e <_printf_float+0x13e>
 80060ea:	2306      	movs	r3, #6
 80060ec:	6063      	str	r3, [r4, #4]
 80060ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060f2:	2300      	movs	r3, #0
 80060f4:	6022      	str	r2, [r4, #0]
 80060f6:	9303      	str	r3, [sp, #12]
 80060f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80060fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80060fe:	ab09      	add	r3, sp, #36	@ 0x24
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	6861      	ldr	r1, [r4, #4]
 8006104:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006108:	4628      	mov	r0, r5
 800610a:	f7ff fefb 	bl	8005f04 <__cvt>
 800610e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006112:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006114:	4680      	mov	r8, r0
 8006116:	d129      	bne.n	800616c <_printf_float+0x14c>
 8006118:	1cc8      	adds	r0, r1, #3
 800611a:	db02      	blt.n	8006122 <_printf_float+0x102>
 800611c:	6863      	ldr	r3, [r4, #4]
 800611e:	4299      	cmp	r1, r3
 8006120:	dd41      	ble.n	80061a6 <_printf_float+0x186>
 8006122:	f1a9 0902 	sub.w	r9, r9, #2
 8006126:	fa5f f989 	uxtb.w	r9, r9
 800612a:	3901      	subs	r1, #1
 800612c:	464a      	mov	r2, r9
 800612e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006132:	9109      	str	r1, [sp, #36]	@ 0x24
 8006134:	f7ff ff3a 	bl	8005fac <__exponent>
 8006138:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800613a:	1813      	adds	r3, r2, r0
 800613c:	2a01      	cmp	r2, #1
 800613e:	4682      	mov	sl, r0
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	dc02      	bgt.n	800614a <_printf_float+0x12a>
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	07d2      	lsls	r2, r2, #31
 8006148:	d501      	bpl.n	800614e <_printf_float+0x12e>
 800614a:	3301      	adds	r3, #1
 800614c:	6123      	str	r3, [r4, #16]
 800614e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0a6      	beq.n	80060a4 <_printf_float+0x84>
 8006156:	232d      	movs	r3, #45	@ 0x2d
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615c:	e7a2      	b.n	80060a4 <_printf_float+0x84>
 800615e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006162:	d1c4      	bne.n	80060ee <_printf_float+0xce>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1c2      	bne.n	80060ee <_printf_float+0xce>
 8006168:	2301      	movs	r3, #1
 800616a:	e7bf      	b.n	80060ec <_printf_float+0xcc>
 800616c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006170:	d9db      	bls.n	800612a <_printf_float+0x10a>
 8006172:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006176:	d118      	bne.n	80061aa <_printf_float+0x18a>
 8006178:	2900      	cmp	r1, #0
 800617a:	6863      	ldr	r3, [r4, #4]
 800617c:	dd0b      	ble.n	8006196 <_printf_float+0x176>
 800617e:	6121      	str	r1, [r4, #16]
 8006180:	b913      	cbnz	r3, 8006188 <_printf_float+0x168>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	07d0      	lsls	r0, r2, #31
 8006186:	d502      	bpl.n	800618e <_printf_float+0x16e>
 8006188:	3301      	adds	r3, #1
 800618a:	440b      	add	r3, r1
 800618c:	6123      	str	r3, [r4, #16]
 800618e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006190:	f04f 0a00 	mov.w	sl, #0
 8006194:	e7db      	b.n	800614e <_printf_float+0x12e>
 8006196:	b913      	cbnz	r3, 800619e <_printf_float+0x17e>
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	07d2      	lsls	r2, r2, #31
 800619c:	d501      	bpl.n	80061a2 <_printf_float+0x182>
 800619e:	3302      	adds	r3, #2
 80061a0:	e7f4      	b.n	800618c <_printf_float+0x16c>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7f2      	b.n	800618c <_printf_float+0x16c>
 80061a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80061aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ac:	4299      	cmp	r1, r3
 80061ae:	db05      	blt.n	80061bc <_printf_float+0x19c>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	6121      	str	r1, [r4, #16]
 80061b4:	07d8      	lsls	r0, r3, #31
 80061b6:	d5ea      	bpl.n	800618e <_printf_float+0x16e>
 80061b8:	1c4b      	adds	r3, r1, #1
 80061ba:	e7e7      	b.n	800618c <_printf_float+0x16c>
 80061bc:	2900      	cmp	r1, #0
 80061be:	bfd4      	ite	le
 80061c0:	f1c1 0202 	rsble	r2, r1, #2
 80061c4:	2201      	movgt	r2, #1
 80061c6:	4413      	add	r3, r2
 80061c8:	e7e0      	b.n	800618c <_printf_float+0x16c>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	055a      	lsls	r2, r3, #21
 80061ce:	d407      	bmi.n	80061e0 <_printf_float+0x1c0>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	4642      	mov	r2, r8
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	d12a      	bne.n	8006234 <_printf_float+0x214>
 80061de:	e76b      	b.n	80060b8 <_printf_float+0x98>
 80061e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80061e4:	f240 80e0 	bls.w	80063a8 <_printf_float+0x388>
 80061e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80061ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80061f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f4:	d133      	bne.n	800625e <_printf_float+0x23e>
 80061f6:	4a38      	ldr	r2, [pc, #224]	@ (80062d8 <_printf_float+0x2b8>)
 80061f8:	2301      	movs	r3, #1
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	f43f af59 	beq.w	80060b8 <_printf_float+0x98>
 8006206:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800620a:	4543      	cmp	r3, r8
 800620c:	db02      	blt.n	8006214 <_printf_float+0x1f4>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	07d8      	lsls	r0, r3, #31
 8006212:	d50f      	bpl.n	8006234 <_printf_float+0x214>
 8006214:	9b05      	ldr	r3, [sp, #20]
 8006216:	465a      	mov	r2, fp
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	f43f af4a 	beq.w	80060b8 <_printf_float+0x98>
 8006224:	f04f 0900 	mov.w	r9, #0
 8006228:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800622c:	f104 0a1a 	add.w	sl, r4, #26
 8006230:	45c8      	cmp	r8, r9
 8006232:	dc09      	bgt.n	8006248 <_printf_float+0x228>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	079b      	lsls	r3, r3, #30
 8006238:	f100 8107 	bmi.w	800644a <_printf_float+0x42a>
 800623c:	68e0      	ldr	r0, [r4, #12]
 800623e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006240:	4298      	cmp	r0, r3
 8006242:	bfb8      	it	lt
 8006244:	4618      	movlt	r0, r3
 8006246:	e739      	b.n	80060bc <_printf_float+0x9c>
 8006248:	2301      	movs	r3, #1
 800624a:	4652      	mov	r2, sl
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	47b8      	blx	r7
 8006252:	3001      	adds	r0, #1
 8006254:	f43f af30 	beq.w	80060b8 <_printf_float+0x98>
 8006258:	f109 0901 	add.w	r9, r9, #1
 800625c:	e7e8      	b.n	8006230 <_printf_float+0x210>
 800625e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	dc3b      	bgt.n	80062dc <_printf_float+0x2bc>
 8006264:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <_printf_float+0x2b8>)
 8006266:	2301      	movs	r3, #1
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f af22 	beq.w	80060b8 <_printf_float+0x98>
 8006274:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006278:	ea59 0303 	orrs.w	r3, r9, r3
 800627c:	d102      	bne.n	8006284 <_printf_float+0x264>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	07d9      	lsls	r1, r3, #31
 8006282:	d5d7      	bpl.n	8006234 <_printf_float+0x214>
 8006284:	9b05      	ldr	r3, [sp, #20]
 8006286:	465a      	mov	r2, fp
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f af12 	beq.w	80060b8 <_printf_float+0x98>
 8006294:	f04f 0a00 	mov.w	sl, #0
 8006298:	f104 0b1a 	add.w	fp, r4, #26
 800629c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800629e:	425b      	negs	r3, r3
 80062a0:	4553      	cmp	r3, sl
 80062a2:	dc01      	bgt.n	80062a8 <_printf_float+0x288>
 80062a4:	464b      	mov	r3, r9
 80062a6:	e794      	b.n	80061d2 <_printf_float+0x1b2>
 80062a8:	2301      	movs	r3, #1
 80062aa:	465a      	mov	r2, fp
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	f43f af00 	beq.w	80060b8 <_printf_float+0x98>
 80062b8:	f10a 0a01 	add.w	sl, sl, #1
 80062bc:	e7ee      	b.n	800629c <_printf_float+0x27c>
 80062be:	bf00      	nop
 80062c0:	ffffffff 	.word	0xffffffff
 80062c4:	7fefffff 	.word	0x7fefffff
 80062c8:	08008918 	.word	0x08008918
 80062cc:	08008914 	.word	0x08008914
 80062d0:	08008920 	.word	0x08008920
 80062d4:	0800891c 	.word	0x0800891c
 80062d8:	08008924 	.word	0x08008924
 80062dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062e2:	4553      	cmp	r3, sl
 80062e4:	bfa8      	it	ge
 80062e6:	4653      	movge	r3, sl
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	4699      	mov	r9, r3
 80062ec:	dc37      	bgt.n	800635e <_printf_float+0x33e>
 80062ee:	2300      	movs	r3, #0
 80062f0:	9307      	str	r3, [sp, #28]
 80062f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062f6:	f104 021a 	add.w	r2, r4, #26
 80062fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062fc:	9907      	ldr	r1, [sp, #28]
 80062fe:	9306      	str	r3, [sp, #24]
 8006300:	eba3 0309 	sub.w	r3, r3, r9
 8006304:	428b      	cmp	r3, r1
 8006306:	dc31      	bgt.n	800636c <_printf_float+0x34c>
 8006308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630a:	459a      	cmp	sl, r3
 800630c:	dc3b      	bgt.n	8006386 <_printf_float+0x366>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	07da      	lsls	r2, r3, #31
 8006312:	d438      	bmi.n	8006386 <_printf_float+0x366>
 8006314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006316:	ebaa 0903 	sub.w	r9, sl, r3
 800631a:	9b06      	ldr	r3, [sp, #24]
 800631c:	ebaa 0303 	sub.w	r3, sl, r3
 8006320:	4599      	cmp	r9, r3
 8006322:	bfa8      	it	ge
 8006324:	4699      	movge	r9, r3
 8006326:	f1b9 0f00 	cmp.w	r9, #0
 800632a:	dc34      	bgt.n	8006396 <_printf_float+0x376>
 800632c:	f04f 0800 	mov.w	r8, #0
 8006330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006334:	f104 0b1a 	add.w	fp, r4, #26
 8006338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633a:	ebaa 0303 	sub.w	r3, sl, r3
 800633e:	eba3 0309 	sub.w	r3, r3, r9
 8006342:	4543      	cmp	r3, r8
 8006344:	f77f af76 	ble.w	8006234 <_printf_float+0x214>
 8006348:	2301      	movs	r3, #1
 800634a:	465a      	mov	r2, fp
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f aeb0 	beq.w	80060b8 <_printf_float+0x98>
 8006358:	f108 0801 	add.w	r8, r8, #1
 800635c:	e7ec      	b.n	8006338 <_printf_float+0x318>
 800635e:	4642      	mov	r2, r8
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	d1c1      	bne.n	80062ee <_printf_float+0x2ce>
 800636a:	e6a5      	b.n	80060b8 <_printf_float+0x98>
 800636c:	2301      	movs	r3, #1
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	9206      	str	r2, [sp, #24]
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f ae9e 	beq.w	80060b8 <_printf_float+0x98>
 800637c:	9b07      	ldr	r3, [sp, #28]
 800637e:	9a06      	ldr	r2, [sp, #24]
 8006380:	3301      	adds	r3, #1
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	e7b9      	b.n	80062fa <_printf_float+0x2da>
 8006386:	9b05      	ldr	r3, [sp, #20]
 8006388:	465a      	mov	r2, fp
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	d1bf      	bne.n	8006314 <_printf_float+0x2f4>
 8006394:	e690      	b.n	80060b8 <_printf_float+0x98>
 8006396:	9a06      	ldr	r2, [sp, #24]
 8006398:	464b      	mov	r3, r9
 800639a:	4442      	add	r2, r8
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	d1c2      	bne.n	800632c <_printf_float+0x30c>
 80063a6:	e687      	b.n	80060b8 <_printf_float+0x98>
 80063a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80063ac:	f1b9 0f01 	cmp.w	r9, #1
 80063b0:	dc01      	bgt.n	80063b6 <_printf_float+0x396>
 80063b2:	07db      	lsls	r3, r3, #31
 80063b4:	d536      	bpl.n	8006424 <_printf_float+0x404>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4642      	mov	r2, r8
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	47b8      	blx	r7
 80063c0:	3001      	adds	r0, #1
 80063c2:	f43f ae79 	beq.w	80060b8 <_printf_float+0x98>
 80063c6:	9b05      	ldr	r3, [sp, #20]
 80063c8:	465a      	mov	r2, fp
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f ae71 	beq.w	80060b8 <_printf_float+0x98>
 80063d6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80063da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80063e6:	d018      	beq.n	800641a <_printf_float+0x3fa>
 80063e8:	464b      	mov	r3, r9
 80063ea:	f108 0201 	add.w	r2, r8, #1
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	d10c      	bne.n	8006412 <_printf_float+0x3f2>
 80063f8:	e65e      	b.n	80060b8 <_printf_float+0x98>
 80063fa:	2301      	movs	r3, #1
 80063fc:	465a      	mov	r2, fp
 80063fe:	4631      	mov	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	47b8      	blx	r7
 8006404:	3001      	adds	r0, #1
 8006406:	f43f ae57 	beq.w	80060b8 <_printf_float+0x98>
 800640a:	f108 0801 	add.w	r8, r8, #1
 800640e:	45c8      	cmp	r8, r9
 8006410:	dbf3      	blt.n	80063fa <_printf_float+0x3da>
 8006412:	4653      	mov	r3, sl
 8006414:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006418:	e6dc      	b.n	80061d4 <_printf_float+0x1b4>
 800641a:	f04f 0800 	mov.w	r8, #0
 800641e:	f104 0b1a 	add.w	fp, r4, #26
 8006422:	e7f4      	b.n	800640e <_printf_float+0x3ee>
 8006424:	2301      	movs	r3, #1
 8006426:	4642      	mov	r2, r8
 8006428:	e7e1      	b.n	80063ee <_printf_float+0x3ce>
 800642a:	2301      	movs	r3, #1
 800642c:	464a      	mov	r2, r9
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f ae3f 	beq.w	80060b8 <_printf_float+0x98>
 800643a:	f108 0801 	add.w	r8, r8, #1
 800643e:	68e3      	ldr	r3, [r4, #12]
 8006440:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006442:	1a5b      	subs	r3, r3, r1
 8006444:	4543      	cmp	r3, r8
 8006446:	dcf0      	bgt.n	800642a <_printf_float+0x40a>
 8006448:	e6f8      	b.n	800623c <_printf_float+0x21c>
 800644a:	f04f 0800 	mov.w	r8, #0
 800644e:	f104 0919 	add.w	r9, r4, #25
 8006452:	e7f4      	b.n	800643e <_printf_float+0x41e>

08006454 <_printf_common>:
 8006454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006458:	4616      	mov	r6, r2
 800645a:	4698      	mov	r8, r3
 800645c:	688a      	ldr	r2, [r1, #8]
 800645e:	690b      	ldr	r3, [r1, #16]
 8006460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006464:	4293      	cmp	r3, r2
 8006466:	bfb8      	it	lt
 8006468:	4613      	movlt	r3, r2
 800646a:	6033      	str	r3, [r6, #0]
 800646c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006470:	4607      	mov	r7, r0
 8006472:	460c      	mov	r4, r1
 8006474:	b10a      	cbz	r2, 800647a <_printf_common+0x26>
 8006476:	3301      	adds	r3, #1
 8006478:	6033      	str	r3, [r6, #0]
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	0699      	lsls	r1, r3, #26
 800647e:	bf42      	ittt	mi
 8006480:	6833      	ldrmi	r3, [r6, #0]
 8006482:	3302      	addmi	r3, #2
 8006484:	6033      	strmi	r3, [r6, #0]
 8006486:	6825      	ldr	r5, [r4, #0]
 8006488:	f015 0506 	ands.w	r5, r5, #6
 800648c:	d106      	bne.n	800649c <_printf_common+0x48>
 800648e:	f104 0a19 	add.w	sl, r4, #25
 8006492:	68e3      	ldr	r3, [r4, #12]
 8006494:	6832      	ldr	r2, [r6, #0]
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	42ab      	cmp	r3, r5
 800649a:	dc26      	bgt.n	80064ea <_printf_common+0x96>
 800649c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	3b00      	subs	r3, #0
 80064a4:	bf18      	it	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	0692      	lsls	r2, r2, #26
 80064aa:	d42b      	bmi.n	8006504 <_printf_common+0xb0>
 80064ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064b0:	4641      	mov	r1, r8
 80064b2:	4638      	mov	r0, r7
 80064b4:	47c8      	blx	r9
 80064b6:	3001      	adds	r0, #1
 80064b8:	d01e      	beq.n	80064f8 <_printf_common+0xa4>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	6922      	ldr	r2, [r4, #16]
 80064be:	f003 0306 	and.w	r3, r3, #6
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	bf02      	ittt	eq
 80064c6:	68e5      	ldreq	r5, [r4, #12]
 80064c8:	6833      	ldreq	r3, [r6, #0]
 80064ca:	1aed      	subeq	r5, r5, r3
 80064cc:	68a3      	ldr	r3, [r4, #8]
 80064ce:	bf0c      	ite	eq
 80064d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064d4:	2500      	movne	r5, #0
 80064d6:	4293      	cmp	r3, r2
 80064d8:	bfc4      	itt	gt
 80064da:	1a9b      	subgt	r3, r3, r2
 80064dc:	18ed      	addgt	r5, r5, r3
 80064de:	2600      	movs	r6, #0
 80064e0:	341a      	adds	r4, #26
 80064e2:	42b5      	cmp	r5, r6
 80064e4:	d11a      	bne.n	800651c <_printf_common+0xc8>
 80064e6:	2000      	movs	r0, #0
 80064e8:	e008      	b.n	80064fc <_printf_common+0xa8>
 80064ea:	2301      	movs	r3, #1
 80064ec:	4652      	mov	r2, sl
 80064ee:	4641      	mov	r1, r8
 80064f0:	4638      	mov	r0, r7
 80064f2:	47c8      	blx	r9
 80064f4:	3001      	adds	r0, #1
 80064f6:	d103      	bne.n	8006500 <_printf_common+0xac>
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006500:	3501      	adds	r5, #1
 8006502:	e7c6      	b.n	8006492 <_printf_common+0x3e>
 8006504:	18e1      	adds	r1, r4, r3
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	2030      	movs	r0, #48	@ 0x30
 800650a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800650e:	4422      	add	r2, r4
 8006510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006518:	3302      	adds	r3, #2
 800651a:	e7c7      	b.n	80064ac <_printf_common+0x58>
 800651c:	2301      	movs	r3, #1
 800651e:	4622      	mov	r2, r4
 8006520:	4641      	mov	r1, r8
 8006522:	4638      	mov	r0, r7
 8006524:	47c8      	blx	r9
 8006526:	3001      	adds	r0, #1
 8006528:	d0e6      	beq.n	80064f8 <_printf_common+0xa4>
 800652a:	3601      	adds	r6, #1
 800652c:	e7d9      	b.n	80064e2 <_printf_common+0x8e>
	...

08006530 <_printf_i>:
 8006530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	7e0f      	ldrb	r7, [r1, #24]
 8006536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006538:	2f78      	cmp	r7, #120	@ 0x78
 800653a:	4691      	mov	r9, r2
 800653c:	4680      	mov	r8, r0
 800653e:	460c      	mov	r4, r1
 8006540:	469a      	mov	sl, r3
 8006542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006546:	d807      	bhi.n	8006558 <_printf_i+0x28>
 8006548:	2f62      	cmp	r7, #98	@ 0x62
 800654a:	d80a      	bhi.n	8006562 <_printf_i+0x32>
 800654c:	2f00      	cmp	r7, #0
 800654e:	f000 80d1 	beq.w	80066f4 <_printf_i+0x1c4>
 8006552:	2f58      	cmp	r7, #88	@ 0x58
 8006554:	f000 80b8 	beq.w	80066c8 <_printf_i+0x198>
 8006558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800655c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006560:	e03a      	b.n	80065d8 <_printf_i+0xa8>
 8006562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006566:	2b15      	cmp	r3, #21
 8006568:	d8f6      	bhi.n	8006558 <_printf_i+0x28>
 800656a:	a101      	add	r1, pc, #4	@ (adr r1, 8006570 <_printf_i+0x40>)
 800656c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006570:	080065c9 	.word	0x080065c9
 8006574:	080065dd 	.word	0x080065dd
 8006578:	08006559 	.word	0x08006559
 800657c:	08006559 	.word	0x08006559
 8006580:	08006559 	.word	0x08006559
 8006584:	08006559 	.word	0x08006559
 8006588:	080065dd 	.word	0x080065dd
 800658c:	08006559 	.word	0x08006559
 8006590:	08006559 	.word	0x08006559
 8006594:	08006559 	.word	0x08006559
 8006598:	08006559 	.word	0x08006559
 800659c:	080066db 	.word	0x080066db
 80065a0:	08006607 	.word	0x08006607
 80065a4:	08006695 	.word	0x08006695
 80065a8:	08006559 	.word	0x08006559
 80065ac:	08006559 	.word	0x08006559
 80065b0:	080066fd 	.word	0x080066fd
 80065b4:	08006559 	.word	0x08006559
 80065b8:	08006607 	.word	0x08006607
 80065bc:	08006559 	.word	0x08006559
 80065c0:	08006559 	.word	0x08006559
 80065c4:	0800669d 	.word	0x0800669d
 80065c8:	6833      	ldr	r3, [r6, #0]
 80065ca:	1d1a      	adds	r2, r3, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6032      	str	r2, [r6, #0]
 80065d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065d8:	2301      	movs	r3, #1
 80065da:	e09c      	b.n	8006716 <_printf_i+0x1e6>
 80065dc:	6833      	ldr	r3, [r6, #0]
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	1d19      	adds	r1, r3, #4
 80065e2:	6031      	str	r1, [r6, #0]
 80065e4:	0606      	lsls	r6, r0, #24
 80065e6:	d501      	bpl.n	80065ec <_printf_i+0xbc>
 80065e8:	681d      	ldr	r5, [r3, #0]
 80065ea:	e003      	b.n	80065f4 <_printf_i+0xc4>
 80065ec:	0645      	lsls	r5, r0, #25
 80065ee:	d5fb      	bpl.n	80065e8 <_printf_i+0xb8>
 80065f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	da03      	bge.n	8006600 <_printf_i+0xd0>
 80065f8:	232d      	movs	r3, #45	@ 0x2d
 80065fa:	426d      	negs	r5, r5
 80065fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006600:	4858      	ldr	r0, [pc, #352]	@ (8006764 <_printf_i+0x234>)
 8006602:	230a      	movs	r3, #10
 8006604:	e011      	b.n	800662a <_printf_i+0xfa>
 8006606:	6821      	ldr	r1, [r4, #0]
 8006608:	6833      	ldr	r3, [r6, #0]
 800660a:	0608      	lsls	r0, r1, #24
 800660c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006610:	d402      	bmi.n	8006618 <_printf_i+0xe8>
 8006612:	0649      	lsls	r1, r1, #25
 8006614:	bf48      	it	mi
 8006616:	b2ad      	uxthmi	r5, r5
 8006618:	2f6f      	cmp	r7, #111	@ 0x6f
 800661a:	4852      	ldr	r0, [pc, #328]	@ (8006764 <_printf_i+0x234>)
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	bf14      	ite	ne
 8006620:	230a      	movne	r3, #10
 8006622:	2308      	moveq	r3, #8
 8006624:	2100      	movs	r1, #0
 8006626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800662a:	6866      	ldr	r6, [r4, #4]
 800662c:	60a6      	str	r6, [r4, #8]
 800662e:	2e00      	cmp	r6, #0
 8006630:	db05      	blt.n	800663e <_printf_i+0x10e>
 8006632:	6821      	ldr	r1, [r4, #0]
 8006634:	432e      	orrs	r6, r5
 8006636:	f021 0104 	bic.w	r1, r1, #4
 800663a:	6021      	str	r1, [r4, #0]
 800663c:	d04b      	beq.n	80066d6 <_printf_i+0x1a6>
 800663e:	4616      	mov	r6, r2
 8006640:	fbb5 f1f3 	udiv	r1, r5, r3
 8006644:	fb03 5711 	mls	r7, r3, r1, r5
 8006648:	5dc7      	ldrb	r7, [r0, r7]
 800664a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800664e:	462f      	mov	r7, r5
 8006650:	42bb      	cmp	r3, r7
 8006652:	460d      	mov	r5, r1
 8006654:	d9f4      	bls.n	8006640 <_printf_i+0x110>
 8006656:	2b08      	cmp	r3, #8
 8006658:	d10b      	bne.n	8006672 <_printf_i+0x142>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	07df      	lsls	r7, r3, #31
 800665e:	d508      	bpl.n	8006672 <_printf_i+0x142>
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	6861      	ldr	r1, [r4, #4]
 8006664:	4299      	cmp	r1, r3
 8006666:	bfde      	ittt	le
 8006668:	2330      	movle	r3, #48	@ 0x30
 800666a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800666e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006672:	1b92      	subs	r2, r2, r6
 8006674:	6122      	str	r2, [r4, #16]
 8006676:	f8cd a000 	str.w	sl, [sp]
 800667a:	464b      	mov	r3, r9
 800667c:	aa03      	add	r2, sp, #12
 800667e:	4621      	mov	r1, r4
 8006680:	4640      	mov	r0, r8
 8006682:	f7ff fee7 	bl	8006454 <_printf_common>
 8006686:	3001      	adds	r0, #1
 8006688:	d14a      	bne.n	8006720 <_printf_i+0x1f0>
 800668a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800668e:	b004      	add	sp, #16
 8006690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	f043 0320 	orr.w	r3, r3, #32
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	4832      	ldr	r0, [pc, #200]	@ (8006768 <_printf_i+0x238>)
 800669e:	2778      	movs	r7, #120	@ 0x78
 80066a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	6831      	ldr	r1, [r6, #0]
 80066a8:	061f      	lsls	r7, r3, #24
 80066aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80066ae:	d402      	bmi.n	80066b6 <_printf_i+0x186>
 80066b0:	065f      	lsls	r7, r3, #25
 80066b2:	bf48      	it	mi
 80066b4:	b2ad      	uxthmi	r5, r5
 80066b6:	6031      	str	r1, [r6, #0]
 80066b8:	07d9      	lsls	r1, r3, #31
 80066ba:	bf44      	itt	mi
 80066bc:	f043 0320 	orrmi.w	r3, r3, #32
 80066c0:	6023      	strmi	r3, [r4, #0]
 80066c2:	b11d      	cbz	r5, 80066cc <_printf_i+0x19c>
 80066c4:	2310      	movs	r3, #16
 80066c6:	e7ad      	b.n	8006624 <_printf_i+0xf4>
 80066c8:	4826      	ldr	r0, [pc, #152]	@ (8006764 <_printf_i+0x234>)
 80066ca:	e7e9      	b.n	80066a0 <_printf_i+0x170>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	f023 0320 	bic.w	r3, r3, #32
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	e7f6      	b.n	80066c4 <_printf_i+0x194>
 80066d6:	4616      	mov	r6, r2
 80066d8:	e7bd      	b.n	8006656 <_printf_i+0x126>
 80066da:	6833      	ldr	r3, [r6, #0]
 80066dc:	6825      	ldr	r5, [r4, #0]
 80066de:	6961      	ldr	r1, [r4, #20]
 80066e0:	1d18      	adds	r0, r3, #4
 80066e2:	6030      	str	r0, [r6, #0]
 80066e4:	062e      	lsls	r6, r5, #24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	d501      	bpl.n	80066ee <_printf_i+0x1be>
 80066ea:	6019      	str	r1, [r3, #0]
 80066ec:	e002      	b.n	80066f4 <_printf_i+0x1c4>
 80066ee:	0668      	lsls	r0, r5, #25
 80066f0:	d5fb      	bpl.n	80066ea <_printf_i+0x1ba>
 80066f2:	8019      	strh	r1, [r3, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	4616      	mov	r6, r2
 80066fa:	e7bc      	b.n	8006676 <_printf_i+0x146>
 80066fc:	6833      	ldr	r3, [r6, #0]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	6032      	str	r2, [r6, #0]
 8006702:	681e      	ldr	r6, [r3, #0]
 8006704:	6862      	ldr	r2, [r4, #4]
 8006706:	2100      	movs	r1, #0
 8006708:	4630      	mov	r0, r6
 800670a:	f7f9 fe01 	bl	8000310 <memchr>
 800670e:	b108      	cbz	r0, 8006714 <_printf_i+0x1e4>
 8006710:	1b80      	subs	r0, r0, r6
 8006712:	6060      	str	r0, [r4, #4]
 8006714:	6863      	ldr	r3, [r4, #4]
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	2300      	movs	r3, #0
 800671a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800671e:	e7aa      	b.n	8006676 <_printf_i+0x146>
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	4632      	mov	r2, r6
 8006724:	4649      	mov	r1, r9
 8006726:	4640      	mov	r0, r8
 8006728:	47d0      	blx	sl
 800672a:	3001      	adds	r0, #1
 800672c:	d0ad      	beq.n	800668a <_printf_i+0x15a>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	079b      	lsls	r3, r3, #30
 8006732:	d413      	bmi.n	800675c <_printf_i+0x22c>
 8006734:	68e0      	ldr	r0, [r4, #12]
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	4298      	cmp	r0, r3
 800673a:	bfb8      	it	lt
 800673c:	4618      	movlt	r0, r3
 800673e:	e7a6      	b.n	800668e <_printf_i+0x15e>
 8006740:	2301      	movs	r3, #1
 8006742:	4632      	mov	r2, r6
 8006744:	4649      	mov	r1, r9
 8006746:	4640      	mov	r0, r8
 8006748:	47d0      	blx	sl
 800674a:	3001      	adds	r0, #1
 800674c:	d09d      	beq.n	800668a <_printf_i+0x15a>
 800674e:	3501      	adds	r5, #1
 8006750:	68e3      	ldr	r3, [r4, #12]
 8006752:	9903      	ldr	r1, [sp, #12]
 8006754:	1a5b      	subs	r3, r3, r1
 8006756:	42ab      	cmp	r3, r5
 8006758:	dcf2      	bgt.n	8006740 <_printf_i+0x210>
 800675a:	e7eb      	b.n	8006734 <_printf_i+0x204>
 800675c:	2500      	movs	r5, #0
 800675e:	f104 0619 	add.w	r6, r4, #25
 8006762:	e7f5      	b.n	8006750 <_printf_i+0x220>
 8006764:	08008926 	.word	0x08008926
 8006768:	08008937 	.word	0x08008937

0800676c <std>:
 800676c:	2300      	movs	r3, #0
 800676e:	b510      	push	{r4, lr}
 8006770:	4604      	mov	r4, r0
 8006772:	e9c0 3300 	strd	r3, r3, [r0]
 8006776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800677a:	6083      	str	r3, [r0, #8]
 800677c:	8181      	strh	r1, [r0, #12]
 800677e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006780:	81c2      	strh	r2, [r0, #14]
 8006782:	6183      	str	r3, [r0, #24]
 8006784:	4619      	mov	r1, r3
 8006786:	2208      	movs	r2, #8
 8006788:	305c      	adds	r0, #92	@ 0x5c
 800678a:	f000 f9f9 	bl	8006b80 <memset>
 800678e:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <std+0x58>)
 8006790:	6263      	str	r3, [r4, #36]	@ 0x24
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <std+0x5c>)
 8006794:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006796:	4b0d      	ldr	r3, [pc, #52]	@ (80067cc <std+0x60>)
 8006798:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <std+0x64>)
 800679c:	6323      	str	r3, [r4, #48]	@ 0x30
 800679e:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <std+0x68>)
 80067a0:	6224      	str	r4, [r4, #32]
 80067a2:	429c      	cmp	r4, r3
 80067a4:	d006      	beq.n	80067b4 <std+0x48>
 80067a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067aa:	4294      	cmp	r4, r2
 80067ac:	d002      	beq.n	80067b4 <std+0x48>
 80067ae:	33d0      	adds	r3, #208	@ 0xd0
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d105      	bne.n	80067c0 <std+0x54>
 80067b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067bc:	f000 ba5c 	b.w	8006c78 <__retarget_lock_init_recursive>
 80067c0:	bd10      	pop	{r4, pc}
 80067c2:	bf00      	nop
 80067c4:	080069d1 	.word	0x080069d1
 80067c8:	080069f3 	.word	0x080069f3
 80067cc:	08006a2b 	.word	0x08006a2b
 80067d0:	08006a4f 	.word	0x08006a4f
 80067d4:	240002b0 	.word	0x240002b0

080067d8 <stdio_exit_handler>:
 80067d8:	4a02      	ldr	r2, [pc, #8]	@ (80067e4 <stdio_exit_handler+0xc>)
 80067da:	4903      	ldr	r1, [pc, #12]	@ (80067e8 <stdio_exit_handler+0x10>)
 80067dc:	4803      	ldr	r0, [pc, #12]	@ (80067ec <stdio_exit_handler+0x14>)
 80067de:	f000 b869 	b.w	80068b4 <_fwalk_sglue>
 80067e2:	bf00      	nop
 80067e4:	24000010 	.word	0x24000010
 80067e8:	080084cd 	.word	0x080084cd
 80067ec:	24000020 	.word	0x24000020

080067f0 <cleanup_stdio>:
 80067f0:	6841      	ldr	r1, [r0, #4]
 80067f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006824 <cleanup_stdio+0x34>)
 80067f4:	4299      	cmp	r1, r3
 80067f6:	b510      	push	{r4, lr}
 80067f8:	4604      	mov	r4, r0
 80067fa:	d001      	beq.n	8006800 <cleanup_stdio+0x10>
 80067fc:	f001 fe66 	bl	80084cc <_fflush_r>
 8006800:	68a1      	ldr	r1, [r4, #8]
 8006802:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <cleanup_stdio+0x38>)
 8006804:	4299      	cmp	r1, r3
 8006806:	d002      	beq.n	800680e <cleanup_stdio+0x1e>
 8006808:	4620      	mov	r0, r4
 800680a:	f001 fe5f 	bl	80084cc <_fflush_r>
 800680e:	68e1      	ldr	r1, [r4, #12]
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <cleanup_stdio+0x3c>)
 8006812:	4299      	cmp	r1, r3
 8006814:	d004      	beq.n	8006820 <cleanup_stdio+0x30>
 8006816:	4620      	mov	r0, r4
 8006818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800681c:	f001 be56 	b.w	80084cc <_fflush_r>
 8006820:	bd10      	pop	{r4, pc}
 8006822:	bf00      	nop
 8006824:	240002b0 	.word	0x240002b0
 8006828:	24000318 	.word	0x24000318
 800682c:	24000380 	.word	0x24000380

08006830 <global_stdio_init.part.0>:
 8006830:	b510      	push	{r4, lr}
 8006832:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <global_stdio_init.part.0+0x30>)
 8006834:	4c0b      	ldr	r4, [pc, #44]	@ (8006864 <global_stdio_init.part.0+0x34>)
 8006836:	4a0c      	ldr	r2, [pc, #48]	@ (8006868 <global_stdio_init.part.0+0x38>)
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	4620      	mov	r0, r4
 800683c:	2200      	movs	r2, #0
 800683e:	2104      	movs	r1, #4
 8006840:	f7ff ff94 	bl	800676c <std>
 8006844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006848:	2201      	movs	r2, #1
 800684a:	2109      	movs	r1, #9
 800684c:	f7ff ff8e 	bl	800676c <std>
 8006850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006854:	2202      	movs	r2, #2
 8006856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685a:	2112      	movs	r1, #18
 800685c:	f7ff bf86 	b.w	800676c <std>
 8006860:	240003e8 	.word	0x240003e8
 8006864:	240002b0 	.word	0x240002b0
 8006868:	080067d9 	.word	0x080067d9

0800686c <__sfp_lock_acquire>:
 800686c:	4801      	ldr	r0, [pc, #4]	@ (8006874 <__sfp_lock_acquire+0x8>)
 800686e:	f000 ba04 	b.w	8006c7a <__retarget_lock_acquire_recursive>
 8006872:	bf00      	nop
 8006874:	240003f1 	.word	0x240003f1

08006878 <__sfp_lock_release>:
 8006878:	4801      	ldr	r0, [pc, #4]	@ (8006880 <__sfp_lock_release+0x8>)
 800687a:	f000 b9ff 	b.w	8006c7c <__retarget_lock_release_recursive>
 800687e:	bf00      	nop
 8006880:	240003f1 	.word	0x240003f1

08006884 <__sinit>:
 8006884:	b510      	push	{r4, lr}
 8006886:	4604      	mov	r4, r0
 8006888:	f7ff fff0 	bl	800686c <__sfp_lock_acquire>
 800688c:	6a23      	ldr	r3, [r4, #32]
 800688e:	b11b      	cbz	r3, 8006898 <__sinit+0x14>
 8006890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006894:	f7ff bff0 	b.w	8006878 <__sfp_lock_release>
 8006898:	4b04      	ldr	r3, [pc, #16]	@ (80068ac <__sinit+0x28>)
 800689a:	6223      	str	r3, [r4, #32]
 800689c:	4b04      	ldr	r3, [pc, #16]	@ (80068b0 <__sinit+0x2c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f5      	bne.n	8006890 <__sinit+0xc>
 80068a4:	f7ff ffc4 	bl	8006830 <global_stdio_init.part.0>
 80068a8:	e7f2      	b.n	8006890 <__sinit+0xc>
 80068aa:	bf00      	nop
 80068ac:	080067f1 	.word	0x080067f1
 80068b0:	240003e8 	.word	0x240003e8

080068b4 <_fwalk_sglue>:
 80068b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b8:	4607      	mov	r7, r0
 80068ba:	4688      	mov	r8, r1
 80068bc:	4614      	mov	r4, r2
 80068be:	2600      	movs	r6, #0
 80068c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068c4:	f1b9 0901 	subs.w	r9, r9, #1
 80068c8:	d505      	bpl.n	80068d6 <_fwalk_sglue+0x22>
 80068ca:	6824      	ldr	r4, [r4, #0]
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	d1f7      	bne.n	80068c0 <_fwalk_sglue+0xc>
 80068d0:	4630      	mov	r0, r6
 80068d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d6:	89ab      	ldrh	r3, [r5, #12]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d907      	bls.n	80068ec <_fwalk_sglue+0x38>
 80068dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068e0:	3301      	adds	r3, #1
 80068e2:	d003      	beq.n	80068ec <_fwalk_sglue+0x38>
 80068e4:	4629      	mov	r1, r5
 80068e6:	4638      	mov	r0, r7
 80068e8:	47c0      	blx	r8
 80068ea:	4306      	orrs	r6, r0
 80068ec:	3568      	adds	r5, #104	@ 0x68
 80068ee:	e7e9      	b.n	80068c4 <_fwalk_sglue+0x10>

080068f0 <iprintf>:
 80068f0:	b40f      	push	{r0, r1, r2, r3}
 80068f2:	b507      	push	{r0, r1, r2, lr}
 80068f4:	4906      	ldr	r1, [pc, #24]	@ (8006910 <iprintf+0x20>)
 80068f6:	ab04      	add	r3, sp, #16
 80068f8:	6808      	ldr	r0, [r1, #0]
 80068fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fe:	6881      	ldr	r1, [r0, #8]
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	f001 fc47 	bl	8008194 <_vfiprintf_r>
 8006906:	b003      	add	sp, #12
 8006908:	f85d eb04 	ldr.w	lr, [sp], #4
 800690c:	b004      	add	sp, #16
 800690e:	4770      	bx	lr
 8006910:	2400001c 	.word	0x2400001c

08006914 <_puts_r>:
 8006914:	6a03      	ldr	r3, [r0, #32]
 8006916:	b570      	push	{r4, r5, r6, lr}
 8006918:	6884      	ldr	r4, [r0, #8]
 800691a:	4605      	mov	r5, r0
 800691c:	460e      	mov	r6, r1
 800691e:	b90b      	cbnz	r3, 8006924 <_puts_r+0x10>
 8006920:	f7ff ffb0 	bl	8006884 <__sinit>
 8006924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006926:	07db      	lsls	r3, r3, #31
 8006928:	d405      	bmi.n	8006936 <_puts_r+0x22>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	0598      	lsls	r0, r3, #22
 800692e:	d402      	bmi.n	8006936 <_puts_r+0x22>
 8006930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006932:	f000 f9a2 	bl	8006c7a <__retarget_lock_acquire_recursive>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	0719      	lsls	r1, r3, #28
 800693a:	d502      	bpl.n	8006942 <_puts_r+0x2e>
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d135      	bne.n	80069ae <_puts_r+0x9a>
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f8c5 	bl	8006ad4 <__swsetup_r>
 800694a:	b380      	cbz	r0, 80069ae <_puts_r+0x9a>
 800694c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006952:	07da      	lsls	r2, r3, #31
 8006954:	d405      	bmi.n	8006962 <_puts_r+0x4e>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	059b      	lsls	r3, r3, #22
 800695a:	d402      	bmi.n	8006962 <_puts_r+0x4e>
 800695c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800695e:	f000 f98d 	bl	8006c7c <__retarget_lock_release_recursive>
 8006962:	4628      	mov	r0, r5
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	2b00      	cmp	r3, #0
 8006968:	da04      	bge.n	8006974 <_puts_r+0x60>
 800696a:	69a2      	ldr	r2, [r4, #24]
 800696c:	429a      	cmp	r2, r3
 800696e:	dc17      	bgt.n	80069a0 <_puts_r+0x8c>
 8006970:	290a      	cmp	r1, #10
 8006972:	d015      	beq.n	80069a0 <_puts_r+0x8c>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	6022      	str	r2, [r4, #0]
 800697a:	7019      	strb	r1, [r3, #0]
 800697c:	68a3      	ldr	r3, [r4, #8]
 800697e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006982:	3b01      	subs	r3, #1
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	2900      	cmp	r1, #0
 8006988:	d1ed      	bne.n	8006966 <_puts_r+0x52>
 800698a:	2b00      	cmp	r3, #0
 800698c:	da11      	bge.n	80069b2 <_puts_r+0x9e>
 800698e:	4622      	mov	r2, r4
 8006990:	210a      	movs	r1, #10
 8006992:	4628      	mov	r0, r5
 8006994:	f000 f85f 	bl	8006a56 <__swbuf_r>
 8006998:	3001      	adds	r0, #1
 800699a:	d0d7      	beq.n	800694c <_puts_r+0x38>
 800699c:	250a      	movs	r5, #10
 800699e:	e7d7      	b.n	8006950 <_puts_r+0x3c>
 80069a0:	4622      	mov	r2, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f857 	bl	8006a56 <__swbuf_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d1e7      	bne.n	800697c <_puts_r+0x68>
 80069ac:	e7ce      	b.n	800694c <_puts_r+0x38>
 80069ae:	3e01      	subs	r6, #1
 80069b0:	e7e4      	b.n	800697c <_puts_r+0x68>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	220a      	movs	r2, #10
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	e7ee      	b.n	800699c <_puts_r+0x88>
	...

080069c0 <puts>:
 80069c0:	4b02      	ldr	r3, [pc, #8]	@ (80069cc <puts+0xc>)
 80069c2:	4601      	mov	r1, r0
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f7ff bfa5 	b.w	8006914 <_puts_r>
 80069ca:	bf00      	nop
 80069cc:	2400001c 	.word	0x2400001c

080069d0 <__sread>:
 80069d0:	b510      	push	{r4, lr}
 80069d2:	460c      	mov	r4, r1
 80069d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d8:	f000 f900 	bl	8006bdc <_read_r>
 80069dc:	2800      	cmp	r0, #0
 80069de:	bfab      	itete	ge
 80069e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069e2:	89a3      	ldrhlt	r3, [r4, #12]
 80069e4:	181b      	addge	r3, r3, r0
 80069e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069ea:	bfac      	ite	ge
 80069ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069ee:	81a3      	strhlt	r3, [r4, #12]
 80069f0:	bd10      	pop	{r4, pc}

080069f2 <__swrite>:
 80069f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f6:	461f      	mov	r7, r3
 80069f8:	898b      	ldrh	r3, [r1, #12]
 80069fa:	05db      	lsls	r3, r3, #23
 80069fc:	4605      	mov	r5, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	4616      	mov	r6, r2
 8006a02:	d505      	bpl.n	8006a10 <__swrite+0x1e>
 8006a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a08:	2302      	movs	r3, #2
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f000 f8d4 	bl	8006bb8 <_lseek_r>
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a1a:	81a3      	strh	r3, [r4, #12]
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	463b      	mov	r3, r7
 8006a20:	4628      	mov	r0, r5
 8006a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a26:	f000 b8eb 	b.w	8006c00 <_write_r>

08006a2a <__sseek>:
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a32:	f000 f8c1 	bl	8006bb8 <_lseek_r>
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	bf15      	itete	ne
 8006a3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a46:	81a3      	strheq	r3, [r4, #12]
 8006a48:	bf18      	it	ne
 8006a4a:	81a3      	strhne	r3, [r4, #12]
 8006a4c:	bd10      	pop	{r4, pc}

08006a4e <__sclose>:
 8006a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a52:	f000 b8a1 	b.w	8006b98 <_close_r>

08006a56 <__swbuf_r>:
 8006a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a58:	460e      	mov	r6, r1
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	b118      	cbz	r0, 8006a68 <__swbuf_r+0x12>
 8006a60:	6a03      	ldr	r3, [r0, #32]
 8006a62:	b90b      	cbnz	r3, 8006a68 <__swbuf_r+0x12>
 8006a64:	f7ff ff0e 	bl	8006884 <__sinit>
 8006a68:	69a3      	ldr	r3, [r4, #24]
 8006a6a:	60a3      	str	r3, [r4, #8]
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	071a      	lsls	r2, r3, #28
 8006a70:	d501      	bpl.n	8006a76 <__swbuf_r+0x20>
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	b943      	cbnz	r3, 8006a88 <__swbuf_r+0x32>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 f82b 	bl	8006ad4 <__swsetup_r>
 8006a7e:	b118      	cbz	r0, 8006a88 <__swbuf_r+0x32>
 8006a80:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006a84:	4638      	mov	r0, r7
 8006a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	6922      	ldr	r2, [r4, #16]
 8006a8c:	1a98      	subs	r0, r3, r2
 8006a8e:	6963      	ldr	r3, [r4, #20]
 8006a90:	b2f6      	uxtb	r6, r6
 8006a92:	4283      	cmp	r3, r0
 8006a94:	4637      	mov	r7, r6
 8006a96:	dc05      	bgt.n	8006aa4 <__swbuf_r+0x4e>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f001 fd16 	bl	80084cc <_fflush_r>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d1ed      	bne.n	8006a80 <__swbuf_r+0x2a>
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	6022      	str	r2, [r4, #0]
 8006ab0:	701e      	strb	r6, [r3, #0]
 8006ab2:	6962      	ldr	r2, [r4, #20]
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d004      	beq.n	8006ac4 <__swbuf_r+0x6e>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	07db      	lsls	r3, r3, #31
 8006abe:	d5e1      	bpl.n	8006a84 <__swbuf_r+0x2e>
 8006ac0:	2e0a      	cmp	r6, #10
 8006ac2:	d1df      	bne.n	8006a84 <__swbuf_r+0x2e>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f001 fd00 	bl	80084cc <_fflush_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d0d9      	beq.n	8006a84 <__swbuf_r+0x2e>
 8006ad0:	e7d6      	b.n	8006a80 <__swbuf_r+0x2a>
	...

08006ad4 <__swsetup_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4b29      	ldr	r3, [pc, #164]	@ (8006b7c <__swsetup_r+0xa8>)
 8006ad8:	4605      	mov	r5, r0
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	460c      	mov	r4, r1
 8006ade:	b118      	cbz	r0, 8006ae8 <__swsetup_r+0x14>
 8006ae0:	6a03      	ldr	r3, [r0, #32]
 8006ae2:	b90b      	cbnz	r3, 8006ae8 <__swsetup_r+0x14>
 8006ae4:	f7ff fece 	bl	8006884 <__sinit>
 8006ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aec:	0719      	lsls	r1, r3, #28
 8006aee:	d422      	bmi.n	8006b36 <__swsetup_r+0x62>
 8006af0:	06da      	lsls	r2, r3, #27
 8006af2:	d407      	bmi.n	8006b04 <__swsetup_r+0x30>
 8006af4:	2209      	movs	r2, #9
 8006af6:	602a      	str	r2, [r5, #0]
 8006af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b02:	e033      	b.n	8006b6c <__swsetup_r+0x98>
 8006b04:	0758      	lsls	r0, r3, #29
 8006b06:	d512      	bpl.n	8006b2e <__swsetup_r+0x5a>
 8006b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b0a:	b141      	cbz	r1, 8006b1e <__swsetup_r+0x4a>
 8006b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b10:	4299      	cmp	r1, r3
 8006b12:	d002      	beq.n	8006b1a <__swsetup_r+0x46>
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 fe99 	bl	800784c <_free_r>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6063      	str	r3, [r4, #4]
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	f043 0308 	orr.w	r3, r3, #8
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	b94b      	cbnz	r3, 8006b4e <__swsetup_r+0x7a>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b44:	d003      	beq.n	8006b4e <__swsetup_r+0x7a>
 8006b46:	4621      	mov	r1, r4
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f001 fd0d 	bl	8008568 <__smakebuf_r>
 8006b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b52:	f013 0201 	ands.w	r2, r3, #1
 8006b56:	d00a      	beq.n	8006b6e <__swsetup_r+0x9a>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	60a2      	str	r2, [r4, #8]
 8006b5c:	6962      	ldr	r2, [r4, #20]
 8006b5e:	4252      	negs	r2, r2
 8006b60:	61a2      	str	r2, [r4, #24]
 8006b62:	6922      	ldr	r2, [r4, #16]
 8006b64:	b942      	cbnz	r2, 8006b78 <__swsetup_r+0xa4>
 8006b66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b6a:	d1c5      	bne.n	8006af8 <__swsetup_r+0x24>
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	0799      	lsls	r1, r3, #30
 8006b70:	bf58      	it	pl
 8006b72:	6962      	ldrpl	r2, [r4, #20]
 8006b74:	60a2      	str	r2, [r4, #8]
 8006b76:	e7f4      	b.n	8006b62 <__swsetup_r+0x8e>
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7f7      	b.n	8006b6c <__swsetup_r+0x98>
 8006b7c:	2400001c 	.word	0x2400001c

08006b80 <memset>:
 8006b80:	4402      	add	r2, r0
 8006b82:	4603      	mov	r3, r0
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d100      	bne.n	8006b8a <memset+0xa>
 8006b88:	4770      	bx	lr
 8006b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8e:	e7f9      	b.n	8006b84 <memset+0x4>

08006b90 <_localeconv_r>:
 8006b90:	4800      	ldr	r0, [pc, #0]	@ (8006b94 <_localeconv_r+0x4>)
 8006b92:	4770      	bx	lr
 8006b94:	2400015c 	.word	0x2400015c

08006b98 <_close_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4d06      	ldr	r5, [pc, #24]	@ (8006bb4 <_close_r+0x1c>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	f7fa f9b6 	bl	8000f14 <_close>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_close_r+0x1a>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_close_r+0x1a>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	240003ec 	.word	0x240003ec

08006bb8 <_lseek_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d07      	ldr	r5, [pc, #28]	@ (8006bd8 <_lseek_r+0x20>)
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f7fa f9cb 	bl	8000f62 <_lseek>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_lseek_r+0x1e>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_lseek_r+0x1e>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	240003ec 	.word	0x240003ec

08006bdc <_read_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d07      	ldr	r5, [pc, #28]	@ (8006bfc <_read_r+0x20>)
 8006be0:	4604      	mov	r4, r0
 8006be2:	4608      	mov	r0, r1
 8006be4:	4611      	mov	r1, r2
 8006be6:	2200      	movs	r2, #0
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f7fa f975 	bl	8000eda <_read>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_read_r+0x1e>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_read_r+0x1e>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	240003ec 	.word	0x240003ec

08006c00 <_write_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d07      	ldr	r5, [pc, #28]	@ (8006c20 <_write_r+0x20>)
 8006c04:	4604      	mov	r4, r0
 8006c06:	4608      	mov	r0, r1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f7f9 feac 	bl	800096c <_write>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_write_r+0x1e>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_write_r+0x1e>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	240003ec 	.word	0x240003ec

08006c24 <__errno>:
 8006c24:	4b01      	ldr	r3, [pc, #4]	@ (8006c2c <__errno+0x8>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	2400001c 	.word	0x2400001c

08006c30 <__libc_init_array>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	4d0d      	ldr	r5, [pc, #52]	@ (8006c68 <__libc_init_array+0x38>)
 8006c34:	4c0d      	ldr	r4, [pc, #52]	@ (8006c6c <__libc_init_array+0x3c>)
 8006c36:	1b64      	subs	r4, r4, r5
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	2600      	movs	r6, #0
 8006c3c:	42a6      	cmp	r6, r4
 8006c3e:	d109      	bne.n	8006c54 <__libc_init_array+0x24>
 8006c40:	4d0b      	ldr	r5, [pc, #44]	@ (8006c70 <__libc_init_array+0x40>)
 8006c42:	4c0c      	ldr	r4, [pc, #48]	@ (8006c74 <__libc_init_array+0x44>)
 8006c44:	f001 fdbc 	bl	80087c0 <_init>
 8006c48:	1b64      	subs	r4, r4, r5
 8006c4a:	10a4      	asrs	r4, r4, #2
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	42a6      	cmp	r6, r4
 8006c50:	d105      	bne.n	8006c5e <__libc_init_array+0x2e>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c58:	4798      	blx	r3
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	e7ee      	b.n	8006c3c <__libc_init_array+0xc>
 8006c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c62:	4798      	blx	r3
 8006c64:	3601      	adds	r6, #1
 8006c66:	e7f2      	b.n	8006c4e <__libc_init_array+0x1e>
 8006c68:	08008c94 	.word	0x08008c94
 8006c6c:	08008c94 	.word	0x08008c94
 8006c70:	08008c94 	.word	0x08008c94
 8006c74:	08008c98 	.word	0x08008c98

08006c78 <__retarget_lock_init_recursive>:
 8006c78:	4770      	bx	lr

08006c7a <__retarget_lock_acquire_recursive>:
 8006c7a:	4770      	bx	lr

08006c7c <__retarget_lock_release_recursive>:
 8006c7c:	4770      	bx	lr

08006c7e <quorem>:
 8006c7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c82:	6903      	ldr	r3, [r0, #16]
 8006c84:	690c      	ldr	r4, [r1, #16]
 8006c86:	42a3      	cmp	r3, r4
 8006c88:	4607      	mov	r7, r0
 8006c8a:	db7e      	blt.n	8006d8a <quorem+0x10c>
 8006c8c:	3c01      	subs	r4, #1
 8006c8e:	f101 0814 	add.w	r8, r1, #20
 8006c92:	00a3      	lsls	r3, r4, #2
 8006c94:	f100 0514 	add.w	r5, r0, #20
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ca4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cb4:	d32e      	bcc.n	8006d14 <quorem+0x96>
 8006cb6:	f04f 0a00 	mov.w	sl, #0
 8006cba:	46c4      	mov	ip, r8
 8006cbc:	46ae      	mov	lr, r5
 8006cbe:	46d3      	mov	fp, sl
 8006cc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cc4:	b298      	uxth	r0, r3
 8006cc6:	fb06 a000 	mla	r0, r6, r0, sl
 8006cca:	0c02      	lsrs	r2, r0, #16
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	fb06 2303 	mla	r3, r6, r3, r2
 8006cd2:	f8de 2000 	ldr.w	r2, [lr]
 8006cd6:	b280      	uxth	r0, r0
 8006cd8:	b292      	uxth	r2, r2
 8006cda:	1a12      	subs	r2, r2, r0
 8006cdc:	445a      	add	r2, fp
 8006cde:	f8de 0000 	ldr.w	r0, [lr]
 8006ce2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006cec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006cf0:	b292      	uxth	r2, r2
 8006cf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cf6:	45e1      	cmp	r9, ip
 8006cf8:	f84e 2b04 	str.w	r2, [lr], #4
 8006cfc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d00:	d2de      	bcs.n	8006cc0 <quorem+0x42>
 8006d02:	9b00      	ldr	r3, [sp, #0]
 8006d04:	58eb      	ldr	r3, [r5, r3]
 8006d06:	b92b      	cbnz	r3, 8006d14 <quorem+0x96>
 8006d08:	9b01      	ldr	r3, [sp, #4]
 8006d0a:	3b04      	subs	r3, #4
 8006d0c:	429d      	cmp	r5, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	d32f      	bcc.n	8006d72 <quorem+0xf4>
 8006d12:	613c      	str	r4, [r7, #16]
 8006d14:	4638      	mov	r0, r7
 8006d16:	f001 f90b 	bl	8007f30 <__mcmp>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	db25      	blt.n	8006d6a <quorem+0xec>
 8006d1e:	4629      	mov	r1, r5
 8006d20:	2000      	movs	r0, #0
 8006d22:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d26:	f8d1 c000 	ldr.w	ip, [r1]
 8006d2a:	fa1f fe82 	uxth.w	lr, r2
 8006d2e:	fa1f f38c 	uxth.w	r3, ip
 8006d32:	eba3 030e 	sub.w	r3, r3, lr
 8006d36:	4403      	add	r3, r0
 8006d38:	0c12      	lsrs	r2, r2, #16
 8006d3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d48:	45c1      	cmp	r9, r8
 8006d4a:	f841 3b04 	str.w	r3, [r1], #4
 8006d4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d52:	d2e6      	bcs.n	8006d22 <quorem+0xa4>
 8006d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d5c:	b922      	cbnz	r2, 8006d68 <quorem+0xea>
 8006d5e:	3b04      	subs	r3, #4
 8006d60:	429d      	cmp	r5, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	d30b      	bcc.n	8006d7e <quorem+0x100>
 8006d66:	613c      	str	r4, [r7, #16]
 8006d68:	3601      	adds	r6, #1
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	b003      	add	sp, #12
 8006d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	3b04      	subs	r3, #4
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d1cb      	bne.n	8006d12 <quorem+0x94>
 8006d7a:	3c01      	subs	r4, #1
 8006d7c:	e7c6      	b.n	8006d0c <quorem+0x8e>
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	3b04      	subs	r3, #4
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	d1ef      	bne.n	8006d66 <quorem+0xe8>
 8006d86:	3c01      	subs	r4, #1
 8006d88:	e7ea      	b.n	8006d60 <quorem+0xe2>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e7ee      	b.n	8006d6c <quorem+0xee>
	...

08006d90 <_dtoa_r>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	ed2d 8b02 	vpush	{d8}
 8006d98:	69c7      	ldr	r7, [r0, #28]
 8006d9a:	b091      	sub	sp, #68	@ 0x44
 8006d9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006da0:	ec55 4b10 	vmov	r4, r5, d0
 8006da4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006da6:	9107      	str	r1, [sp, #28]
 8006da8:	4681      	mov	r9, r0
 8006daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dac:	930d      	str	r3, [sp, #52]	@ 0x34
 8006dae:	b97f      	cbnz	r7, 8006dd0 <_dtoa_r+0x40>
 8006db0:	2010      	movs	r0, #16
 8006db2:	f000 fd95 	bl	80078e0 <malloc>
 8006db6:	4602      	mov	r2, r0
 8006db8:	f8c9 001c 	str.w	r0, [r9, #28]
 8006dbc:	b920      	cbnz	r0, 8006dc8 <_dtoa_r+0x38>
 8006dbe:	4ba0      	ldr	r3, [pc, #640]	@ (8007040 <_dtoa_r+0x2b0>)
 8006dc0:	21ef      	movs	r1, #239	@ 0xef
 8006dc2:	48a0      	ldr	r0, [pc, #640]	@ (8007044 <_dtoa_r+0x2b4>)
 8006dc4:	f001 fc4c 	bl	8008660 <__assert_func>
 8006dc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006dcc:	6007      	str	r7, [r0, #0]
 8006dce:	60c7      	str	r7, [r0, #12]
 8006dd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006dd4:	6819      	ldr	r1, [r3, #0]
 8006dd6:	b159      	cbz	r1, 8006df0 <_dtoa_r+0x60>
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	604a      	str	r2, [r1, #4]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4093      	lsls	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
 8006de2:	4648      	mov	r0, r9
 8006de4:	f000 fe72 	bl	8007acc <_Bfree>
 8006de8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	1e2b      	subs	r3, r5, #0
 8006df2:	bfbb      	ittet	lt
 8006df4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006df8:	9303      	strlt	r3, [sp, #12]
 8006dfa:	2300      	movge	r3, #0
 8006dfc:	2201      	movlt	r2, #1
 8006dfe:	bfac      	ite	ge
 8006e00:	6033      	strge	r3, [r6, #0]
 8006e02:	6032      	strlt	r2, [r6, #0]
 8006e04:	4b90      	ldr	r3, [pc, #576]	@ (8007048 <_dtoa_r+0x2b8>)
 8006e06:	9e03      	ldr	r6, [sp, #12]
 8006e08:	43b3      	bics	r3, r6
 8006e0a:	d110      	bne.n	8006e2e <_dtoa_r+0x9e>
 8006e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006e18:	4323      	orrs	r3, r4
 8006e1a:	f000 84e6 	beq.w	80077ea <_dtoa_r+0xa5a>
 8006e1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e20:	4f8a      	ldr	r7, [pc, #552]	@ (800704c <_dtoa_r+0x2bc>)
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 84e8 	beq.w	80077f8 <_dtoa_r+0xa68>
 8006e28:	1cfb      	adds	r3, r7, #3
 8006e2a:	f000 bce3 	b.w	80077f4 <_dtoa_r+0xa64>
 8006e2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006e32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3a:	d10a      	bne.n	8006e52 <_dtoa_r+0xc2>
 8006e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e3e:	2301      	movs	r3, #1
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e44:	b113      	cbz	r3, 8006e4c <_dtoa_r+0xbc>
 8006e46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006e48:	4b81      	ldr	r3, [pc, #516]	@ (8007050 <_dtoa_r+0x2c0>)
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4f81      	ldr	r7, [pc, #516]	@ (8007054 <_dtoa_r+0x2c4>)
 8006e4e:	f000 bcd3 	b.w	80077f8 <_dtoa_r+0xa68>
 8006e52:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e54:	a90f      	add	r1, sp, #60	@ 0x3c
 8006e56:	4648      	mov	r0, r9
 8006e58:	eeb0 0b48 	vmov.f64	d0, d8
 8006e5c:	f001 f918 	bl	8008090 <__d2b>
 8006e60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8006e64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e66:	9001      	str	r0, [sp, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d045      	beq.n	8006ef8 <_dtoa_r+0x168>
 8006e6c:	eeb0 7b48 	vmov.f64	d7, d8
 8006e70:	ee18 1a90 	vmov	r1, s17
 8006e74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006e78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8006e7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006e80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006e84:	2500      	movs	r5, #0
 8006e86:	ee07 1a90 	vmov	s15, r1
 8006e8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8006e8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007028 <_dtoa_r+0x298>
 8006e92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007030 <_dtoa_r+0x2a0>
 8006e9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006e9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007038 <_dtoa_r+0x2a8>
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006eaa:	eeb0 7b46 	vmov.f64	d7, d6
 8006eae:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006eb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006eb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebe:	ee16 8a90 	vmov	r8, s13
 8006ec2:	d508      	bpl.n	8006ed6 <_dtoa_r+0x146>
 8006ec4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006ec8:	eeb4 6b47 	vcmp.f64	d6, d7
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	bf18      	it	ne
 8006ed2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8006ed6:	f1b8 0f16 	cmp.w	r8, #22
 8006eda:	d82b      	bhi.n	8006f34 <_dtoa_r+0x1a4>
 8006edc:	495e      	ldr	r1, [pc, #376]	@ (8007058 <_dtoa_r+0x2c8>)
 8006ede:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8006ee2:	ed91 7b00 	vldr	d7, [r1]
 8006ee6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eee:	d501      	bpl.n	8006ef4 <_dtoa_r+0x164>
 8006ef0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	e01e      	b.n	8006f36 <_dtoa_r+0x1a6>
 8006ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006f00:	2920      	cmp	r1, #32
 8006f02:	bfc1      	itttt	gt
 8006f04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006f08:	408e      	lslgt	r6, r1
 8006f0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8006f0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8006f12:	bfd6      	itet	le
 8006f14:	f1c1 0120 	rsble	r1, r1, #32
 8006f18:	4331      	orrgt	r1, r6
 8006f1a:	fa04 f101 	lslle.w	r1, r4, r1
 8006f1e:	ee07 1a90 	vmov	s15, r1
 8006f22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006f26:	3b01      	subs	r3, #1
 8006f28:	ee17 1a90 	vmov	r1, s15
 8006f2c:	2501      	movs	r5, #1
 8006f2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8006f32:	e7a8      	b.n	8006e86 <_dtoa_r+0xf6>
 8006f34:	2101      	movs	r1, #1
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	1e53      	subs	r3, r2, #1
 8006f3a:	9306      	str	r3, [sp, #24]
 8006f3c:	bf45      	ittet	mi
 8006f3e:	f1c2 0301 	rsbmi	r3, r2, #1
 8006f42:	9304      	strmi	r3, [sp, #16]
 8006f44:	2300      	movpl	r3, #0
 8006f46:	2300      	movmi	r3, #0
 8006f48:	bf4c      	ite	mi
 8006f4a:	9306      	strmi	r3, [sp, #24]
 8006f4c:	9304      	strpl	r3, [sp, #16]
 8006f4e:	f1b8 0f00 	cmp.w	r8, #0
 8006f52:	910c      	str	r1, [sp, #48]	@ 0x30
 8006f54:	db18      	blt.n	8006f88 <_dtoa_r+0x1f8>
 8006f56:	9b06      	ldr	r3, [sp, #24]
 8006f58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f5c:	4443      	add	r3, r8
 8006f5e:	9306      	str	r3, [sp, #24]
 8006f60:	2300      	movs	r3, #0
 8006f62:	9a07      	ldr	r2, [sp, #28]
 8006f64:	2a09      	cmp	r2, #9
 8006f66:	d845      	bhi.n	8006ff4 <_dtoa_r+0x264>
 8006f68:	2a05      	cmp	r2, #5
 8006f6a:	bfc4      	itt	gt
 8006f6c:	3a04      	subgt	r2, #4
 8006f6e:	9207      	strgt	r2, [sp, #28]
 8006f70:	9a07      	ldr	r2, [sp, #28]
 8006f72:	f1a2 0202 	sub.w	r2, r2, #2
 8006f76:	bfcc      	ite	gt
 8006f78:	2400      	movgt	r4, #0
 8006f7a:	2401      	movle	r4, #1
 8006f7c:	2a03      	cmp	r2, #3
 8006f7e:	d844      	bhi.n	800700a <_dtoa_r+0x27a>
 8006f80:	e8df f002 	tbb	[pc, r2]
 8006f84:	0b173634 	.word	0x0b173634
 8006f88:	9b04      	ldr	r3, [sp, #16]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	eba3 0308 	sub.w	r3, r3, r8
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f94:	f1c8 0300 	rsb	r3, r8, #0
 8006f98:	e7e3      	b.n	8006f62 <_dtoa_r+0x1d2>
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	9208      	str	r2, [sp, #32]
 8006f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa0:	eb08 0b02 	add.w	fp, r8, r2
 8006fa4:	f10b 0a01 	add.w	sl, fp, #1
 8006fa8:	4652      	mov	r2, sl
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	bfb8      	it	lt
 8006fae:	2201      	movlt	r2, #1
 8006fb0:	e006      	b.n	8006fc0 <_dtoa_r+0x230>
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	9208      	str	r2, [sp, #32]
 8006fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fb8:	2a00      	cmp	r2, #0
 8006fba:	dd29      	ble.n	8007010 <_dtoa_r+0x280>
 8006fbc:	4693      	mov	fp, r2
 8006fbe:	4692      	mov	sl, r2
 8006fc0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	2004      	movs	r0, #4
 8006fc8:	f100 0614 	add.w	r6, r0, #20
 8006fcc:	4296      	cmp	r6, r2
 8006fce:	d926      	bls.n	800701e <_dtoa_r+0x28e>
 8006fd0:	6079      	str	r1, [r7, #4]
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	9305      	str	r3, [sp, #20]
 8006fd6:	f000 fd39 	bl	8007a4c <_Balloc>
 8006fda:	9b05      	ldr	r3, [sp, #20]
 8006fdc:	4607      	mov	r7, r0
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d13e      	bne.n	8007060 <_dtoa_r+0x2d0>
 8006fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800705c <_dtoa_r+0x2cc>)
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fea:	e6ea      	b.n	8006dc2 <_dtoa_r+0x32>
 8006fec:	2200      	movs	r2, #0
 8006fee:	e7e1      	b.n	8006fb4 <_dtoa_r+0x224>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	e7d3      	b.n	8006f9c <_dtoa_r+0x20c>
 8006ff4:	2401      	movs	r4, #1
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8006ffc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007000:	2100      	movs	r1, #0
 8007002:	46da      	mov	sl, fp
 8007004:	2212      	movs	r2, #18
 8007006:	9109      	str	r1, [sp, #36]	@ 0x24
 8007008:	e7da      	b.n	8006fc0 <_dtoa_r+0x230>
 800700a:	2201      	movs	r2, #1
 800700c:	9208      	str	r2, [sp, #32]
 800700e:	e7f5      	b.n	8006ffc <_dtoa_r+0x26c>
 8007010:	f04f 0b01 	mov.w	fp, #1
 8007014:	46da      	mov	sl, fp
 8007016:	465a      	mov	r2, fp
 8007018:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800701c:	e7d0      	b.n	8006fc0 <_dtoa_r+0x230>
 800701e:	3101      	adds	r1, #1
 8007020:	0040      	lsls	r0, r0, #1
 8007022:	e7d1      	b.n	8006fc8 <_dtoa_r+0x238>
 8007024:	f3af 8000 	nop.w
 8007028:	636f4361 	.word	0x636f4361
 800702c:	3fd287a7 	.word	0x3fd287a7
 8007030:	8b60c8b3 	.word	0x8b60c8b3
 8007034:	3fc68a28 	.word	0x3fc68a28
 8007038:	509f79fb 	.word	0x509f79fb
 800703c:	3fd34413 	.word	0x3fd34413
 8007040:	08008955 	.word	0x08008955
 8007044:	0800896c 	.word	0x0800896c
 8007048:	7ff00000 	.word	0x7ff00000
 800704c:	08008951 	.word	0x08008951
 8007050:	08008925 	.word	0x08008925
 8007054:	08008924 	.word	0x08008924
 8007058:	08008ac0 	.word	0x08008ac0
 800705c:	080089c4 	.word	0x080089c4
 8007060:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007064:	f1ba 0f0e 	cmp.w	sl, #14
 8007068:	6010      	str	r0, [r2, #0]
 800706a:	d86e      	bhi.n	800714a <_dtoa_r+0x3ba>
 800706c:	2c00      	cmp	r4, #0
 800706e:	d06c      	beq.n	800714a <_dtoa_r+0x3ba>
 8007070:	f1b8 0f00 	cmp.w	r8, #0
 8007074:	f340 80b4 	ble.w	80071e0 <_dtoa_r+0x450>
 8007078:	4ac8      	ldr	r2, [pc, #800]	@ (800739c <_dtoa_r+0x60c>)
 800707a:	f008 010f 	and.w	r1, r8, #15
 800707e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007082:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007086:	ed92 7b00 	vldr	d7, [r2]
 800708a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800708e:	f000 809b 	beq.w	80071c8 <_dtoa_r+0x438>
 8007092:	4ac3      	ldr	r2, [pc, #780]	@ (80073a0 <_dtoa_r+0x610>)
 8007094:	ed92 6b08 	vldr	d6, [r2, #32]
 8007098:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800709c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80070a0:	f001 010f 	and.w	r1, r1, #15
 80070a4:	2203      	movs	r2, #3
 80070a6:	48be      	ldr	r0, [pc, #760]	@ (80073a0 <_dtoa_r+0x610>)
 80070a8:	2900      	cmp	r1, #0
 80070aa:	f040 808f 	bne.w	80071cc <_dtoa_r+0x43c>
 80070ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80070b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80070b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80070bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c0:	2900      	cmp	r1, #0
 80070c2:	f000 80b3 	beq.w	800722c <_dtoa_r+0x49c>
 80070c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80070ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d2:	f140 80ab 	bpl.w	800722c <_dtoa_r+0x49c>
 80070d6:	f1ba 0f00 	cmp.w	sl, #0
 80070da:	f000 80a7 	beq.w	800722c <_dtoa_r+0x49c>
 80070de:	f1bb 0f00 	cmp.w	fp, #0
 80070e2:	dd30      	ble.n	8007146 <_dtoa_r+0x3b6>
 80070e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070f0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	3201      	adds	r2, #1
 80070f8:	465c      	mov	r4, fp
 80070fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80070fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007102:	ee07 2a90 	vmov	s15, r2
 8007106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800710a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800710e:	ee15 2a90 	vmov	r2, s11
 8007112:	ec51 0b15 	vmov	r0, r1, d5
 8007116:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800711a:	2c00      	cmp	r4, #0
 800711c:	f040 808a 	bne.w	8007234 <_dtoa_r+0x4a4>
 8007120:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007124:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007128:	ec41 0b17 	vmov	d7, r0, r1
 800712c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007134:	f300 826a 	bgt.w	800760c <_dtoa_r+0x87c>
 8007138:	eeb1 7b47 	vneg.f64	d7, d7
 800713c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007144:	d423      	bmi.n	800718e <_dtoa_r+0x3fe>
 8007146:	ed8d 8b02 	vstr	d8, [sp, #8]
 800714a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800714c:	2a00      	cmp	r2, #0
 800714e:	f2c0 8129 	blt.w	80073a4 <_dtoa_r+0x614>
 8007152:	f1b8 0f0e 	cmp.w	r8, #14
 8007156:	f300 8125 	bgt.w	80073a4 <_dtoa_r+0x614>
 800715a:	4b90      	ldr	r3, [pc, #576]	@ (800739c <_dtoa_r+0x60c>)
 800715c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007160:	ed93 6b00 	vldr	d6, [r3]
 8007164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007166:	2b00      	cmp	r3, #0
 8007168:	f280 80c8 	bge.w	80072fc <_dtoa_r+0x56c>
 800716c:	f1ba 0f00 	cmp.w	sl, #0
 8007170:	f300 80c4 	bgt.w	80072fc <_dtoa_r+0x56c>
 8007174:	d10b      	bne.n	800718e <_dtoa_r+0x3fe>
 8007176:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800717a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800717e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007182:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718a:	f2c0 823c 	blt.w	8007606 <_dtoa_r+0x876>
 800718e:	2400      	movs	r4, #0
 8007190:	4625      	mov	r5, r4
 8007192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007194:	43db      	mvns	r3, r3
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	463e      	mov	r6, r7
 800719a:	f04f 0800 	mov.w	r8, #0
 800719e:	4621      	mov	r1, r4
 80071a0:	4648      	mov	r0, r9
 80071a2:	f000 fc93 	bl	8007acc <_Bfree>
 80071a6:	2d00      	cmp	r5, #0
 80071a8:	f000 80a2 	beq.w	80072f0 <_dtoa_r+0x560>
 80071ac:	f1b8 0f00 	cmp.w	r8, #0
 80071b0:	d005      	beq.n	80071be <_dtoa_r+0x42e>
 80071b2:	45a8      	cmp	r8, r5
 80071b4:	d003      	beq.n	80071be <_dtoa_r+0x42e>
 80071b6:	4641      	mov	r1, r8
 80071b8:	4648      	mov	r0, r9
 80071ba:	f000 fc87 	bl	8007acc <_Bfree>
 80071be:	4629      	mov	r1, r5
 80071c0:	4648      	mov	r0, r9
 80071c2:	f000 fc83 	bl	8007acc <_Bfree>
 80071c6:	e093      	b.n	80072f0 <_dtoa_r+0x560>
 80071c8:	2202      	movs	r2, #2
 80071ca:	e76c      	b.n	80070a6 <_dtoa_r+0x316>
 80071cc:	07cc      	lsls	r4, r1, #31
 80071ce:	d504      	bpl.n	80071da <_dtoa_r+0x44a>
 80071d0:	ed90 6b00 	vldr	d6, [r0]
 80071d4:	3201      	adds	r2, #1
 80071d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071da:	1049      	asrs	r1, r1, #1
 80071dc:	3008      	adds	r0, #8
 80071de:	e763      	b.n	80070a8 <_dtoa_r+0x318>
 80071e0:	d022      	beq.n	8007228 <_dtoa_r+0x498>
 80071e2:	f1c8 0100 	rsb	r1, r8, #0
 80071e6:	4a6d      	ldr	r2, [pc, #436]	@ (800739c <_dtoa_r+0x60c>)
 80071e8:	f001 000f 	and.w	r0, r1, #15
 80071ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80071f0:	ed92 7b00 	vldr	d7, [r2]
 80071f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80071f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071fc:	4868      	ldr	r0, [pc, #416]	@ (80073a0 <_dtoa_r+0x610>)
 80071fe:	1109      	asrs	r1, r1, #4
 8007200:	2400      	movs	r4, #0
 8007202:	2202      	movs	r2, #2
 8007204:	b929      	cbnz	r1, 8007212 <_dtoa_r+0x482>
 8007206:	2c00      	cmp	r4, #0
 8007208:	f43f af57 	beq.w	80070ba <_dtoa_r+0x32a>
 800720c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007210:	e753      	b.n	80070ba <_dtoa_r+0x32a>
 8007212:	07ce      	lsls	r6, r1, #31
 8007214:	d505      	bpl.n	8007222 <_dtoa_r+0x492>
 8007216:	ed90 6b00 	vldr	d6, [r0]
 800721a:	3201      	adds	r2, #1
 800721c:	2401      	movs	r4, #1
 800721e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007222:	1049      	asrs	r1, r1, #1
 8007224:	3008      	adds	r0, #8
 8007226:	e7ed      	b.n	8007204 <_dtoa_r+0x474>
 8007228:	2202      	movs	r2, #2
 800722a:	e746      	b.n	80070ba <_dtoa_r+0x32a>
 800722c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007230:	4654      	mov	r4, sl
 8007232:	e762      	b.n	80070fa <_dtoa_r+0x36a>
 8007234:	4a59      	ldr	r2, [pc, #356]	@ (800739c <_dtoa_r+0x60c>)
 8007236:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800723a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800723e:	9a08      	ldr	r2, [sp, #32]
 8007240:	ec41 0b17 	vmov	d7, r0, r1
 8007244:	443c      	add	r4, r7
 8007246:	b34a      	cbz	r2, 800729c <_dtoa_r+0x50c>
 8007248:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800724c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007250:	463e      	mov	r6, r7
 8007252:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007256:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800725a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800725e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007262:	ee14 2a90 	vmov	r2, s9
 8007266:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800726a:	3230      	adds	r2, #48	@ 0x30
 800726c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007270:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007278:	f806 2b01 	strb.w	r2, [r6], #1
 800727c:	d438      	bmi.n	80072f0 <_dtoa_r+0x560>
 800727e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007282:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728a:	d46e      	bmi.n	800736a <_dtoa_r+0x5da>
 800728c:	42a6      	cmp	r6, r4
 800728e:	f43f af5a 	beq.w	8007146 <_dtoa_r+0x3b6>
 8007292:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007296:	ee26 6b03 	vmul.f64	d6, d6, d3
 800729a:	e7e0      	b.n	800725e <_dtoa_r+0x4ce>
 800729c:	4621      	mov	r1, r4
 800729e:	463e      	mov	r6, r7
 80072a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80072a4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80072a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80072ac:	ee14 2a90 	vmov	r2, s9
 80072b0:	3230      	adds	r2, #48	@ 0x30
 80072b2:	f806 2b01 	strb.w	r2, [r6], #1
 80072b6:	42a6      	cmp	r6, r4
 80072b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80072bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80072c0:	d119      	bne.n	80072f6 <_dtoa_r+0x566>
 80072c2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80072c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80072ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80072ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d2:	dc4a      	bgt.n	800736a <_dtoa_r+0x5da>
 80072d4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80072d8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80072dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e0:	f57f af31 	bpl.w	8007146 <_dtoa_r+0x3b6>
 80072e4:	460e      	mov	r6, r1
 80072e6:	3901      	subs	r1, #1
 80072e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072ec:	2b30      	cmp	r3, #48	@ 0x30
 80072ee:	d0f9      	beq.n	80072e4 <_dtoa_r+0x554>
 80072f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80072f4:	e027      	b.n	8007346 <_dtoa_r+0x5b6>
 80072f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80072fa:	e7d5      	b.n	80072a8 <_dtoa_r+0x518>
 80072fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007300:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007304:	463e      	mov	r6, r7
 8007306:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800730a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800730e:	ee15 3a10 	vmov	r3, s10
 8007312:	3330      	adds	r3, #48	@ 0x30
 8007314:	f806 3b01 	strb.w	r3, [r6], #1
 8007318:	1bf3      	subs	r3, r6, r7
 800731a:	459a      	cmp	sl, r3
 800731c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007320:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007324:	d132      	bne.n	800738c <_dtoa_r+0x5fc>
 8007326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800732a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800732e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007332:	dc18      	bgt.n	8007366 <_dtoa_r+0x5d6>
 8007334:	eeb4 7b46 	vcmp.f64	d7, d6
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	d103      	bne.n	8007346 <_dtoa_r+0x5b6>
 800733e:	ee15 3a10 	vmov	r3, s10
 8007342:	07db      	lsls	r3, r3, #31
 8007344:	d40f      	bmi.n	8007366 <_dtoa_r+0x5d6>
 8007346:	9901      	ldr	r1, [sp, #4]
 8007348:	4648      	mov	r0, r9
 800734a:	f000 fbbf 	bl	8007acc <_Bfree>
 800734e:	2300      	movs	r3, #0
 8007350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007352:	7033      	strb	r3, [r6, #0]
 8007354:	f108 0301 	add.w	r3, r8, #1
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 824b 	beq.w	80077f8 <_dtoa_r+0xa68>
 8007362:	601e      	str	r6, [r3, #0]
 8007364:	e248      	b.n	80077f8 <_dtoa_r+0xa68>
 8007366:	f8cd 8014 	str.w	r8, [sp, #20]
 800736a:	4633      	mov	r3, r6
 800736c:	461e      	mov	r6, r3
 800736e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007372:	2a39      	cmp	r2, #57	@ 0x39
 8007374:	d106      	bne.n	8007384 <_dtoa_r+0x5f4>
 8007376:	429f      	cmp	r7, r3
 8007378:	d1f8      	bne.n	800736c <_dtoa_r+0x5dc>
 800737a:	9a05      	ldr	r2, [sp, #20]
 800737c:	3201      	adds	r2, #1
 800737e:	9205      	str	r2, [sp, #20]
 8007380:	2230      	movs	r2, #48	@ 0x30
 8007382:	703a      	strb	r2, [r7, #0]
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	3201      	adds	r2, #1
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e7b1      	b.n	80072f0 <_dtoa_r+0x560>
 800738c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007390:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	d1b5      	bne.n	8007306 <_dtoa_r+0x576>
 800739a:	e7d4      	b.n	8007346 <_dtoa_r+0x5b6>
 800739c:	08008ac0 	.word	0x08008ac0
 80073a0:	08008a98 	.word	0x08008a98
 80073a4:	9908      	ldr	r1, [sp, #32]
 80073a6:	2900      	cmp	r1, #0
 80073a8:	f000 80e9 	beq.w	800757e <_dtoa_r+0x7ee>
 80073ac:	9907      	ldr	r1, [sp, #28]
 80073ae:	2901      	cmp	r1, #1
 80073b0:	f300 80cb 	bgt.w	800754a <_dtoa_r+0x7ba>
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	f000 80c4 	beq.w	8007542 <_dtoa_r+0x7b2>
 80073ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80073be:	9e04      	ldr	r6, [sp, #16]
 80073c0:	461c      	mov	r4, r3
 80073c2:	9305      	str	r3, [sp, #20]
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	9b06      	ldr	r3, [sp, #24]
 80073cc:	2101      	movs	r1, #1
 80073ce:	4413      	add	r3, r2
 80073d0:	4648      	mov	r0, r9
 80073d2:	9306      	str	r3, [sp, #24]
 80073d4:	f000 fc2e 	bl	8007c34 <__i2b>
 80073d8:	9b05      	ldr	r3, [sp, #20]
 80073da:	4605      	mov	r5, r0
 80073dc:	b166      	cbz	r6, 80073f8 <_dtoa_r+0x668>
 80073de:	9a06      	ldr	r2, [sp, #24]
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	dd09      	ble.n	80073f8 <_dtoa_r+0x668>
 80073e4:	42b2      	cmp	r2, r6
 80073e6:	9904      	ldr	r1, [sp, #16]
 80073e8:	bfa8      	it	ge
 80073ea:	4632      	movge	r2, r6
 80073ec:	1a89      	subs	r1, r1, r2
 80073ee:	9104      	str	r1, [sp, #16]
 80073f0:	9906      	ldr	r1, [sp, #24]
 80073f2:	1ab6      	subs	r6, r6, r2
 80073f4:	1a8a      	subs	r2, r1, r2
 80073f6:	9206      	str	r2, [sp, #24]
 80073f8:	b30b      	cbz	r3, 800743e <_dtoa_r+0x6ae>
 80073fa:	9a08      	ldr	r2, [sp, #32]
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	f000 80c5 	beq.w	800758c <_dtoa_r+0x7fc>
 8007402:	2c00      	cmp	r4, #0
 8007404:	f000 80bf 	beq.w	8007586 <_dtoa_r+0x7f6>
 8007408:	4629      	mov	r1, r5
 800740a:	4622      	mov	r2, r4
 800740c:	4648      	mov	r0, r9
 800740e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007410:	f000 fcc8 	bl	8007da4 <__pow5mult>
 8007414:	9a01      	ldr	r2, [sp, #4]
 8007416:	4601      	mov	r1, r0
 8007418:	4605      	mov	r5, r0
 800741a:	4648      	mov	r0, r9
 800741c:	f000 fc20 	bl	8007c60 <__multiply>
 8007420:	9901      	ldr	r1, [sp, #4]
 8007422:	9005      	str	r0, [sp, #20]
 8007424:	4648      	mov	r0, r9
 8007426:	f000 fb51 	bl	8007acc <_Bfree>
 800742a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800742c:	1b1b      	subs	r3, r3, r4
 800742e:	f000 80b0 	beq.w	8007592 <_dtoa_r+0x802>
 8007432:	9905      	ldr	r1, [sp, #20]
 8007434:	461a      	mov	r2, r3
 8007436:	4648      	mov	r0, r9
 8007438:	f000 fcb4 	bl	8007da4 <__pow5mult>
 800743c:	9001      	str	r0, [sp, #4]
 800743e:	2101      	movs	r1, #1
 8007440:	4648      	mov	r0, r9
 8007442:	f000 fbf7 	bl	8007c34 <__i2b>
 8007446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007448:	4604      	mov	r4, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 81da 	beq.w	8007804 <_dtoa_r+0xa74>
 8007450:	461a      	mov	r2, r3
 8007452:	4601      	mov	r1, r0
 8007454:	4648      	mov	r0, r9
 8007456:	f000 fca5 	bl	8007da4 <__pow5mult>
 800745a:	9b07      	ldr	r3, [sp, #28]
 800745c:	2b01      	cmp	r3, #1
 800745e:	4604      	mov	r4, r0
 8007460:	f300 80a0 	bgt.w	80075a4 <_dtoa_r+0x814>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 8096 	bne.w	8007598 <_dtoa_r+0x808>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007472:	2a00      	cmp	r2, #0
 8007474:	f040 8092 	bne.w	800759c <_dtoa_r+0x80c>
 8007478:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800747c:	0d12      	lsrs	r2, r2, #20
 800747e:	0512      	lsls	r2, r2, #20
 8007480:	2a00      	cmp	r2, #0
 8007482:	f000 808d 	beq.w	80075a0 <_dtoa_r+0x810>
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	3301      	adds	r3, #1
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	9b06      	ldr	r3, [sp, #24]
 800748e:	3301      	adds	r3, #1
 8007490:	9306      	str	r3, [sp, #24]
 8007492:	2301      	movs	r3, #1
 8007494:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 81b9 	beq.w	8007810 <_dtoa_r+0xa80>
 800749e:	6922      	ldr	r2, [r4, #16]
 80074a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80074a4:	6910      	ldr	r0, [r2, #16]
 80074a6:	f000 fb79 	bl	8007b9c <__hi0bits>
 80074aa:	f1c0 0020 	rsb	r0, r0, #32
 80074ae:	9b06      	ldr	r3, [sp, #24]
 80074b0:	4418      	add	r0, r3
 80074b2:	f010 001f 	ands.w	r0, r0, #31
 80074b6:	f000 8081 	beq.w	80075bc <_dtoa_r+0x82c>
 80074ba:	f1c0 0220 	rsb	r2, r0, #32
 80074be:	2a04      	cmp	r2, #4
 80074c0:	dd73      	ble.n	80075aa <_dtoa_r+0x81a>
 80074c2:	9b04      	ldr	r3, [sp, #16]
 80074c4:	f1c0 001c 	rsb	r0, r0, #28
 80074c8:	4403      	add	r3, r0
 80074ca:	9304      	str	r3, [sp, #16]
 80074cc:	9b06      	ldr	r3, [sp, #24]
 80074ce:	4406      	add	r6, r0
 80074d0:	4403      	add	r3, r0
 80074d2:	9306      	str	r3, [sp, #24]
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	dd05      	ble.n	80074e6 <_dtoa_r+0x756>
 80074da:	9901      	ldr	r1, [sp, #4]
 80074dc:	461a      	mov	r2, r3
 80074de:	4648      	mov	r0, r9
 80074e0:	f000 fcba 	bl	8007e58 <__lshift>
 80074e4:	9001      	str	r0, [sp, #4]
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dd05      	ble.n	80074f8 <_dtoa_r+0x768>
 80074ec:	4621      	mov	r1, r4
 80074ee:	461a      	mov	r2, r3
 80074f0:	4648      	mov	r0, r9
 80074f2:	f000 fcb1 	bl	8007e58 <__lshift>
 80074f6:	4604      	mov	r4, r0
 80074f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d060      	beq.n	80075c0 <_dtoa_r+0x830>
 80074fe:	9801      	ldr	r0, [sp, #4]
 8007500:	4621      	mov	r1, r4
 8007502:	f000 fd15 	bl	8007f30 <__mcmp>
 8007506:	2800      	cmp	r0, #0
 8007508:	da5a      	bge.n	80075c0 <_dtoa_r+0x830>
 800750a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800750e:	9305      	str	r3, [sp, #20]
 8007510:	9901      	ldr	r1, [sp, #4]
 8007512:	2300      	movs	r3, #0
 8007514:	220a      	movs	r2, #10
 8007516:	4648      	mov	r0, r9
 8007518:	f000 fafa 	bl	8007b10 <__multadd>
 800751c:	9b08      	ldr	r3, [sp, #32]
 800751e:	9001      	str	r0, [sp, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8177 	beq.w	8007814 <_dtoa_r+0xa84>
 8007526:	4629      	mov	r1, r5
 8007528:	2300      	movs	r3, #0
 800752a:	220a      	movs	r2, #10
 800752c:	4648      	mov	r0, r9
 800752e:	f000 faef 	bl	8007b10 <__multadd>
 8007532:	f1bb 0f00 	cmp.w	fp, #0
 8007536:	4605      	mov	r5, r0
 8007538:	dc6e      	bgt.n	8007618 <_dtoa_r+0x888>
 800753a:	9b07      	ldr	r3, [sp, #28]
 800753c:	2b02      	cmp	r3, #2
 800753e:	dc48      	bgt.n	80075d2 <_dtoa_r+0x842>
 8007540:	e06a      	b.n	8007618 <_dtoa_r+0x888>
 8007542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007544:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007548:	e739      	b.n	80073be <_dtoa_r+0x62e>
 800754a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800754e:	42a3      	cmp	r3, r4
 8007550:	db07      	blt.n	8007562 <_dtoa_r+0x7d2>
 8007552:	f1ba 0f00 	cmp.w	sl, #0
 8007556:	eba3 0404 	sub.w	r4, r3, r4
 800755a:	db0b      	blt.n	8007574 <_dtoa_r+0x7e4>
 800755c:	9e04      	ldr	r6, [sp, #16]
 800755e:	4652      	mov	r2, sl
 8007560:	e72f      	b.n	80073c2 <_dtoa_r+0x632>
 8007562:	1ae2      	subs	r2, r4, r3
 8007564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007566:	9e04      	ldr	r6, [sp, #16]
 8007568:	4413      	add	r3, r2
 800756a:	930a      	str	r3, [sp, #40]	@ 0x28
 800756c:	4652      	mov	r2, sl
 800756e:	4623      	mov	r3, r4
 8007570:	2400      	movs	r4, #0
 8007572:	e726      	b.n	80073c2 <_dtoa_r+0x632>
 8007574:	9a04      	ldr	r2, [sp, #16]
 8007576:	eba2 060a 	sub.w	r6, r2, sl
 800757a:	2200      	movs	r2, #0
 800757c:	e721      	b.n	80073c2 <_dtoa_r+0x632>
 800757e:	9e04      	ldr	r6, [sp, #16]
 8007580:	9d08      	ldr	r5, [sp, #32]
 8007582:	461c      	mov	r4, r3
 8007584:	e72a      	b.n	80073dc <_dtoa_r+0x64c>
 8007586:	9a01      	ldr	r2, [sp, #4]
 8007588:	9205      	str	r2, [sp, #20]
 800758a:	e752      	b.n	8007432 <_dtoa_r+0x6a2>
 800758c:	9901      	ldr	r1, [sp, #4]
 800758e:	461a      	mov	r2, r3
 8007590:	e751      	b.n	8007436 <_dtoa_r+0x6a6>
 8007592:	9b05      	ldr	r3, [sp, #20]
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	e752      	b.n	800743e <_dtoa_r+0x6ae>
 8007598:	2300      	movs	r3, #0
 800759a:	e77b      	b.n	8007494 <_dtoa_r+0x704>
 800759c:	9b02      	ldr	r3, [sp, #8]
 800759e:	e779      	b.n	8007494 <_dtoa_r+0x704>
 80075a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80075a2:	e778      	b.n	8007496 <_dtoa_r+0x706>
 80075a4:	2300      	movs	r3, #0
 80075a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075a8:	e779      	b.n	800749e <_dtoa_r+0x70e>
 80075aa:	d093      	beq.n	80074d4 <_dtoa_r+0x744>
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	321c      	adds	r2, #28
 80075b0:	4413      	add	r3, r2
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	9b06      	ldr	r3, [sp, #24]
 80075b6:	4416      	add	r6, r2
 80075b8:	4413      	add	r3, r2
 80075ba:	e78a      	b.n	80074d2 <_dtoa_r+0x742>
 80075bc:	4602      	mov	r2, r0
 80075be:	e7f5      	b.n	80075ac <_dtoa_r+0x81c>
 80075c0:	f1ba 0f00 	cmp.w	sl, #0
 80075c4:	f8cd 8014 	str.w	r8, [sp, #20]
 80075c8:	46d3      	mov	fp, sl
 80075ca:	dc21      	bgt.n	8007610 <_dtoa_r+0x880>
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	dd1e      	ble.n	8007610 <_dtoa_r+0x880>
 80075d2:	f1bb 0f00 	cmp.w	fp, #0
 80075d6:	f47f addc 	bne.w	8007192 <_dtoa_r+0x402>
 80075da:	4621      	mov	r1, r4
 80075dc:	465b      	mov	r3, fp
 80075de:	2205      	movs	r2, #5
 80075e0:	4648      	mov	r0, r9
 80075e2:	f000 fa95 	bl	8007b10 <__multadd>
 80075e6:	4601      	mov	r1, r0
 80075e8:	4604      	mov	r4, r0
 80075ea:	9801      	ldr	r0, [sp, #4]
 80075ec:	f000 fca0 	bl	8007f30 <__mcmp>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f77f adce 	ble.w	8007192 <_dtoa_r+0x402>
 80075f6:	463e      	mov	r6, r7
 80075f8:	2331      	movs	r3, #49	@ 0x31
 80075fa:	f806 3b01 	strb.w	r3, [r6], #1
 80075fe:	9b05      	ldr	r3, [sp, #20]
 8007600:	3301      	adds	r3, #1
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	e5c9      	b.n	800719a <_dtoa_r+0x40a>
 8007606:	f8cd 8014 	str.w	r8, [sp, #20]
 800760a:	4654      	mov	r4, sl
 800760c:	4625      	mov	r5, r4
 800760e:	e7f2      	b.n	80075f6 <_dtoa_r+0x866>
 8007610:	9b08      	ldr	r3, [sp, #32]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 8102 	beq.w	800781c <_dtoa_r+0xa8c>
 8007618:	2e00      	cmp	r6, #0
 800761a:	dd05      	ble.n	8007628 <_dtoa_r+0x898>
 800761c:	4629      	mov	r1, r5
 800761e:	4632      	mov	r2, r6
 8007620:	4648      	mov	r0, r9
 8007622:	f000 fc19 	bl	8007e58 <__lshift>
 8007626:	4605      	mov	r5, r0
 8007628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d058      	beq.n	80076e0 <_dtoa_r+0x950>
 800762e:	6869      	ldr	r1, [r5, #4]
 8007630:	4648      	mov	r0, r9
 8007632:	f000 fa0b 	bl	8007a4c <_Balloc>
 8007636:	4606      	mov	r6, r0
 8007638:	b928      	cbnz	r0, 8007646 <_dtoa_r+0x8b6>
 800763a:	4b82      	ldr	r3, [pc, #520]	@ (8007844 <_dtoa_r+0xab4>)
 800763c:	4602      	mov	r2, r0
 800763e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007642:	f7ff bbbe 	b.w	8006dc2 <_dtoa_r+0x32>
 8007646:	692a      	ldr	r2, [r5, #16]
 8007648:	3202      	adds	r2, #2
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	f105 010c 	add.w	r1, r5, #12
 8007650:	300c      	adds	r0, #12
 8007652:	f000 fff7 	bl	8008644 <memcpy>
 8007656:	2201      	movs	r2, #1
 8007658:	4631      	mov	r1, r6
 800765a:	4648      	mov	r0, r9
 800765c:	f000 fbfc 	bl	8007e58 <__lshift>
 8007660:	1c7b      	adds	r3, r7, #1
 8007662:	9304      	str	r3, [sp, #16]
 8007664:	eb07 030b 	add.w	r3, r7, fp
 8007668:	9309      	str	r3, [sp, #36]	@ 0x24
 800766a:	9b02      	ldr	r3, [sp, #8]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	46a8      	mov	r8, r5
 8007672:	9308      	str	r3, [sp, #32]
 8007674:	4605      	mov	r5, r0
 8007676:	9b04      	ldr	r3, [sp, #16]
 8007678:	9801      	ldr	r0, [sp, #4]
 800767a:	4621      	mov	r1, r4
 800767c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007680:	f7ff fafd 	bl	8006c7e <quorem>
 8007684:	4641      	mov	r1, r8
 8007686:	9002      	str	r0, [sp, #8]
 8007688:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800768c:	9801      	ldr	r0, [sp, #4]
 800768e:	f000 fc4f 	bl	8007f30 <__mcmp>
 8007692:	462a      	mov	r2, r5
 8007694:	9006      	str	r0, [sp, #24]
 8007696:	4621      	mov	r1, r4
 8007698:	4648      	mov	r0, r9
 800769a:	f000 fc65 	bl	8007f68 <__mdiff>
 800769e:	68c2      	ldr	r2, [r0, #12]
 80076a0:	4606      	mov	r6, r0
 80076a2:	b9fa      	cbnz	r2, 80076e4 <_dtoa_r+0x954>
 80076a4:	4601      	mov	r1, r0
 80076a6:	9801      	ldr	r0, [sp, #4]
 80076a8:	f000 fc42 	bl	8007f30 <__mcmp>
 80076ac:	4602      	mov	r2, r0
 80076ae:	4631      	mov	r1, r6
 80076b0:	4648      	mov	r0, r9
 80076b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80076b4:	f000 fa0a 	bl	8007acc <_Bfree>
 80076b8:	9b07      	ldr	r3, [sp, #28]
 80076ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076bc:	9e04      	ldr	r6, [sp, #16]
 80076be:	ea42 0103 	orr.w	r1, r2, r3
 80076c2:	9b08      	ldr	r3, [sp, #32]
 80076c4:	4319      	orrs	r1, r3
 80076c6:	d10f      	bne.n	80076e8 <_dtoa_r+0x958>
 80076c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80076cc:	d028      	beq.n	8007720 <_dtoa_r+0x990>
 80076ce:	9b06      	ldr	r3, [sp, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dd02      	ble.n	80076da <_dtoa_r+0x94a>
 80076d4:	9b02      	ldr	r3, [sp, #8]
 80076d6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80076da:	f88b a000 	strb.w	sl, [fp]
 80076de:	e55e      	b.n	800719e <_dtoa_r+0x40e>
 80076e0:	4628      	mov	r0, r5
 80076e2:	e7bd      	b.n	8007660 <_dtoa_r+0x8d0>
 80076e4:	2201      	movs	r2, #1
 80076e6:	e7e2      	b.n	80076ae <_dtoa_r+0x91e>
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	db04      	blt.n	80076f8 <_dtoa_r+0x968>
 80076ee:	9907      	ldr	r1, [sp, #28]
 80076f0:	430b      	orrs	r3, r1
 80076f2:	9908      	ldr	r1, [sp, #32]
 80076f4:	430b      	orrs	r3, r1
 80076f6:	d120      	bne.n	800773a <_dtoa_r+0x9aa>
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	ddee      	ble.n	80076da <_dtoa_r+0x94a>
 80076fc:	9901      	ldr	r1, [sp, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	4648      	mov	r0, r9
 8007702:	f000 fba9 	bl	8007e58 <__lshift>
 8007706:	4621      	mov	r1, r4
 8007708:	9001      	str	r0, [sp, #4]
 800770a:	f000 fc11 	bl	8007f30 <__mcmp>
 800770e:	2800      	cmp	r0, #0
 8007710:	dc03      	bgt.n	800771a <_dtoa_r+0x98a>
 8007712:	d1e2      	bne.n	80076da <_dtoa_r+0x94a>
 8007714:	f01a 0f01 	tst.w	sl, #1
 8007718:	d0df      	beq.n	80076da <_dtoa_r+0x94a>
 800771a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800771e:	d1d9      	bne.n	80076d4 <_dtoa_r+0x944>
 8007720:	2339      	movs	r3, #57	@ 0x39
 8007722:	f88b 3000 	strb.w	r3, [fp]
 8007726:	4633      	mov	r3, r6
 8007728:	461e      	mov	r6, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007730:	2a39      	cmp	r2, #57	@ 0x39
 8007732:	d052      	beq.n	80077da <_dtoa_r+0xa4a>
 8007734:	3201      	adds	r2, #1
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e531      	b.n	800719e <_dtoa_r+0x40e>
 800773a:	2a00      	cmp	r2, #0
 800773c:	dd07      	ble.n	800774e <_dtoa_r+0x9be>
 800773e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007742:	d0ed      	beq.n	8007720 <_dtoa_r+0x990>
 8007744:	f10a 0301 	add.w	r3, sl, #1
 8007748:	f88b 3000 	strb.w	r3, [fp]
 800774c:	e527      	b.n	800719e <_dtoa_r+0x40e>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007752:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007756:	4293      	cmp	r3, r2
 8007758:	d029      	beq.n	80077ae <_dtoa_r+0xa1e>
 800775a:	9901      	ldr	r1, [sp, #4]
 800775c:	2300      	movs	r3, #0
 800775e:	220a      	movs	r2, #10
 8007760:	4648      	mov	r0, r9
 8007762:	f000 f9d5 	bl	8007b10 <__multadd>
 8007766:	45a8      	cmp	r8, r5
 8007768:	9001      	str	r0, [sp, #4]
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	f04f 020a 	mov.w	r2, #10
 8007772:	4641      	mov	r1, r8
 8007774:	4648      	mov	r0, r9
 8007776:	d107      	bne.n	8007788 <_dtoa_r+0x9f8>
 8007778:	f000 f9ca 	bl	8007b10 <__multadd>
 800777c:	4680      	mov	r8, r0
 800777e:	4605      	mov	r5, r0
 8007780:	9b04      	ldr	r3, [sp, #16]
 8007782:	3301      	adds	r3, #1
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	e776      	b.n	8007676 <_dtoa_r+0x8e6>
 8007788:	f000 f9c2 	bl	8007b10 <__multadd>
 800778c:	4629      	mov	r1, r5
 800778e:	4680      	mov	r8, r0
 8007790:	2300      	movs	r3, #0
 8007792:	220a      	movs	r2, #10
 8007794:	4648      	mov	r0, r9
 8007796:	f000 f9bb 	bl	8007b10 <__multadd>
 800779a:	4605      	mov	r5, r0
 800779c:	e7f0      	b.n	8007780 <_dtoa_r+0x9f0>
 800779e:	f1bb 0f00 	cmp.w	fp, #0
 80077a2:	bfcc      	ite	gt
 80077a4:	465e      	movgt	r6, fp
 80077a6:	2601      	movle	r6, #1
 80077a8:	443e      	add	r6, r7
 80077aa:	f04f 0800 	mov.w	r8, #0
 80077ae:	9901      	ldr	r1, [sp, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	4648      	mov	r0, r9
 80077b4:	f000 fb50 	bl	8007e58 <__lshift>
 80077b8:	4621      	mov	r1, r4
 80077ba:	9001      	str	r0, [sp, #4]
 80077bc:	f000 fbb8 	bl	8007f30 <__mcmp>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	dcb0      	bgt.n	8007726 <_dtoa_r+0x996>
 80077c4:	d102      	bne.n	80077cc <_dtoa_r+0xa3c>
 80077c6:	f01a 0f01 	tst.w	sl, #1
 80077ca:	d1ac      	bne.n	8007726 <_dtoa_r+0x996>
 80077cc:	4633      	mov	r3, r6
 80077ce:	461e      	mov	r6, r3
 80077d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077d4:	2a30      	cmp	r2, #48	@ 0x30
 80077d6:	d0fa      	beq.n	80077ce <_dtoa_r+0xa3e>
 80077d8:	e4e1      	b.n	800719e <_dtoa_r+0x40e>
 80077da:	429f      	cmp	r7, r3
 80077dc:	d1a4      	bne.n	8007728 <_dtoa_r+0x998>
 80077de:	9b05      	ldr	r3, [sp, #20]
 80077e0:	3301      	adds	r3, #1
 80077e2:	9305      	str	r3, [sp, #20]
 80077e4:	2331      	movs	r3, #49	@ 0x31
 80077e6:	703b      	strb	r3, [r7, #0]
 80077e8:	e4d9      	b.n	800719e <_dtoa_r+0x40e>
 80077ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80077ec:	4f16      	ldr	r7, [pc, #88]	@ (8007848 <_dtoa_r+0xab8>)
 80077ee:	b11b      	cbz	r3, 80077f8 <_dtoa_r+0xa68>
 80077f0:	f107 0308 	add.w	r3, r7, #8
 80077f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	4638      	mov	r0, r7
 80077fa:	b011      	add	sp, #68	@ 0x44
 80077fc:	ecbd 8b02 	vpop	{d8}
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	2b01      	cmp	r3, #1
 8007808:	f77f ae2c 	ble.w	8007464 <_dtoa_r+0x6d4>
 800780c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800780e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007810:	2001      	movs	r0, #1
 8007812:	e64c      	b.n	80074ae <_dtoa_r+0x71e>
 8007814:	f1bb 0f00 	cmp.w	fp, #0
 8007818:	f77f aed8 	ble.w	80075cc <_dtoa_r+0x83c>
 800781c:	463e      	mov	r6, r7
 800781e:	9801      	ldr	r0, [sp, #4]
 8007820:	4621      	mov	r1, r4
 8007822:	f7ff fa2c 	bl	8006c7e <quorem>
 8007826:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800782a:	f806 ab01 	strb.w	sl, [r6], #1
 800782e:	1bf2      	subs	r2, r6, r7
 8007830:	4593      	cmp	fp, r2
 8007832:	ddb4      	ble.n	800779e <_dtoa_r+0xa0e>
 8007834:	9901      	ldr	r1, [sp, #4]
 8007836:	2300      	movs	r3, #0
 8007838:	220a      	movs	r2, #10
 800783a:	4648      	mov	r0, r9
 800783c:	f000 f968 	bl	8007b10 <__multadd>
 8007840:	9001      	str	r0, [sp, #4]
 8007842:	e7ec      	b.n	800781e <_dtoa_r+0xa8e>
 8007844:	080089c4 	.word	0x080089c4
 8007848:	08008948 	.word	0x08008948

0800784c <_free_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4605      	mov	r5, r0
 8007850:	2900      	cmp	r1, #0
 8007852:	d041      	beq.n	80078d8 <_free_r+0x8c>
 8007854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007858:	1f0c      	subs	r4, r1, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfb8      	it	lt
 800785e:	18e4      	addlt	r4, r4, r3
 8007860:	f000 f8e8 	bl	8007a34 <__malloc_lock>
 8007864:	4a1d      	ldr	r2, [pc, #116]	@ (80078dc <_free_r+0x90>)
 8007866:	6813      	ldr	r3, [r2, #0]
 8007868:	b933      	cbnz	r3, 8007878 <_free_r+0x2c>
 800786a:	6063      	str	r3, [r4, #4]
 800786c:	6014      	str	r4, [r2, #0]
 800786e:	4628      	mov	r0, r5
 8007870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007874:	f000 b8e4 	b.w	8007a40 <__malloc_unlock>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d908      	bls.n	800788e <_free_r+0x42>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	1821      	adds	r1, r4, r0
 8007880:	428b      	cmp	r3, r1
 8007882:	bf01      	itttt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	1809      	addeq	r1, r1, r0
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	e7ed      	b.n	800786a <_free_r+0x1e>
 800788e:	461a      	mov	r2, r3
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	b10b      	cbz	r3, 8007898 <_free_r+0x4c>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d9fa      	bls.n	800788e <_free_r+0x42>
 8007898:	6811      	ldr	r1, [r2, #0]
 800789a:	1850      	adds	r0, r2, r1
 800789c:	42a0      	cmp	r0, r4
 800789e:	d10b      	bne.n	80078b8 <_free_r+0x6c>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	4401      	add	r1, r0
 80078a4:	1850      	adds	r0, r2, r1
 80078a6:	4283      	cmp	r3, r0
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	d1e0      	bne.n	800786e <_free_r+0x22>
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	6053      	str	r3, [r2, #4]
 80078b2:	4408      	add	r0, r1
 80078b4:	6010      	str	r0, [r2, #0]
 80078b6:	e7da      	b.n	800786e <_free_r+0x22>
 80078b8:	d902      	bls.n	80078c0 <_free_r+0x74>
 80078ba:	230c      	movs	r3, #12
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	e7d6      	b.n	800786e <_free_r+0x22>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	1821      	adds	r1, r4, r0
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf04      	itt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	bf04      	itt	eq
 80078d0:	1809      	addeq	r1, r1, r0
 80078d2:	6021      	streq	r1, [r4, #0]
 80078d4:	6054      	str	r4, [r2, #4]
 80078d6:	e7ca      	b.n	800786e <_free_r+0x22>
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	bf00      	nop
 80078dc:	240003f8 	.word	0x240003f8

080078e0 <malloc>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	@ (80078ec <malloc+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f000 b825 	b.w	8007934 <_malloc_r>
 80078ea:	bf00      	nop
 80078ec:	2400001c 	.word	0x2400001c

080078f0 <sbrk_aligned>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007930 <sbrk_aligned+0x40>)
 80078f4:	460c      	mov	r4, r1
 80078f6:	6831      	ldr	r1, [r6, #0]
 80078f8:	4605      	mov	r5, r0
 80078fa:	b911      	cbnz	r1, 8007902 <sbrk_aligned+0x12>
 80078fc:	f000 fe92 	bl	8008624 <_sbrk_r>
 8007900:	6030      	str	r0, [r6, #0]
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	f000 fe8d 	bl	8008624 <_sbrk_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	d103      	bne.n	8007916 <sbrk_aligned+0x26>
 800790e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007912:	4620      	mov	r0, r4
 8007914:	bd70      	pop	{r4, r5, r6, pc}
 8007916:	1cc4      	adds	r4, r0, #3
 8007918:	f024 0403 	bic.w	r4, r4, #3
 800791c:	42a0      	cmp	r0, r4
 800791e:	d0f8      	beq.n	8007912 <sbrk_aligned+0x22>
 8007920:	1a21      	subs	r1, r4, r0
 8007922:	4628      	mov	r0, r5
 8007924:	f000 fe7e 	bl	8008624 <_sbrk_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d1f2      	bne.n	8007912 <sbrk_aligned+0x22>
 800792c:	e7ef      	b.n	800790e <sbrk_aligned+0x1e>
 800792e:	bf00      	nop
 8007930:	240003f4 	.word	0x240003f4

08007934 <_malloc_r>:
 8007934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007938:	1ccd      	adds	r5, r1, #3
 800793a:	f025 0503 	bic.w	r5, r5, #3
 800793e:	3508      	adds	r5, #8
 8007940:	2d0c      	cmp	r5, #12
 8007942:	bf38      	it	cc
 8007944:	250c      	movcc	r5, #12
 8007946:	2d00      	cmp	r5, #0
 8007948:	4606      	mov	r6, r0
 800794a:	db01      	blt.n	8007950 <_malloc_r+0x1c>
 800794c:	42a9      	cmp	r1, r5
 800794e:	d904      	bls.n	800795a <_malloc_r+0x26>
 8007950:	230c      	movs	r3, #12
 8007952:	6033      	str	r3, [r6, #0]
 8007954:	2000      	movs	r0, #0
 8007956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a30 <_malloc_r+0xfc>
 800795e:	f000 f869 	bl	8007a34 <__malloc_lock>
 8007962:	f8d8 3000 	ldr.w	r3, [r8]
 8007966:	461c      	mov	r4, r3
 8007968:	bb44      	cbnz	r4, 80079bc <_malloc_r+0x88>
 800796a:	4629      	mov	r1, r5
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff ffbf 	bl	80078f0 <sbrk_aligned>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	4604      	mov	r4, r0
 8007976:	d158      	bne.n	8007a2a <_malloc_r+0xf6>
 8007978:	f8d8 4000 	ldr.w	r4, [r8]
 800797c:	4627      	mov	r7, r4
 800797e:	2f00      	cmp	r7, #0
 8007980:	d143      	bne.n	8007a0a <_malloc_r+0xd6>
 8007982:	2c00      	cmp	r4, #0
 8007984:	d04b      	beq.n	8007a1e <_malloc_r+0xea>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	4639      	mov	r1, r7
 800798a:	4630      	mov	r0, r6
 800798c:	eb04 0903 	add.w	r9, r4, r3
 8007990:	f000 fe48 	bl	8008624 <_sbrk_r>
 8007994:	4581      	cmp	r9, r0
 8007996:	d142      	bne.n	8007a1e <_malloc_r+0xea>
 8007998:	6821      	ldr	r1, [r4, #0]
 800799a:	1a6d      	subs	r5, r5, r1
 800799c:	4629      	mov	r1, r5
 800799e:	4630      	mov	r0, r6
 80079a0:	f7ff ffa6 	bl	80078f0 <sbrk_aligned>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d03a      	beq.n	8007a1e <_malloc_r+0xea>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	442b      	add	r3, r5
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	f8d8 3000 	ldr.w	r3, [r8]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	bb62      	cbnz	r2, 8007a10 <_malloc_r+0xdc>
 80079b6:	f8c8 7000 	str.w	r7, [r8]
 80079ba:	e00f      	b.n	80079dc <_malloc_r+0xa8>
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	1b52      	subs	r2, r2, r5
 80079c0:	d420      	bmi.n	8007a04 <_malloc_r+0xd0>
 80079c2:	2a0b      	cmp	r2, #11
 80079c4:	d917      	bls.n	80079f6 <_malloc_r+0xc2>
 80079c6:	1961      	adds	r1, r4, r5
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	6025      	str	r5, [r4, #0]
 80079cc:	bf18      	it	ne
 80079ce:	6059      	strne	r1, [r3, #4]
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	bf08      	it	eq
 80079d4:	f8c8 1000 	streq.w	r1, [r8]
 80079d8:	5162      	str	r2, [r4, r5]
 80079da:	604b      	str	r3, [r1, #4]
 80079dc:	4630      	mov	r0, r6
 80079de:	f000 f82f 	bl	8007a40 <__malloc_unlock>
 80079e2:	f104 000b 	add.w	r0, r4, #11
 80079e6:	1d23      	adds	r3, r4, #4
 80079e8:	f020 0007 	bic.w	r0, r0, #7
 80079ec:	1ac2      	subs	r2, r0, r3
 80079ee:	bf1c      	itt	ne
 80079f0:	1a1b      	subne	r3, r3, r0
 80079f2:	50a3      	strne	r3, [r4, r2]
 80079f4:	e7af      	b.n	8007956 <_malloc_r+0x22>
 80079f6:	6862      	ldr	r2, [r4, #4]
 80079f8:	42a3      	cmp	r3, r4
 80079fa:	bf0c      	ite	eq
 80079fc:	f8c8 2000 	streq.w	r2, [r8]
 8007a00:	605a      	strne	r2, [r3, #4]
 8007a02:	e7eb      	b.n	80079dc <_malloc_r+0xa8>
 8007a04:	4623      	mov	r3, r4
 8007a06:	6864      	ldr	r4, [r4, #4]
 8007a08:	e7ae      	b.n	8007968 <_malloc_r+0x34>
 8007a0a:	463c      	mov	r4, r7
 8007a0c:	687f      	ldr	r7, [r7, #4]
 8007a0e:	e7b6      	b.n	800797e <_malloc_r+0x4a>
 8007a10:	461a      	mov	r2, r3
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	d1fb      	bne.n	8007a10 <_malloc_r+0xdc>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6053      	str	r3, [r2, #4]
 8007a1c:	e7de      	b.n	80079dc <_malloc_r+0xa8>
 8007a1e:	230c      	movs	r3, #12
 8007a20:	6033      	str	r3, [r6, #0]
 8007a22:	4630      	mov	r0, r6
 8007a24:	f000 f80c 	bl	8007a40 <__malloc_unlock>
 8007a28:	e794      	b.n	8007954 <_malloc_r+0x20>
 8007a2a:	6005      	str	r5, [r0, #0]
 8007a2c:	e7d6      	b.n	80079dc <_malloc_r+0xa8>
 8007a2e:	bf00      	nop
 8007a30:	240003f8 	.word	0x240003f8

08007a34 <__malloc_lock>:
 8007a34:	4801      	ldr	r0, [pc, #4]	@ (8007a3c <__malloc_lock+0x8>)
 8007a36:	f7ff b920 	b.w	8006c7a <__retarget_lock_acquire_recursive>
 8007a3a:	bf00      	nop
 8007a3c:	240003f0 	.word	0x240003f0

08007a40 <__malloc_unlock>:
 8007a40:	4801      	ldr	r0, [pc, #4]	@ (8007a48 <__malloc_unlock+0x8>)
 8007a42:	f7ff b91b 	b.w	8006c7c <__retarget_lock_release_recursive>
 8007a46:	bf00      	nop
 8007a48:	240003f0 	.word	0x240003f0

08007a4c <_Balloc>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	69c6      	ldr	r6, [r0, #28]
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	b976      	cbnz	r6, 8007a74 <_Balloc+0x28>
 8007a56:	2010      	movs	r0, #16
 8007a58:	f7ff ff42 	bl	80078e0 <malloc>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	61e0      	str	r0, [r4, #28]
 8007a60:	b920      	cbnz	r0, 8007a6c <_Balloc+0x20>
 8007a62:	4b18      	ldr	r3, [pc, #96]	@ (8007ac4 <_Balloc+0x78>)
 8007a64:	4818      	ldr	r0, [pc, #96]	@ (8007ac8 <_Balloc+0x7c>)
 8007a66:	216b      	movs	r1, #107	@ 0x6b
 8007a68:	f000 fdfa 	bl	8008660 <__assert_func>
 8007a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a70:	6006      	str	r6, [r0, #0]
 8007a72:	60c6      	str	r6, [r0, #12]
 8007a74:	69e6      	ldr	r6, [r4, #28]
 8007a76:	68f3      	ldr	r3, [r6, #12]
 8007a78:	b183      	cbz	r3, 8007a9c <_Balloc+0x50>
 8007a7a:	69e3      	ldr	r3, [r4, #28]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a82:	b9b8      	cbnz	r0, 8007ab4 <_Balloc+0x68>
 8007a84:	2101      	movs	r1, #1
 8007a86:	fa01 f605 	lsl.w	r6, r1, r5
 8007a8a:	1d72      	adds	r2, r6, #5
 8007a8c:	0092      	lsls	r2, r2, #2
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fe04 	bl	800869c <_calloc_r>
 8007a94:	b160      	cbz	r0, 8007ab0 <_Balloc+0x64>
 8007a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a9a:	e00e      	b.n	8007aba <_Balloc+0x6e>
 8007a9c:	2221      	movs	r2, #33	@ 0x21
 8007a9e:	2104      	movs	r1, #4
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fdfb 	bl	800869c <_calloc_r>
 8007aa6:	69e3      	ldr	r3, [r4, #28]
 8007aa8:	60f0      	str	r0, [r6, #12]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e4      	bne.n	8007a7a <_Balloc+0x2e>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	6802      	ldr	r2, [r0, #0]
 8007ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aba:	2300      	movs	r3, #0
 8007abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ac0:	e7f7      	b.n	8007ab2 <_Balloc+0x66>
 8007ac2:	bf00      	nop
 8007ac4:	08008955 	.word	0x08008955
 8007ac8:	080089d5 	.word	0x080089d5

08007acc <_Bfree>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	69c6      	ldr	r6, [r0, #28]
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	b976      	cbnz	r6, 8007af4 <_Bfree+0x28>
 8007ad6:	2010      	movs	r0, #16
 8007ad8:	f7ff ff02 	bl	80078e0 <malloc>
 8007adc:	4602      	mov	r2, r0
 8007ade:	61e8      	str	r0, [r5, #28]
 8007ae0:	b920      	cbnz	r0, 8007aec <_Bfree+0x20>
 8007ae2:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <_Bfree+0x3c>)
 8007ae4:	4809      	ldr	r0, [pc, #36]	@ (8007b0c <_Bfree+0x40>)
 8007ae6:	218f      	movs	r1, #143	@ 0x8f
 8007ae8:	f000 fdba 	bl	8008660 <__assert_func>
 8007aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007af0:	6006      	str	r6, [r0, #0]
 8007af2:	60c6      	str	r6, [r0, #12]
 8007af4:	b13c      	cbz	r4, 8007b06 <_Bfree+0x3a>
 8007af6:	69eb      	ldr	r3, [r5, #28]
 8007af8:	6862      	ldr	r2, [r4, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b00:	6021      	str	r1, [r4, #0]
 8007b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	08008955 	.word	0x08008955
 8007b0c:	080089d5 	.word	0x080089d5

08007b10 <__multadd>:
 8007b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b14:	690d      	ldr	r5, [r1, #16]
 8007b16:	4607      	mov	r7, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	461e      	mov	r6, r3
 8007b1c:	f101 0c14 	add.w	ip, r1, #20
 8007b20:	2000      	movs	r0, #0
 8007b22:	f8dc 3000 	ldr.w	r3, [ip]
 8007b26:	b299      	uxth	r1, r3
 8007b28:	fb02 6101 	mla	r1, r2, r1, r6
 8007b2c:	0c1e      	lsrs	r6, r3, #16
 8007b2e:	0c0b      	lsrs	r3, r1, #16
 8007b30:	fb02 3306 	mla	r3, r2, r6, r3
 8007b34:	b289      	uxth	r1, r1
 8007b36:	3001      	adds	r0, #1
 8007b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b3c:	4285      	cmp	r5, r0
 8007b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8007b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b46:	dcec      	bgt.n	8007b22 <__multadd+0x12>
 8007b48:	b30e      	cbz	r6, 8007b8e <__multadd+0x7e>
 8007b4a:	68a3      	ldr	r3, [r4, #8]
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dc19      	bgt.n	8007b84 <__multadd+0x74>
 8007b50:	6861      	ldr	r1, [r4, #4]
 8007b52:	4638      	mov	r0, r7
 8007b54:	3101      	adds	r1, #1
 8007b56:	f7ff ff79 	bl	8007a4c <_Balloc>
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	b928      	cbnz	r0, 8007b6a <__multadd+0x5a>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	4b0c      	ldr	r3, [pc, #48]	@ (8007b94 <__multadd+0x84>)
 8007b62:	480d      	ldr	r0, [pc, #52]	@ (8007b98 <__multadd+0x88>)
 8007b64:	21ba      	movs	r1, #186	@ 0xba
 8007b66:	f000 fd7b 	bl	8008660 <__assert_func>
 8007b6a:	6922      	ldr	r2, [r4, #16]
 8007b6c:	3202      	adds	r2, #2
 8007b6e:	f104 010c 	add.w	r1, r4, #12
 8007b72:	0092      	lsls	r2, r2, #2
 8007b74:	300c      	adds	r0, #12
 8007b76:	f000 fd65 	bl	8008644 <memcpy>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff ffa5 	bl	8007acc <_Bfree>
 8007b82:	4644      	mov	r4, r8
 8007b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b88:	3501      	adds	r5, #1
 8007b8a:	615e      	str	r6, [r3, #20]
 8007b8c:	6125      	str	r5, [r4, #16]
 8007b8e:	4620      	mov	r0, r4
 8007b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b94:	080089c4 	.word	0x080089c4
 8007b98:	080089d5 	.word	0x080089d5

08007b9c <__hi0bits>:
 8007b9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	bf36      	itet	cc
 8007ba4:	0403      	lslcc	r3, r0, #16
 8007ba6:	2000      	movcs	r0, #0
 8007ba8:	2010      	movcc	r0, #16
 8007baa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bae:	bf3c      	itt	cc
 8007bb0:	021b      	lslcc	r3, r3, #8
 8007bb2:	3008      	addcc	r0, #8
 8007bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bb8:	bf3c      	itt	cc
 8007bba:	011b      	lslcc	r3, r3, #4
 8007bbc:	3004      	addcc	r0, #4
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc2:	bf3c      	itt	cc
 8007bc4:	009b      	lslcc	r3, r3, #2
 8007bc6:	3002      	addcc	r0, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	db05      	blt.n	8007bd8 <__hi0bits+0x3c>
 8007bcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007bd0:	f100 0001 	add.w	r0, r0, #1
 8007bd4:	bf08      	it	eq
 8007bd6:	2020      	moveq	r0, #32
 8007bd8:	4770      	bx	lr

08007bda <__lo0bits>:
 8007bda:	6803      	ldr	r3, [r0, #0]
 8007bdc:	4602      	mov	r2, r0
 8007bde:	f013 0007 	ands.w	r0, r3, #7
 8007be2:	d00b      	beq.n	8007bfc <__lo0bits+0x22>
 8007be4:	07d9      	lsls	r1, r3, #31
 8007be6:	d421      	bmi.n	8007c2c <__lo0bits+0x52>
 8007be8:	0798      	lsls	r0, r3, #30
 8007bea:	bf49      	itett	mi
 8007bec:	085b      	lsrmi	r3, r3, #1
 8007bee:	089b      	lsrpl	r3, r3, #2
 8007bf0:	2001      	movmi	r0, #1
 8007bf2:	6013      	strmi	r3, [r2, #0]
 8007bf4:	bf5c      	itt	pl
 8007bf6:	6013      	strpl	r3, [r2, #0]
 8007bf8:	2002      	movpl	r0, #2
 8007bfa:	4770      	bx	lr
 8007bfc:	b299      	uxth	r1, r3
 8007bfe:	b909      	cbnz	r1, 8007c04 <__lo0bits+0x2a>
 8007c00:	0c1b      	lsrs	r3, r3, #16
 8007c02:	2010      	movs	r0, #16
 8007c04:	b2d9      	uxtb	r1, r3
 8007c06:	b909      	cbnz	r1, 8007c0c <__lo0bits+0x32>
 8007c08:	3008      	adds	r0, #8
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	0719      	lsls	r1, r3, #28
 8007c0e:	bf04      	itt	eq
 8007c10:	091b      	lsreq	r3, r3, #4
 8007c12:	3004      	addeq	r0, #4
 8007c14:	0799      	lsls	r1, r3, #30
 8007c16:	bf04      	itt	eq
 8007c18:	089b      	lsreq	r3, r3, #2
 8007c1a:	3002      	addeq	r0, #2
 8007c1c:	07d9      	lsls	r1, r3, #31
 8007c1e:	d403      	bmi.n	8007c28 <__lo0bits+0x4e>
 8007c20:	085b      	lsrs	r3, r3, #1
 8007c22:	f100 0001 	add.w	r0, r0, #1
 8007c26:	d003      	beq.n	8007c30 <__lo0bits+0x56>
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	4770      	bx	lr
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	4770      	bx	lr
 8007c30:	2020      	movs	r0, #32
 8007c32:	4770      	bx	lr

08007c34 <__i2b>:
 8007c34:	b510      	push	{r4, lr}
 8007c36:	460c      	mov	r4, r1
 8007c38:	2101      	movs	r1, #1
 8007c3a:	f7ff ff07 	bl	8007a4c <_Balloc>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	b928      	cbnz	r0, 8007c4e <__i2b+0x1a>
 8007c42:	4b05      	ldr	r3, [pc, #20]	@ (8007c58 <__i2b+0x24>)
 8007c44:	4805      	ldr	r0, [pc, #20]	@ (8007c5c <__i2b+0x28>)
 8007c46:	f240 1145 	movw	r1, #325	@ 0x145
 8007c4a:	f000 fd09 	bl	8008660 <__assert_func>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	6144      	str	r4, [r0, #20]
 8007c52:	6103      	str	r3, [r0, #16]
 8007c54:	bd10      	pop	{r4, pc}
 8007c56:	bf00      	nop
 8007c58:	080089c4 	.word	0x080089c4
 8007c5c:	080089d5 	.word	0x080089d5

08007c60 <__multiply>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	4617      	mov	r7, r2
 8007c66:	690a      	ldr	r2, [r1, #16]
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	bfa8      	it	ge
 8007c6e:	463b      	movge	r3, r7
 8007c70:	4689      	mov	r9, r1
 8007c72:	bfa4      	itt	ge
 8007c74:	460f      	movge	r7, r1
 8007c76:	4699      	movge	r9, r3
 8007c78:	693d      	ldr	r5, [r7, #16]
 8007c7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	eb05 060a 	add.w	r6, r5, sl
 8007c86:	42b3      	cmp	r3, r6
 8007c88:	b085      	sub	sp, #20
 8007c8a:	bfb8      	it	lt
 8007c8c:	3101      	addlt	r1, #1
 8007c8e:	f7ff fedd 	bl	8007a4c <_Balloc>
 8007c92:	b930      	cbnz	r0, 8007ca2 <__multiply+0x42>
 8007c94:	4602      	mov	r2, r0
 8007c96:	4b41      	ldr	r3, [pc, #260]	@ (8007d9c <__multiply+0x13c>)
 8007c98:	4841      	ldr	r0, [pc, #260]	@ (8007da0 <__multiply+0x140>)
 8007c9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c9e:	f000 fcdf 	bl	8008660 <__assert_func>
 8007ca2:	f100 0414 	add.w	r4, r0, #20
 8007ca6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007caa:	4623      	mov	r3, r4
 8007cac:	2200      	movs	r2, #0
 8007cae:	4573      	cmp	r3, lr
 8007cb0:	d320      	bcc.n	8007cf4 <__multiply+0x94>
 8007cb2:	f107 0814 	add.w	r8, r7, #20
 8007cb6:	f109 0114 	add.w	r1, r9, #20
 8007cba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007cbe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007cc2:	9302      	str	r3, [sp, #8]
 8007cc4:	1beb      	subs	r3, r5, r7
 8007cc6:	3b15      	subs	r3, #21
 8007cc8:	f023 0303 	bic.w	r3, r3, #3
 8007ccc:	3304      	adds	r3, #4
 8007cce:	3715      	adds	r7, #21
 8007cd0:	42bd      	cmp	r5, r7
 8007cd2:	bf38      	it	cc
 8007cd4:	2304      	movcc	r3, #4
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	9103      	str	r1, [sp, #12]
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	d80c      	bhi.n	8007cfa <__multiply+0x9a>
 8007ce0:	2e00      	cmp	r6, #0
 8007ce2:	dd03      	ble.n	8007cec <__multiply+0x8c>
 8007ce4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d055      	beq.n	8007d98 <__multiply+0x138>
 8007cec:	6106      	str	r6, [r0, #16]
 8007cee:	b005      	add	sp, #20
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	f843 2b04 	str.w	r2, [r3], #4
 8007cf8:	e7d9      	b.n	8007cae <__multiply+0x4e>
 8007cfa:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cfe:	f1ba 0f00 	cmp.w	sl, #0
 8007d02:	d01f      	beq.n	8007d44 <__multiply+0xe4>
 8007d04:	46c4      	mov	ip, r8
 8007d06:	46a1      	mov	r9, r4
 8007d08:	2700      	movs	r7, #0
 8007d0a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d0e:	f8d9 3000 	ldr.w	r3, [r9]
 8007d12:	fa1f fb82 	uxth.w	fp, r2
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d1c:	443b      	add	r3, r7
 8007d1e:	f8d9 7000 	ldr.w	r7, [r9]
 8007d22:	0c12      	lsrs	r2, r2, #16
 8007d24:	0c3f      	lsrs	r7, r7, #16
 8007d26:	fb0a 7202 	mla	r2, sl, r2, r7
 8007d2a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d34:	4565      	cmp	r5, ip
 8007d36:	f849 3b04 	str.w	r3, [r9], #4
 8007d3a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007d3e:	d8e4      	bhi.n	8007d0a <__multiply+0xaa>
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	50e7      	str	r7, [r4, r3]
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d4a:	3104      	adds	r1, #4
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	d020      	beq.n	8007d94 <__multiply+0x134>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	4647      	mov	r7, r8
 8007d56:	46a4      	mov	ip, r4
 8007d58:	f04f 0a00 	mov.w	sl, #0
 8007d5c:	f8b7 b000 	ldrh.w	fp, [r7]
 8007d60:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007d64:	fb09 220b 	mla	r2, r9, fp, r2
 8007d68:	4452      	add	r2, sl
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d70:	f84c 3b04 	str.w	r3, [ip], #4
 8007d74:	f857 3b04 	ldr.w	r3, [r7], #4
 8007d78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d7c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007d80:	fb09 330a 	mla	r3, r9, sl, r3
 8007d84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007d88:	42bd      	cmp	r5, r7
 8007d8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d8e:	d8e5      	bhi.n	8007d5c <__multiply+0xfc>
 8007d90:	9a01      	ldr	r2, [sp, #4]
 8007d92:	50a3      	str	r3, [r4, r2]
 8007d94:	3404      	adds	r4, #4
 8007d96:	e79f      	b.n	8007cd8 <__multiply+0x78>
 8007d98:	3e01      	subs	r6, #1
 8007d9a:	e7a1      	b.n	8007ce0 <__multiply+0x80>
 8007d9c:	080089c4 	.word	0x080089c4
 8007da0:	080089d5 	.word	0x080089d5

08007da4 <__pow5mult>:
 8007da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da8:	4615      	mov	r5, r2
 8007daa:	f012 0203 	ands.w	r2, r2, #3
 8007dae:	4607      	mov	r7, r0
 8007db0:	460e      	mov	r6, r1
 8007db2:	d007      	beq.n	8007dc4 <__pow5mult+0x20>
 8007db4:	4c25      	ldr	r4, [pc, #148]	@ (8007e4c <__pow5mult+0xa8>)
 8007db6:	3a01      	subs	r2, #1
 8007db8:	2300      	movs	r3, #0
 8007dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dbe:	f7ff fea7 	bl	8007b10 <__multadd>
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	10ad      	asrs	r5, r5, #2
 8007dc6:	d03d      	beq.n	8007e44 <__pow5mult+0xa0>
 8007dc8:	69fc      	ldr	r4, [r7, #28]
 8007dca:	b97c      	cbnz	r4, 8007dec <__pow5mult+0x48>
 8007dcc:	2010      	movs	r0, #16
 8007dce:	f7ff fd87 	bl	80078e0 <malloc>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	61f8      	str	r0, [r7, #28]
 8007dd6:	b928      	cbnz	r0, 8007de4 <__pow5mult+0x40>
 8007dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e50 <__pow5mult+0xac>)
 8007dda:	481e      	ldr	r0, [pc, #120]	@ (8007e54 <__pow5mult+0xb0>)
 8007ddc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007de0:	f000 fc3e 	bl	8008660 <__assert_func>
 8007de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007de8:	6004      	str	r4, [r0, #0]
 8007dea:	60c4      	str	r4, [r0, #12]
 8007dec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007df0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007df4:	b94c      	cbnz	r4, 8007e0a <__pow5mult+0x66>
 8007df6:	f240 2171 	movw	r1, #625	@ 0x271
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f7ff ff1a 	bl	8007c34 <__i2b>
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e06:	4604      	mov	r4, r0
 8007e08:	6003      	str	r3, [r0, #0]
 8007e0a:	f04f 0900 	mov.w	r9, #0
 8007e0e:	07eb      	lsls	r3, r5, #31
 8007e10:	d50a      	bpl.n	8007e28 <__pow5mult+0x84>
 8007e12:	4631      	mov	r1, r6
 8007e14:	4622      	mov	r2, r4
 8007e16:	4638      	mov	r0, r7
 8007e18:	f7ff ff22 	bl	8007c60 <__multiply>
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4680      	mov	r8, r0
 8007e20:	4638      	mov	r0, r7
 8007e22:	f7ff fe53 	bl	8007acc <_Bfree>
 8007e26:	4646      	mov	r6, r8
 8007e28:	106d      	asrs	r5, r5, #1
 8007e2a:	d00b      	beq.n	8007e44 <__pow5mult+0xa0>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	b938      	cbnz	r0, 8007e40 <__pow5mult+0x9c>
 8007e30:	4622      	mov	r2, r4
 8007e32:	4621      	mov	r1, r4
 8007e34:	4638      	mov	r0, r7
 8007e36:	f7ff ff13 	bl	8007c60 <__multiply>
 8007e3a:	6020      	str	r0, [r4, #0]
 8007e3c:	f8c0 9000 	str.w	r9, [r0]
 8007e40:	4604      	mov	r4, r0
 8007e42:	e7e4      	b.n	8007e0e <__pow5mult+0x6a>
 8007e44:	4630      	mov	r0, r6
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	bf00      	nop
 8007e4c:	08008a88 	.word	0x08008a88
 8007e50:	08008955 	.word	0x08008955
 8007e54:	080089d5 	.word	0x080089d5

08007e58 <__lshift>:
 8007e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	6849      	ldr	r1, [r1, #4]
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e66:	68a3      	ldr	r3, [r4, #8]
 8007e68:	4607      	mov	r7, r0
 8007e6a:	4691      	mov	r9, r2
 8007e6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e70:	f108 0601 	add.w	r6, r8, #1
 8007e74:	42b3      	cmp	r3, r6
 8007e76:	db0b      	blt.n	8007e90 <__lshift+0x38>
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f7ff fde7 	bl	8007a4c <_Balloc>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b948      	cbnz	r0, 8007e96 <__lshift+0x3e>
 8007e82:	4602      	mov	r2, r0
 8007e84:	4b28      	ldr	r3, [pc, #160]	@ (8007f28 <__lshift+0xd0>)
 8007e86:	4829      	ldr	r0, [pc, #164]	@ (8007f2c <__lshift+0xd4>)
 8007e88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e8c:	f000 fbe8 	bl	8008660 <__assert_func>
 8007e90:	3101      	adds	r1, #1
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	e7ee      	b.n	8007e74 <__lshift+0x1c>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f100 0114 	add.w	r1, r0, #20
 8007e9c:	f100 0210 	add.w	r2, r0, #16
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	4553      	cmp	r3, sl
 8007ea4:	db33      	blt.n	8007f0e <__lshift+0xb6>
 8007ea6:	6920      	ldr	r0, [r4, #16]
 8007ea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eac:	f104 0314 	add.w	r3, r4, #20
 8007eb0:	f019 091f 	ands.w	r9, r9, #31
 8007eb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ebc:	d02b      	beq.n	8007f16 <__lshift+0xbe>
 8007ebe:	f1c9 0e20 	rsb	lr, r9, #32
 8007ec2:	468a      	mov	sl, r1
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	fa00 f009 	lsl.w	r0, r0, r9
 8007ecc:	4310      	orrs	r0, r2
 8007ece:	f84a 0b04 	str.w	r0, [sl], #4
 8007ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed6:	459c      	cmp	ip, r3
 8007ed8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007edc:	d8f3      	bhi.n	8007ec6 <__lshift+0x6e>
 8007ede:	ebac 0304 	sub.w	r3, ip, r4
 8007ee2:	3b15      	subs	r3, #21
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	3304      	adds	r3, #4
 8007eea:	f104 0015 	add.w	r0, r4, #21
 8007eee:	4560      	cmp	r0, ip
 8007ef0:	bf88      	it	hi
 8007ef2:	2304      	movhi	r3, #4
 8007ef4:	50ca      	str	r2, [r1, r3]
 8007ef6:	b10a      	cbz	r2, 8007efc <__lshift+0xa4>
 8007ef8:	f108 0602 	add.w	r6, r8, #2
 8007efc:	3e01      	subs	r6, #1
 8007efe:	4638      	mov	r0, r7
 8007f00:	612e      	str	r6, [r5, #16]
 8007f02:	4621      	mov	r1, r4
 8007f04:	f7ff fde2 	bl	8007acc <_Bfree>
 8007f08:	4628      	mov	r0, r5
 8007f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f12:	3301      	adds	r3, #1
 8007f14:	e7c5      	b.n	8007ea2 <__lshift+0x4a>
 8007f16:	3904      	subs	r1, #4
 8007f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f20:	459c      	cmp	ip, r3
 8007f22:	d8f9      	bhi.n	8007f18 <__lshift+0xc0>
 8007f24:	e7ea      	b.n	8007efc <__lshift+0xa4>
 8007f26:	bf00      	nop
 8007f28:	080089c4 	.word	0x080089c4
 8007f2c:	080089d5 	.word	0x080089d5

08007f30 <__mcmp>:
 8007f30:	690a      	ldr	r2, [r1, #16]
 8007f32:	4603      	mov	r3, r0
 8007f34:	6900      	ldr	r0, [r0, #16]
 8007f36:	1a80      	subs	r0, r0, r2
 8007f38:	b530      	push	{r4, r5, lr}
 8007f3a:	d10e      	bne.n	8007f5a <__mcmp+0x2a>
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	3114      	adds	r1, #20
 8007f40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f50:	4295      	cmp	r5, r2
 8007f52:	d003      	beq.n	8007f5c <__mcmp+0x2c>
 8007f54:	d205      	bcs.n	8007f62 <__mcmp+0x32>
 8007f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f5a:	bd30      	pop	{r4, r5, pc}
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	d3f3      	bcc.n	8007f48 <__mcmp+0x18>
 8007f60:	e7fb      	b.n	8007f5a <__mcmp+0x2a>
 8007f62:	2001      	movs	r0, #1
 8007f64:	e7f9      	b.n	8007f5a <__mcmp+0x2a>
	...

08007f68 <__mdiff>:
 8007f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	4689      	mov	r9, r1
 8007f6e:	4606      	mov	r6, r0
 8007f70:	4611      	mov	r1, r2
 8007f72:	4648      	mov	r0, r9
 8007f74:	4614      	mov	r4, r2
 8007f76:	f7ff ffdb 	bl	8007f30 <__mcmp>
 8007f7a:	1e05      	subs	r5, r0, #0
 8007f7c:	d112      	bne.n	8007fa4 <__mdiff+0x3c>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff fd63 	bl	8007a4c <_Balloc>
 8007f86:	4602      	mov	r2, r0
 8007f88:	b928      	cbnz	r0, 8007f96 <__mdiff+0x2e>
 8007f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8008088 <__mdiff+0x120>)
 8007f8c:	f240 2137 	movw	r1, #567	@ 0x237
 8007f90:	483e      	ldr	r0, [pc, #248]	@ (800808c <__mdiff+0x124>)
 8007f92:	f000 fb65 	bl	8008660 <__assert_func>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	b003      	add	sp, #12
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	bfbc      	itt	lt
 8007fa6:	464b      	movlt	r3, r9
 8007fa8:	46a1      	movlt	r9, r4
 8007faa:	4630      	mov	r0, r6
 8007fac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007fb0:	bfba      	itte	lt
 8007fb2:	461c      	movlt	r4, r3
 8007fb4:	2501      	movlt	r5, #1
 8007fb6:	2500      	movge	r5, #0
 8007fb8:	f7ff fd48 	bl	8007a4c <_Balloc>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	b918      	cbnz	r0, 8007fc8 <__mdiff+0x60>
 8007fc0:	4b31      	ldr	r3, [pc, #196]	@ (8008088 <__mdiff+0x120>)
 8007fc2:	f240 2145 	movw	r1, #581	@ 0x245
 8007fc6:	e7e3      	b.n	8007f90 <__mdiff+0x28>
 8007fc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fcc:	6926      	ldr	r6, [r4, #16]
 8007fce:	60c5      	str	r5, [r0, #12]
 8007fd0:	f109 0310 	add.w	r3, r9, #16
 8007fd4:	f109 0514 	add.w	r5, r9, #20
 8007fd8:	f104 0e14 	add.w	lr, r4, #20
 8007fdc:	f100 0b14 	add.w	fp, r0, #20
 8007fe0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fe4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	46d9      	mov	r9, fp
 8007fec:	f04f 0c00 	mov.w	ip, #0
 8007ff0:	9b01      	ldr	r3, [sp, #4]
 8007ff2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ff6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	fa1f f38a 	uxth.w	r3, sl
 8008000:	4619      	mov	r1, r3
 8008002:	b283      	uxth	r3, r0
 8008004:	1acb      	subs	r3, r1, r3
 8008006:	0c00      	lsrs	r0, r0, #16
 8008008:	4463      	add	r3, ip
 800800a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800800e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008012:	b29b      	uxth	r3, r3
 8008014:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008018:	4576      	cmp	r6, lr
 800801a:	f849 3b04 	str.w	r3, [r9], #4
 800801e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008022:	d8e5      	bhi.n	8007ff0 <__mdiff+0x88>
 8008024:	1b33      	subs	r3, r6, r4
 8008026:	3b15      	subs	r3, #21
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	3415      	adds	r4, #21
 800802e:	3304      	adds	r3, #4
 8008030:	42a6      	cmp	r6, r4
 8008032:	bf38      	it	cc
 8008034:	2304      	movcc	r3, #4
 8008036:	441d      	add	r5, r3
 8008038:	445b      	add	r3, fp
 800803a:	461e      	mov	r6, r3
 800803c:	462c      	mov	r4, r5
 800803e:	4544      	cmp	r4, r8
 8008040:	d30e      	bcc.n	8008060 <__mdiff+0xf8>
 8008042:	f108 0103 	add.w	r1, r8, #3
 8008046:	1b49      	subs	r1, r1, r5
 8008048:	f021 0103 	bic.w	r1, r1, #3
 800804c:	3d03      	subs	r5, #3
 800804e:	45a8      	cmp	r8, r5
 8008050:	bf38      	it	cc
 8008052:	2100      	movcc	r1, #0
 8008054:	440b      	add	r3, r1
 8008056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800805a:	b191      	cbz	r1, 8008082 <__mdiff+0x11a>
 800805c:	6117      	str	r7, [r2, #16]
 800805e:	e79d      	b.n	8007f9c <__mdiff+0x34>
 8008060:	f854 1b04 	ldr.w	r1, [r4], #4
 8008064:	46e6      	mov	lr, ip
 8008066:	0c08      	lsrs	r0, r1, #16
 8008068:	fa1c fc81 	uxtah	ip, ip, r1
 800806c:	4471      	add	r1, lr
 800806e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008072:	b289      	uxth	r1, r1
 8008074:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008078:	f846 1b04 	str.w	r1, [r6], #4
 800807c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008080:	e7dd      	b.n	800803e <__mdiff+0xd6>
 8008082:	3f01      	subs	r7, #1
 8008084:	e7e7      	b.n	8008056 <__mdiff+0xee>
 8008086:	bf00      	nop
 8008088:	080089c4 	.word	0x080089c4
 800808c:	080089d5 	.word	0x080089d5

08008090 <__d2b>:
 8008090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008094:	460f      	mov	r7, r1
 8008096:	2101      	movs	r1, #1
 8008098:	ec59 8b10 	vmov	r8, r9, d0
 800809c:	4616      	mov	r6, r2
 800809e:	f7ff fcd5 	bl	8007a4c <_Balloc>
 80080a2:	4604      	mov	r4, r0
 80080a4:	b930      	cbnz	r0, 80080b4 <__d2b+0x24>
 80080a6:	4602      	mov	r2, r0
 80080a8:	4b23      	ldr	r3, [pc, #140]	@ (8008138 <__d2b+0xa8>)
 80080aa:	4824      	ldr	r0, [pc, #144]	@ (800813c <__d2b+0xac>)
 80080ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80080b0:	f000 fad6 	bl	8008660 <__assert_func>
 80080b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080bc:	b10d      	cbz	r5, 80080c2 <__d2b+0x32>
 80080be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	f1b8 0300 	subs.w	r3, r8, #0
 80080c8:	d023      	beq.n	8008112 <__d2b+0x82>
 80080ca:	4668      	mov	r0, sp
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	f7ff fd84 	bl	8007bda <__lo0bits>
 80080d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080d6:	b1d0      	cbz	r0, 800810e <__d2b+0x7e>
 80080d8:	f1c0 0320 	rsb	r3, r0, #32
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	430b      	orrs	r3, r1
 80080e2:	40c2      	lsrs	r2, r0
 80080e4:	6163      	str	r3, [r4, #20]
 80080e6:	9201      	str	r2, [sp, #4]
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	61a3      	str	r3, [r4, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bf0c      	ite	eq
 80080f0:	2201      	moveq	r2, #1
 80080f2:	2202      	movne	r2, #2
 80080f4:	6122      	str	r2, [r4, #16]
 80080f6:	b1a5      	cbz	r5, 8008122 <__d2b+0x92>
 80080f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80080fc:	4405      	add	r5, r0
 80080fe:	603d      	str	r5, [r7, #0]
 8008100:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008104:	6030      	str	r0, [r6, #0]
 8008106:	4620      	mov	r0, r4
 8008108:	b003      	add	sp, #12
 800810a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800810e:	6161      	str	r1, [r4, #20]
 8008110:	e7ea      	b.n	80080e8 <__d2b+0x58>
 8008112:	a801      	add	r0, sp, #4
 8008114:	f7ff fd61 	bl	8007bda <__lo0bits>
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	6163      	str	r3, [r4, #20]
 800811c:	3020      	adds	r0, #32
 800811e:	2201      	movs	r2, #1
 8008120:	e7e8      	b.n	80080f4 <__d2b+0x64>
 8008122:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008126:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800812a:	6038      	str	r0, [r7, #0]
 800812c:	6918      	ldr	r0, [r3, #16]
 800812e:	f7ff fd35 	bl	8007b9c <__hi0bits>
 8008132:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008136:	e7e5      	b.n	8008104 <__d2b+0x74>
 8008138:	080089c4 	.word	0x080089c4
 800813c:	080089d5 	.word	0x080089d5

08008140 <__sfputc_r>:
 8008140:	6893      	ldr	r3, [r2, #8]
 8008142:	3b01      	subs	r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	b410      	push	{r4}
 8008148:	6093      	str	r3, [r2, #8]
 800814a:	da08      	bge.n	800815e <__sfputc_r+0x1e>
 800814c:	6994      	ldr	r4, [r2, #24]
 800814e:	42a3      	cmp	r3, r4
 8008150:	db01      	blt.n	8008156 <__sfputc_r+0x16>
 8008152:	290a      	cmp	r1, #10
 8008154:	d103      	bne.n	800815e <__sfputc_r+0x1e>
 8008156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800815a:	f7fe bc7c 	b.w	8006a56 <__swbuf_r>
 800815e:	6813      	ldr	r3, [r2, #0]
 8008160:	1c58      	adds	r0, r3, #1
 8008162:	6010      	str	r0, [r2, #0]
 8008164:	7019      	strb	r1, [r3, #0]
 8008166:	4608      	mov	r0, r1
 8008168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816c:	4770      	bx	lr

0800816e <__sfputs_r>:
 800816e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008170:	4606      	mov	r6, r0
 8008172:	460f      	mov	r7, r1
 8008174:	4614      	mov	r4, r2
 8008176:	18d5      	adds	r5, r2, r3
 8008178:	42ac      	cmp	r4, r5
 800817a:	d101      	bne.n	8008180 <__sfputs_r+0x12>
 800817c:	2000      	movs	r0, #0
 800817e:	e007      	b.n	8008190 <__sfputs_r+0x22>
 8008180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008184:	463a      	mov	r2, r7
 8008186:	4630      	mov	r0, r6
 8008188:	f7ff ffda 	bl	8008140 <__sfputc_r>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d1f3      	bne.n	8008178 <__sfputs_r+0xa>
 8008190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008194 <_vfiprintf_r>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	460d      	mov	r5, r1
 800819a:	b09d      	sub	sp, #116	@ 0x74
 800819c:	4614      	mov	r4, r2
 800819e:	4698      	mov	r8, r3
 80081a0:	4606      	mov	r6, r0
 80081a2:	b118      	cbz	r0, 80081ac <_vfiprintf_r+0x18>
 80081a4:	6a03      	ldr	r3, [r0, #32]
 80081a6:	b90b      	cbnz	r3, 80081ac <_vfiprintf_r+0x18>
 80081a8:	f7fe fb6c 	bl	8006884 <__sinit>
 80081ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ae:	07d9      	lsls	r1, r3, #31
 80081b0:	d405      	bmi.n	80081be <_vfiprintf_r+0x2a>
 80081b2:	89ab      	ldrh	r3, [r5, #12]
 80081b4:	059a      	lsls	r2, r3, #22
 80081b6:	d402      	bmi.n	80081be <_vfiprintf_r+0x2a>
 80081b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ba:	f7fe fd5e 	bl	8006c7a <__retarget_lock_acquire_recursive>
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	071b      	lsls	r3, r3, #28
 80081c2:	d501      	bpl.n	80081c8 <_vfiprintf_r+0x34>
 80081c4:	692b      	ldr	r3, [r5, #16]
 80081c6:	b99b      	cbnz	r3, 80081f0 <_vfiprintf_r+0x5c>
 80081c8:	4629      	mov	r1, r5
 80081ca:	4630      	mov	r0, r6
 80081cc:	f7fe fc82 	bl	8006ad4 <__swsetup_r>
 80081d0:	b170      	cbz	r0, 80081f0 <_vfiprintf_r+0x5c>
 80081d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d4:	07dc      	lsls	r4, r3, #31
 80081d6:	d504      	bpl.n	80081e2 <_vfiprintf_r+0x4e>
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081dc:	b01d      	add	sp, #116	@ 0x74
 80081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	0598      	lsls	r0, r3, #22
 80081e6:	d4f7      	bmi.n	80081d8 <_vfiprintf_r+0x44>
 80081e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ea:	f7fe fd47 	bl	8006c7c <__retarget_lock_release_recursive>
 80081ee:	e7f3      	b.n	80081d8 <_vfiprintf_r+0x44>
 80081f0:	2300      	movs	r3, #0
 80081f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f4:	2320      	movs	r3, #32
 80081f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80081fe:	2330      	movs	r3, #48	@ 0x30
 8008200:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083b0 <_vfiprintf_r+0x21c>
 8008204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008208:	f04f 0901 	mov.w	r9, #1
 800820c:	4623      	mov	r3, r4
 800820e:	469a      	mov	sl, r3
 8008210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008214:	b10a      	cbz	r2, 800821a <_vfiprintf_r+0x86>
 8008216:	2a25      	cmp	r2, #37	@ 0x25
 8008218:	d1f9      	bne.n	800820e <_vfiprintf_r+0x7a>
 800821a:	ebba 0b04 	subs.w	fp, sl, r4
 800821e:	d00b      	beq.n	8008238 <_vfiprintf_r+0xa4>
 8008220:	465b      	mov	r3, fp
 8008222:	4622      	mov	r2, r4
 8008224:	4629      	mov	r1, r5
 8008226:	4630      	mov	r0, r6
 8008228:	f7ff ffa1 	bl	800816e <__sfputs_r>
 800822c:	3001      	adds	r0, #1
 800822e:	f000 80a7 	beq.w	8008380 <_vfiprintf_r+0x1ec>
 8008232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008234:	445a      	add	r2, fp
 8008236:	9209      	str	r2, [sp, #36]	@ 0x24
 8008238:	f89a 3000 	ldrb.w	r3, [sl]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 809f 	beq.w	8008380 <_vfiprintf_r+0x1ec>
 8008242:	2300      	movs	r3, #0
 8008244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824c:	f10a 0a01 	add.w	sl, sl, #1
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	9307      	str	r3, [sp, #28]
 8008254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008258:	931a      	str	r3, [sp, #104]	@ 0x68
 800825a:	4654      	mov	r4, sl
 800825c:	2205      	movs	r2, #5
 800825e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008262:	4853      	ldr	r0, [pc, #332]	@ (80083b0 <_vfiprintf_r+0x21c>)
 8008264:	f7f8 f854 	bl	8000310 <memchr>
 8008268:	9a04      	ldr	r2, [sp, #16]
 800826a:	b9d8      	cbnz	r0, 80082a4 <_vfiprintf_r+0x110>
 800826c:	06d1      	lsls	r1, r2, #27
 800826e:	bf44      	itt	mi
 8008270:	2320      	movmi	r3, #32
 8008272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008276:	0713      	lsls	r3, r2, #28
 8008278:	bf44      	itt	mi
 800827a:	232b      	movmi	r3, #43	@ 0x2b
 800827c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008280:	f89a 3000 	ldrb.w	r3, [sl]
 8008284:	2b2a      	cmp	r3, #42	@ 0x2a
 8008286:	d015      	beq.n	80082b4 <_vfiprintf_r+0x120>
 8008288:	9a07      	ldr	r2, [sp, #28]
 800828a:	4654      	mov	r4, sl
 800828c:	2000      	movs	r0, #0
 800828e:	f04f 0c0a 	mov.w	ip, #10
 8008292:	4621      	mov	r1, r4
 8008294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008298:	3b30      	subs	r3, #48	@ 0x30
 800829a:	2b09      	cmp	r3, #9
 800829c:	d94b      	bls.n	8008336 <_vfiprintf_r+0x1a2>
 800829e:	b1b0      	cbz	r0, 80082ce <_vfiprintf_r+0x13a>
 80082a0:	9207      	str	r2, [sp, #28]
 80082a2:	e014      	b.n	80082ce <_vfiprintf_r+0x13a>
 80082a4:	eba0 0308 	sub.w	r3, r0, r8
 80082a8:	fa09 f303 	lsl.w	r3, r9, r3
 80082ac:	4313      	orrs	r3, r2
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	46a2      	mov	sl, r4
 80082b2:	e7d2      	b.n	800825a <_vfiprintf_r+0xc6>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	1d19      	adds	r1, r3, #4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	bfbb      	ittet	lt
 80082c0:	425b      	neglt	r3, r3
 80082c2:	f042 0202 	orrlt.w	r2, r2, #2
 80082c6:	9307      	strge	r3, [sp, #28]
 80082c8:	9307      	strlt	r3, [sp, #28]
 80082ca:	bfb8      	it	lt
 80082cc:	9204      	strlt	r2, [sp, #16]
 80082ce:	7823      	ldrb	r3, [r4, #0]
 80082d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80082d2:	d10a      	bne.n	80082ea <_vfiprintf_r+0x156>
 80082d4:	7863      	ldrb	r3, [r4, #1]
 80082d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d8:	d132      	bne.n	8008340 <_vfiprintf_r+0x1ac>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	1d1a      	adds	r2, r3, #4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	9203      	str	r2, [sp, #12]
 80082e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082e6:	3402      	adds	r4, #2
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083c0 <_vfiprintf_r+0x22c>
 80082ee:	7821      	ldrb	r1, [r4, #0]
 80082f0:	2203      	movs	r2, #3
 80082f2:	4650      	mov	r0, sl
 80082f4:	f7f8 f80c 	bl	8000310 <memchr>
 80082f8:	b138      	cbz	r0, 800830a <_vfiprintf_r+0x176>
 80082fa:	9b04      	ldr	r3, [sp, #16]
 80082fc:	eba0 000a 	sub.w	r0, r0, sl
 8008300:	2240      	movs	r2, #64	@ 0x40
 8008302:	4082      	lsls	r2, r0
 8008304:	4313      	orrs	r3, r2
 8008306:	3401      	adds	r4, #1
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830e:	4829      	ldr	r0, [pc, #164]	@ (80083b4 <_vfiprintf_r+0x220>)
 8008310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008314:	2206      	movs	r2, #6
 8008316:	f7f7 fffb 	bl	8000310 <memchr>
 800831a:	2800      	cmp	r0, #0
 800831c:	d03f      	beq.n	800839e <_vfiprintf_r+0x20a>
 800831e:	4b26      	ldr	r3, [pc, #152]	@ (80083b8 <_vfiprintf_r+0x224>)
 8008320:	bb1b      	cbnz	r3, 800836a <_vfiprintf_r+0x1d6>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	3307      	adds	r3, #7
 8008326:	f023 0307 	bic.w	r3, r3, #7
 800832a:	3308      	adds	r3, #8
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008330:	443b      	add	r3, r7
 8008332:	9309      	str	r3, [sp, #36]	@ 0x24
 8008334:	e76a      	b.n	800820c <_vfiprintf_r+0x78>
 8008336:	fb0c 3202 	mla	r2, ip, r2, r3
 800833a:	460c      	mov	r4, r1
 800833c:	2001      	movs	r0, #1
 800833e:	e7a8      	b.n	8008292 <_vfiprintf_r+0xfe>
 8008340:	2300      	movs	r3, #0
 8008342:	3401      	adds	r4, #1
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	4619      	mov	r1, r3
 8008348:	f04f 0c0a 	mov.w	ip, #10
 800834c:	4620      	mov	r0, r4
 800834e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008352:	3a30      	subs	r2, #48	@ 0x30
 8008354:	2a09      	cmp	r2, #9
 8008356:	d903      	bls.n	8008360 <_vfiprintf_r+0x1cc>
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0c6      	beq.n	80082ea <_vfiprintf_r+0x156>
 800835c:	9105      	str	r1, [sp, #20]
 800835e:	e7c4      	b.n	80082ea <_vfiprintf_r+0x156>
 8008360:	fb0c 2101 	mla	r1, ip, r1, r2
 8008364:	4604      	mov	r4, r0
 8008366:	2301      	movs	r3, #1
 8008368:	e7f0      	b.n	800834c <_vfiprintf_r+0x1b8>
 800836a:	ab03      	add	r3, sp, #12
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	462a      	mov	r2, r5
 8008370:	4b12      	ldr	r3, [pc, #72]	@ (80083bc <_vfiprintf_r+0x228>)
 8008372:	a904      	add	r1, sp, #16
 8008374:	4630      	mov	r0, r6
 8008376:	f7fd fe53 	bl	8006020 <_printf_float>
 800837a:	4607      	mov	r7, r0
 800837c:	1c78      	adds	r0, r7, #1
 800837e:	d1d6      	bne.n	800832e <_vfiprintf_r+0x19a>
 8008380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008382:	07d9      	lsls	r1, r3, #31
 8008384:	d405      	bmi.n	8008392 <_vfiprintf_r+0x1fe>
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	059a      	lsls	r2, r3, #22
 800838a:	d402      	bmi.n	8008392 <_vfiprintf_r+0x1fe>
 800838c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800838e:	f7fe fc75 	bl	8006c7c <__retarget_lock_release_recursive>
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	065b      	lsls	r3, r3, #25
 8008396:	f53f af1f 	bmi.w	80081d8 <_vfiprintf_r+0x44>
 800839a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800839c:	e71e      	b.n	80081dc <_vfiprintf_r+0x48>
 800839e:	ab03      	add	r3, sp, #12
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	462a      	mov	r2, r5
 80083a4:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <_vfiprintf_r+0x228>)
 80083a6:	a904      	add	r1, sp, #16
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7fe f8c1 	bl	8006530 <_printf_i>
 80083ae:	e7e4      	b.n	800837a <_vfiprintf_r+0x1e6>
 80083b0:	08008a2e 	.word	0x08008a2e
 80083b4:	08008a38 	.word	0x08008a38
 80083b8:	08006021 	.word	0x08006021
 80083bc:	0800816f 	.word	0x0800816f
 80083c0:	08008a34 	.word	0x08008a34

080083c4 <__sflush_r>:
 80083c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083cc:	0716      	lsls	r6, r2, #28
 80083ce:	4605      	mov	r5, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	d454      	bmi.n	800847e <__sflush_r+0xba>
 80083d4:	684b      	ldr	r3, [r1, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	dc02      	bgt.n	80083e0 <__sflush_r+0x1c>
 80083da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd48      	ble.n	8008472 <__sflush_r+0xae>
 80083e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083e2:	2e00      	cmp	r6, #0
 80083e4:	d045      	beq.n	8008472 <__sflush_r+0xae>
 80083e6:	2300      	movs	r3, #0
 80083e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083ec:	682f      	ldr	r7, [r5, #0]
 80083ee:	6a21      	ldr	r1, [r4, #32]
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	d030      	beq.n	8008456 <__sflush_r+0x92>
 80083f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	0759      	lsls	r1, r3, #29
 80083fa:	d505      	bpl.n	8008408 <__sflush_r+0x44>
 80083fc:	6863      	ldr	r3, [r4, #4]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008402:	b10b      	cbz	r3, 8008408 <__sflush_r+0x44>
 8008404:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	2300      	movs	r3, #0
 800840a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800840c:	6a21      	ldr	r1, [r4, #32]
 800840e:	4628      	mov	r0, r5
 8008410:	47b0      	blx	r6
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	d106      	bne.n	8008426 <__sflush_r+0x62>
 8008418:	6829      	ldr	r1, [r5, #0]
 800841a:	291d      	cmp	r1, #29
 800841c:	d82b      	bhi.n	8008476 <__sflush_r+0xb2>
 800841e:	4a2a      	ldr	r2, [pc, #168]	@ (80084c8 <__sflush_r+0x104>)
 8008420:	40ca      	lsrs	r2, r1
 8008422:	07d6      	lsls	r6, r2, #31
 8008424:	d527      	bpl.n	8008476 <__sflush_r+0xb2>
 8008426:	2200      	movs	r2, #0
 8008428:	6062      	str	r2, [r4, #4]
 800842a:	04d9      	lsls	r1, r3, #19
 800842c:	6922      	ldr	r2, [r4, #16]
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	d504      	bpl.n	800843c <__sflush_r+0x78>
 8008432:	1c42      	adds	r2, r0, #1
 8008434:	d101      	bne.n	800843a <__sflush_r+0x76>
 8008436:	682b      	ldr	r3, [r5, #0]
 8008438:	b903      	cbnz	r3, 800843c <__sflush_r+0x78>
 800843a:	6560      	str	r0, [r4, #84]	@ 0x54
 800843c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800843e:	602f      	str	r7, [r5, #0]
 8008440:	b1b9      	cbz	r1, 8008472 <__sflush_r+0xae>
 8008442:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008446:	4299      	cmp	r1, r3
 8008448:	d002      	beq.n	8008450 <__sflush_r+0x8c>
 800844a:	4628      	mov	r0, r5
 800844c:	f7ff f9fe 	bl	800784c <_free_r>
 8008450:	2300      	movs	r3, #0
 8008452:	6363      	str	r3, [r4, #52]	@ 0x34
 8008454:	e00d      	b.n	8008472 <__sflush_r+0xae>
 8008456:	2301      	movs	r3, #1
 8008458:	4628      	mov	r0, r5
 800845a:	47b0      	blx	r6
 800845c:	4602      	mov	r2, r0
 800845e:	1c50      	adds	r0, r2, #1
 8008460:	d1c9      	bne.n	80083f6 <__sflush_r+0x32>
 8008462:	682b      	ldr	r3, [r5, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0c6      	beq.n	80083f6 <__sflush_r+0x32>
 8008468:	2b1d      	cmp	r3, #29
 800846a:	d001      	beq.n	8008470 <__sflush_r+0xac>
 800846c:	2b16      	cmp	r3, #22
 800846e:	d11e      	bne.n	80084ae <__sflush_r+0xea>
 8008470:	602f      	str	r7, [r5, #0]
 8008472:	2000      	movs	r0, #0
 8008474:	e022      	b.n	80084bc <__sflush_r+0xf8>
 8008476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847a:	b21b      	sxth	r3, r3
 800847c:	e01b      	b.n	80084b6 <__sflush_r+0xf2>
 800847e:	690f      	ldr	r7, [r1, #16]
 8008480:	2f00      	cmp	r7, #0
 8008482:	d0f6      	beq.n	8008472 <__sflush_r+0xae>
 8008484:	0793      	lsls	r3, r2, #30
 8008486:	680e      	ldr	r6, [r1, #0]
 8008488:	bf08      	it	eq
 800848a:	694b      	ldreq	r3, [r1, #20]
 800848c:	600f      	str	r7, [r1, #0]
 800848e:	bf18      	it	ne
 8008490:	2300      	movne	r3, #0
 8008492:	eba6 0807 	sub.w	r8, r6, r7
 8008496:	608b      	str	r3, [r1, #8]
 8008498:	f1b8 0f00 	cmp.w	r8, #0
 800849c:	dde9      	ble.n	8008472 <__sflush_r+0xae>
 800849e:	6a21      	ldr	r1, [r4, #32]
 80084a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084a2:	4643      	mov	r3, r8
 80084a4:	463a      	mov	r2, r7
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b0      	blx	r6
 80084aa:	2800      	cmp	r0, #0
 80084ac:	dc08      	bgt.n	80084c0 <__sflush_r+0xfc>
 80084ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c0:	4407      	add	r7, r0
 80084c2:	eba8 0800 	sub.w	r8, r8, r0
 80084c6:	e7e7      	b.n	8008498 <__sflush_r+0xd4>
 80084c8:	20400001 	.word	0x20400001

080084cc <_fflush_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	690b      	ldr	r3, [r1, #16]
 80084d0:	4605      	mov	r5, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	b913      	cbnz	r3, 80084dc <_fflush_r+0x10>
 80084d6:	2500      	movs	r5, #0
 80084d8:	4628      	mov	r0, r5
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	b118      	cbz	r0, 80084e6 <_fflush_r+0x1a>
 80084de:	6a03      	ldr	r3, [r0, #32]
 80084e0:	b90b      	cbnz	r3, 80084e6 <_fflush_r+0x1a>
 80084e2:	f7fe f9cf 	bl	8006884 <__sinit>
 80084e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0f3      	beq.n	80084d6 <_fflush_r+0xa>
 80084ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084f0:	07d0      	lsls	r0, r2, #31
 80084f2:	d404      	bmi.n	80084fe <_fflush_r+0x32>
 80084f4:	0599      	lsls	r1, r3, #22
 80084f6:	d402      	bmi.n	80084fe <_fflush_r+0x32>
 80084f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084fa:	f7fe fbbe 	bl	8006c7a <__retarget_lock_acquire_recursive>
 80084fe:	4628      	mov	r0, r5
 8008500:	4621      	mov	r1, r4
 8008502:	f7ff ff5f 	bl	80083c4 <__sflush_r>
 8008506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008508:	07da      	lsls	r2, r3, #31
 800850a:	4605      	mov	r5, r0
 800850c:	d4e4      	bmi.n	80084d8 <_fflush_r+0xc>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	059b      	lsls	r3, r3, #22
 8008512:	d4e1      	bmi.n	80084d8 <_fflush_r+0xc>
 8008514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008516:	f7fe fbb1 	bl	8006c7c <__retarget_lock_release_recursive>
 800851a:	e7dd      	b.n	80084d8 <_fflush_r+0xc>

0800851c <__swhatbuf_r>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	460c      	mov	r4, r1
 8008520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008524:	2900      	cmp	r1, #0
 8008526:	b096      	sub	sp, #88	@ 0x58
 8008528:	4615      	mov	r5, r2
 800852a:	461e      	mov	r6, r3
 800852c:	da0d      	bge.n	800854a <__swhatbuf_r+0x2e>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008534:	f04f 0100 	mov.w	r1, #0
 8008538:	bf14      	ite	ne
 800853a:	2340      	movne	r3, #64	@ 0x40
 800853c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008540:	2000      	movs	r0, #0
 8008542:	6031      	str	r1, [r6, #0]
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	b016      	add	sp, #88	@ 0x58
 8008548:	bd70      	pop	{r4, r5, r6, pc}
 800854a:	466a      	mov	r2, sp
 800854c:	f000 f848 	bl	80085e0 <_fstat_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	dbec      	blt.n	800852e <__swhatbuf_r+0x12>
 8008554:	9901      	ldr	r1, [sp, #4]
 8008556:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800855a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800855e:	4259      	negs	r1, r3
 8008560:	4159      	adcs	r1, r3
 8008562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008566:	e7eb      	b.n	8008540 <__swhatbuf_r+0x24>

08008568 <__smakebuf_r>:
 8008568:	898b      	ldrh	r3, [r1, #12]
 800856a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800856c:	079d      	lsls	r5, r3, #30
 800856e:	4606      	mov	r6, r0
 8008570:	460c      	mov	r4, r1
 8008572:	d507      	bpl.n	8008584 <__smakebuf_r+0x1c>
 8008574:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	2301      	movs	r3, #1
 800857e:	6163      	str	r3, [r4, #20]
 8008580:	b003      	add	sp, #12
 8008582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008584:	ab01      	add	r3, sp, #4
 8008586:	466a      	mov	r2, sp
 8008588:	f7ff ffc8 	bl	800851c <__swhatbuf_r>
 800858c:	9f00      	ldr	r7, [sp, #0]
 800858e:	4605      	mov	r5, r0
 8008590:	4639      	mov	r1, r7
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff f9ce 	bl	8007934 <_malloc_r>
 8008598:	b948      	cbnz	r0, 80085ae <__smakebuf_r+0x46>
 800859a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859e:	059a      	lsls	r2, r3, #22
 80085a0:	d4ee      	bmi.n	8008580 <__smakebuf_r+0x18>
 80085a2:	f023 0303 	bic.w	r3, r3, #3
 80085a6:	f043 0302 	orr.w	r3, r3, #2
 80085aa:	81a3      	strh	r3, [r4, #12]
 80085ac:	e7e2      	b.n	8008574 <__smakebuf_r+0xc>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	6020      	str	r0, [r4, #0]
 80085b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085be:	b15b      	cbz	r3, 80085d8 <__smakebuf_r+0x70>
 80085c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 f81d 	bl	8008604 <_isatty_r>
 80085ca:	b128      	cbz	r0, 80085d8 <__smakebuf_r+0x70>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f023 0303 	bic.w	r3, r3, #3
 80085d2:	f043 0301 	orr.w	r3, r3, #1
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	431d      	orrs	r5, r3
 80085dc:	81a5      	strh	r5, [r4, #12]
 80085de:	e7cf      	b.n	8008580 <__smakebuf_r+0x18>

080085e0 <_fstat_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d07      	ldr	r5, [pc, #28]	@ (8008600 <_fstat_r+0x20>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	f7f8 fc9d 	bl	8000f2c <_fstat>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d102      	bne.n	80085fc <_fstat_r+0x1c>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	b103      	cbz	r3, 80085fc <_fstat_r+0x1c>
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
 80085fe:	bf00      	nop
 8008600:	240003ec 	.word	0x240003ec

08008604 <_isatty_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d06      	ldr	r5, [pc, #24]	@ (8008620 <_isatty_r+0x1c>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	f7f8 fc9c 	bl	8000f4c <_isatty>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_isatty_r+0x1a>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_isatty_r+0x1a>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	240003ec 	.word	0x240003ec

08008624 <_sbrk_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d06      	ldr	r5, [pc, #24]	@ (8008640 <_sbrk_r+0x1c>)
 8008628:	2300      	movs	r3, #0
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7f8 fca4 	bl	8000f7c <_sbrk>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_sbrk_r+0x1a>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_sbrk_r+0x1a>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	240003ec 	.word	0x240003ec

08008644 <memcpy>:
 8008644:	440a      	add	r2, r1
 8008646:	4291      	cmp	r1, r2
 8008648:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800864c:	d100      	bne.n	8008650 <memcpy+0xc>
 800864e:	4770      	bx	lr
 8008650:	b510      	push	{r4, lr}
 8008652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800865a:	4291      	cmp	r1, r2
 800865c:	d1f9      	bne.n	8008652 <memcpy+0xe>
 800865e:	bd10      	pop	{r4, pc}

08008660 <__assert_func>:
 8008660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008662:	4614      	mov	r4, r2
 8008664:	461a      	mov	r2, r3
 8008666:	4b09      	ldr	r3, [pc, #36]	@ (800868c <__assert_func+0x2c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4605      	mov	r5, r0
 800866c:	68d8      	ldr	r0, [r3, #12]
 800866e:	b14c      	cbz	r4, 8008684 <__assert_func+0x24>
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <__assert_func+0x30>)
 8008672:	9100      	str	r1, [sp, #0]
 8008674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008678:	4906      	ldr	r1, [pc, #24]	@ (8008694 <__assert_func+0x34>)
 800867a:	462b      	mov	r3, r5
 800867c:	f000 f842 	bl	8008704 <fiprintf>
 8008680:	f000 f852 	bl	8008728 <abort>
 8008684:	4b04      	ldr	r3, [pc, #16]	@ (8008698 <__assert_func+0x38>)
 8008686:	461c      	mov	r4, r3
 8008688:	e7f3      	b.n	8008672 <__assert_func+0x12>
 800868a:	bf00      	nop
 800868c:	2400001c 	.word	0x2400001c
 8008690:	08008a49 	.word	0x08008a49
 8008694:	08008a56 	.word	0x08008a56
 8008698:	08008a84 	.word	0x08008a84

0800869c <_calloc_r>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	fba1 5402 	umull	r5, r4, r1, r2
 80086a2:	b934      	cbnz	r4, 80086b2 <_calloc_r+0x16>
 80086a4:	4629      	mov	r1, r5
 80086a6:	f7ff f945 	bl	8007934 <_malloc_r>
 80086aa:	4606      	mov	r6, r0
 80086ac:	b928      	cbnz	r0, 80086ba <_calloc_r+0x1e>
 80086ae:	4630      	mov	r0, r6
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	220c      	movs	r2, #12
 80086b4:	6002      	str	r2, [r0, #0]
 80086b6:	2600      	movs	r6, #0
 80086b8:	e7f9      	b.n	80086ae <_calloc_r+0x12>
 80086ba:	462a      	mov	r2, r5
 80086bc:	4621      	mov	r1, r4
 80086be:	f7fe fa5f 	bl	8006b80 <memset>
 80086c2:	e7f4      	b.n	80086ae <_calloc_r+0x12>

080086c4 <__ascii_mbtowc>:
 80086c4:	b082      	sub	sp, #8
 80086c6:	b901      	cbnz	r1, 80086ca <__ascii_mbtowc+0x6>
 80086c8:	a901      	add	r1, sp, #4
 80086ca:	b142      	cbz	r2, 80086de <__ascii_mbtowc+0x1a>
 80086cc:	b14b      	cbz	r3, 80086e2 <__ascii_mbtowc+0x1e>
 80086ce:	7813      	ldrb	r3, [r2, #0]
 80086d0:	600b      	str	r3, [r1, #0]
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	1e10      	subs	r0, r2, #0
 80086d6:	bf18      	it	ne
 80086d8:	2001      	movne	r0, #1
 80086da:	b002      	add	sp, #8
 80086dc:	4770      	bx	lr
 80086de:	4610      	mov	r0, r2
 80086e0:	e7fb      	b.n	80086da <__ascii_mbtowc+0x16>
 80086e2:	f06f 0001 	mvn.w	r0, #1
 80086e6:	e7f8      	b.n	80086da <__ascii_mbtowc+0x16>

080086e8 <__ascii_wctomb>:
 80086e8:	4603      	mov	r3, r0
 80086ea:	4608      	mov	r0, r1
 80086ec:	b141      	cbz	r1, 8008700 <__ascii_wctomb+0x18>
 80086ee:	2aff      	cmp	r2, #255	@ 0xff
 80086f0:	d904      	bls.n	80086fc <__ascii_wctomb+0x14>
 80086f2:	228a      	movs	r2, #138	@ 0x8a
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086fa:	4770      	bx	lr
 80086fc:	700a      	strb	r2, [r1, #0]
 80086fe:	2001      	movs	r0, #1
 8008700:	4770      	bx	lr
	...

08008704 <fiprintf>:
 8008704:	b40e      	push	{r1, r2, r3}
 8008706:	b503      	push	{r0, r1, lr}
 8008708:	4601      	mov	r1, r0
 800870a:	ab03      	add	r3, sp, #12
 800870c:	4805      	ldr	r0, [pc, #20]	@ (8008724 <fiprintf+0x20>)
 800870e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008712:	6800      	ldr	r0, [r0, #0]
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f7ff fd3d 	bl	8008194 <_vfiprintf_r>
 800871a:	b002      	add	sp, #8
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008720:	b003      	add	sp, #12
 8008722:	4770      	bx	lr
 8008724:	2400001c 	.word	0x2400001c

08008728 <abort>:
 8008728:	b508      	push	{r3, lr}
 800872a:	2006      	movs	r0, #6
 800872c:	f000 f82c 	bl	8008788 <raise>
 8008730:	2001      	movs	r0, #1
 8008732:	f7f8 fbc7 	bl	8000ec4 <_exit>

08008736 <_raise_r>:
 8008736:	291f      	cmp	r1, #31
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4605      	mov	r5, r0
 800873c:	460c      	mov	r4, r1
 800873e:	d904      	bls.n	800874a <_raise_r+0x14>
 8008740:	2316      	movs	r3, #22
 8008742:	6003      	str	r3, [r0, #0]
 8008744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008748:	bd38      	pop	{r3, r4, r5, pc}
 800874a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800874c:	b112      	cbz	r2, 8008754 <_raise_r+0x1e>
 800874e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008752:	b94b      	cbnz	r3, 8008768 <_raise_r+0x32>
 8008754:	4628      	mov	r0, r5
 8008756:	f000 f831 	bl	80087bc <_getpid_r>
 800875a:	4622      	mov	r2, r4
 800875c:	4601      	mov	r1, r0
 800875e:	4628      	mov	r0, r5
 8008760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008764:	f000 b818 	b.w	8008798 <_kill_r>
 8008768:	2b01      	cmp	r3, #1
 800876a:	d00a      	beq.n	8008782 <_raise_r+0x4c>
 800876c:	1c59      	adds	r1, r3, #1
 800876e:	d103      	bne.n	8008778 <_raise_r+0x42>
 8008770:	2316      	movs	r3, #22
 8008772:	6003      	str	r3, [r0, #0]
 8008774:	2001      	movs	r0, #1
 8008776:	e7e7      	b.n	8008748 <_raise_r+0x12>
 8008778:	2100      	movs	r1, #0
 800877a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800877e:	4620      	mov	r0, r4
 8008780:	4798      	blx	r3
 8008782:	2000      	movs	r0, #0
 8008784:	e7e0      	b.n	8008748 <_raise_r+0x12>
	...

08008788 <raise>:
 8008788:	4b02      	ldr	r3, [pc, #8]	@ (8008794 <raise+0xc>)
 800878a:	4601      	mov	r1, r0
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	f7ff bfd2 	b.w	8008736 <_raise_r>
 8008792:	bf00      	nop
 8008794:	2400001c 	.word	0x2400001c

08008798 <_kill_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d07      	ldr	r5, [pc, #28]	@ (80087b8 <_kill_r+0x20>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	4611      	mov	r1, r2
 80087a4:	602b      	str	r3, [r5, #0]
 80087a6:	f7f8 fb7d 	bl	8000ea4 <_kill>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	d102      	bne.n	80087b4 <_kill_r+0x1c>
 80087ae:	682b      	ldr	r3, [r5, #0]
 80087b0:	b103      	cbz	r3, 80087b4 <_kill_r+0x1c>
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	bf00      	nop
 80087b8:	240003ec 	.word	0x240003ec

080087bc <_getpid_r>:
 80087bc:	f7f8 bb6a 	b.w	8000e94 <_getpid>

080087c0 <_init>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr

080087cc <_fini>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr
